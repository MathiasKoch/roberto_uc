
motors.none-eabi:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bef8  08000000  08000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000000  0800bef8  0800bef8  00020880  2**0
                  CONTENTS
  2 .dtors        00000000  0800bef8  0800bef8  00020880  2**0
                  CONTENTS
  3 .ARM.exidx    00000270  0800bef8  0800bef8  0001bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000880  20000000  0800c168  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000012e0  20000880  0800c9e8  00020880  2**2
                  ALLOC
  6 .heap         00000000  20001b60  20001b60  00020880  2**0
                  CONTENTS
  7 .extram       00000000  68000000  68000000  00020880  2**0
                  CONTENTS
  8 .comment      0000006e  00000000  00000000  00020880  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005f0  00000000  00000000  000208ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029270  00000000  00000000  00020ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006535  00000000  00000000  0004a14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007b6a  00000000  00000000  00050683  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000484c  00000000  00000000  000581f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a7af  00000000  00000000  0005ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bbe6  00000000  00000000  000671eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .ARM.attributes 0000002f  00000000  00000000  00072dd1  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000008a8  00000000  00000000  00072e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 0d 01 00 08 55 01 00 08 c9 28 00 08     .P. ....U....(..
 8000010:	55 01 00 08 55 01 00 08 55 01 00 08 00 00 00 00     U...U...U.......
	...
 800002c:	55 01 00 08 55 01 00 08 00 00 00 00 55 01 00 08     U...U.......U...
 800003c:	89 04 00 08 55 01 00 08 55 01 00 08 55 01 00 08     ....U...U...U...
 800004c:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 800005c:	55 01 00 08 a5 28 00 08 55 01 00 08 55 01 00 08     U....(..U...U...
 800006c:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 800007c:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 800008c:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 800009c:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 80000ac:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 80000bc:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
 80000cc:	55 01 00 08 55 01 00 08 f9 27 00 08 55 01 00 08     U...U....'..U...
 80000dc:	55 01 00 08 55 01 00 08 55 01 00 08 55 01 00 08     U...U...U...U...
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <Reset_Handler>:
 800010c:	2100      	movs	r1, #0
 800010e:	e003      	b.n	8000118 <LoopCopyDataInit>

08000110 <CopyDataInit>:
 8000110:	4b0b      	ldr	r3, [pc, #44]	; (8000140 <LoopFillZerobss+0x14>)
 8000112:	585b      	ldr	r3, [r3, r1]
 8000114:	5043      	str	r3, [r0, r1]
 8000116:	3104      	adds	r1, #4

08000118 <LoopCopyDataInit>:
 8000118:	480a      	ldr	r0, [pc, #40]	; (8000144 <LoopFillZerobss+0x18>)
 800011a:	4b0b      	ldr	r3, [pc, #44]	; (8000148 <LoopFillZerobss+0x1c>)
 800011c:	1842      	adds	r2, r0, r1
 800011e:	429a      	cmp	r2, r3
 8000120:	d3f6      	bcc.n	8000110 <CopyDataInit>
 8000122:	4a0a      	ldr	r2, [pc, #40]	; (800014c <LoopFillZerobss+0x20>)
 8000124:	e002      	b.n	800012c <LoopFillZerobss>

08000126 <FillZerobss>:
 8000126:	2300      	movs	r3, #0
 8000128:	f842 3b04 	str.w	r3, [r2], #4

0800012c <LoopFillZerobss>:
 800012c:	4b08      	ldr	r3, [pc, #32]	; (8000150 <LoopFillZerobss+0x24>)
 800012e:	429a      	cmp	r2, r3
 8000130:	d3f9      	bcc.n	8000126 <FillZerobss>
 8000132:	f000 f811 	bl	8000158 <SystemInit>
 8000136:	f009 ff2d 	bl	8009f94 <__libc_init_array>
 800013a:	f003 fae9 	bl	8003710 <main>
 800013e:	4770      	bx	lr
 8000140:	0800c168 	.word	0x0800c168
 8000144:	20000000 	.word	0x20000000
 8000148:	20000880 	.word	0x20000880
 800014c:	20000880 	.word	0x20000880
 8000150:	20001b60 	.word	0x20001b60

08000154 <ADC1_2_IRQHandler>:
 8000154:	e7fe      	b.n	8000154 <ADC1_2_IRQHandler>
	...

08000158 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000158:	4b37      	ldr	r3, [pc, #220]	; (8000238 <SystemInit+0xe0>)
{
 800015a:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	f042 0201 	orr.w	r2, r2, #1
 8000162:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000164:	6859      	ldr	r1, [r3, #4]
 8000166:	4a35      	ldr	r2, [pc, #212]	; (800023c <SystemInit+0xe4>)
 8000168:	400a      	ands	r2, r1
 800016a:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000172:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000176:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800017e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000180:	685a      	ldr	r2, [r3, #4]
 8000182:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000186:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000188:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800018c:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800018e:	2200      	movs	r2, #0
 8000190:	9200      	str	r2, [sp, #0]
 8000192:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800019a:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80001a2:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 80001a4:	9a00      	ldr	r2, [sp, #0]
 80001a6:	3201      	adds	r2, #1
 80001a8:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001aa:	9a01      	ldr	r2, [sp, #4]
 80001ac:	b91a      	cbnz	r2, 80001b6 <SystemInit+0x5e>
 80001ae:	9a00      	ldr	r2, [sp, #0]
 80001b0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80001b4:	d1f2      	bne.n	800019c <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80001bc:	bf18      	it	ne
 80001be:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001c0:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c2:	9a01      	ldr	r2, [sp, #4]
 80001c4:	2a01      	cmp	r2, #1
 80001c6:	d005      	beq.n	80001d4 <SystemInit+0x7c>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001cc:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <SystemInit+0xe8>)
 80001ce:	609a      	str	r2, [r3, #8]
}
 80001d0:	b002      	add	sp, #8
 80001d2:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001d4:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <SystemInit+0xec>)
 80001d6:	6811      	ldr	r1, [r2, #0]
 80001d8:	f041 0110 	orr.w	r1, r1, #16
 80001dc:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001de:	6811      	ldr	r1, [r2, #0]
 80001e0:	f021 0103 	bic.w	r1, r1, #3
 80001e4:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001e6:	6811      	ldr	r1, [r2, #0]
 80001e8:	f041 0102 	orr.w	r1, r1, #2
 80001ec:	6011      	str	r1, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ee:	685a      	ldr	r2, [r3, #4]
 80001f0:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001f6:	685a      	ldr	r2, [r3, #4]
 80001f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001fc:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80001fe:	685a      	ldr	r2, [r3, #4]
 8000200:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000204:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000206:	685a      	ldr	r2, [r3, #4]
 8000208:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800020c:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000214:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	0192      	lsls	r2, r2, #6
 800021a:	d5fc      	bpl.n	8000216 <SystemInit+0xbe>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800021c:	685a      	ldr	r2, [r3, #4]
 800021e:	f022 0203 	bic.w	r2, r2, #3
 8000222:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000224:	685a      	ldr	r2, [r3, #4]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800022c:	685a      	ldr	r2, [r3, #4]
 800022e:	f002 020c 	and.w	r2, r2, #12
 8000232:	2a08      	cmp	r2, #8
 8000234:	d1fa      	bne.n	800022c <SystemInit+0xd4>
 8000236:	e7c7      	b.n	80001c8 <SystemInit+0x70>
 8000238:	40021000 	.word	0x40021000
 800023c:	f8ff0000 	.word	0xf8ff0000
 8000240:	e000ed00 	.word	0xe000ed00
 8000244:	40022000 	.word	0x40022000

08000248 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000248:	4a13      	ldr	r2, [pc, #76]	; (8000298 <SystemCoreClockUpdate+0x50>)
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <SystemCoreClockUpdate+0x54>)
 800024c:	6851      	ldr	r1, [r2, #4]
 800024e:	f001 010c 	and.w	r1, r1, #12
  switch (tmp)
 8000252:	2904      	cmp	r1, #4
 8000254:	d00c      	beq.n	8000270 <SystemCoreClockUpdate+0x28>
 8000256:	2908      	cmp	r1, #8
 8000258:	d00c      	beq.n	8000274 <SystemCoreClockUpdate+0x2c>
 800025a:	4911      	ldr	r1, [pc, #68]	; (80002a0 <SystemCoreClockUpdate+0x58>)
          SystemCoreClock = HSE_VALUE * pllmull;
 800025c:	6019      	str	r1, [r3, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800025e:	6852      	ldr	r2, [r2, #4]
 8000260:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000264:	441a      	add	r2, r3
 8000266:	7911      	ldrb	r1, [r2, #4]
  SystemCoreClock >>= tmp;  
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	40ca      	lsrs	r2, r1
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8000270:	490c      	ldr	r1, [pc, #48]	; (80002a4 <SystemCoreClockUpdate+0x5c>)
 8000272:	e7f3      	b.n	800025c <SystemCoreClockUpdate+0x14>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000274:	6851      	ldr	r1, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000276:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000278:	f3c1 4183 	ubfx	r1, r1, #18, #4
      if (pllsource == 0x00)
 800027c:	03c0      	lsls	r0, r0, #15
      pllmull = ( pllmull >> 18) + 2;
 800027e:	f101 0102 	add.w	r1, r1, #2
      if (pllsource == 0x00)
 8000282:	d402      	bmi.n	800028a <SystemCoreClockUpdate+0x42>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <SystemCoreClockUpdate+0x60>)
          SystemCoreClock = HSE_VALUE * pllmull;
 8000286:	4341      	muls	r1, r0
 8000288:	e7e8      	b.n	800025c <SystemCoreClockUpdate+0x14>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800028a:	6850      	ldr	r0, [r2, #4]
 800028c:	0380      	lsls	r0, r0, #14
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800028e:	bf4c      	ite	mi
 8000290:	4803      	ldrmi	r0, [pc, #12]	; (80002a0 <SystemCoreClockUpdate+0x58>)
          SystemCoreClock = HSE_VALUE * pllmull;
 8000292:	4804      	ldrpl	r0, [pc, #16]	; (80002a4 <SystemCoreClockUpdate+0x5c>)
 8000294:	e7f7      	b.n	8000286 <SystemCoreClockUpdate+0x3e>
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	20000000 	.word	0x20000000
 80002a0:	007a1200 	.word	0x007a1200
 80002a4:	00f42400 	.word	0x00f42400
 80002a8:	003d0900 	.word	0x003d0900

080002ac <LED_Init>:
void LED_Init(){

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 80002ac:	2302      	movs	r3, #2
void LED_Init(){
 80002ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 80002b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80002b4:	2318      	movs	r3, #24
 80002b6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002ba:	2303      	movs	r3, #3
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80002bc:	4c15      	ldr	r4, [pc, #84]	; (8000314 <LED_Init+0x68>)
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002be:	a901      	add	r1, sp, #4
 80002c0:	4815      	ldr	r0, [pc, #84]	; (8000318 <LED_Init+0x6c>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002c2:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002c6:	f000 fcaa 	bl	8000c1e <GPIO_Init>
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80002ca:	4620      	mov	r0, r4
 80002cc:	f001 fd76 	bl	8001dbc <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80002d0:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80002d2:	2501      	movs	r5, #1
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80002d4:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80002d6:	2300      	movs	r3, #0
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80002d8:	4621      	mov	r1, r4
 80002da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80002de:	80e3      	strh	r3, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80002e0:	8123      	strh	r3, [r4, #8]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80002e2:	8065      	strh	r5, [r4, #2]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80002e4:	f001 fc9e 	bl	8001c24 <TIM_OC2Init>
	
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80002e8:	2108      	movs	r1, #8
 80002ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002ee:	f001 fe86 	bl	8001ffe <TIM_OC2PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 80002f2:	4629      	mov	r1, r5
 80002f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002f8:	f001 fe49 	bl	8001f8e <TIM_ARRPreloadConfig>


	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 80002fc:	4629      	mov	r1, r5
 80002fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000302:	f001 fd82 	bl	8001e0a <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8000306:	4629      	mov	r1, r5
 8000308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800030c:	f001 fd71 	bl	8001df2 <TIM_Cmd>
}
 8000310:	b003      	add	sp, #12
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	20001b4a 	.word	0x20001b4a
 8000318:	40010800 	.word	0x40010800

0800031c <led_set>:


void led_set(uint8_t val){
	TIM2->CCR2 = val*TIM2->ARR/255;
 800031c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000320:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8000322:	b29b      	uxth	r3, r3
 8000324:	4358      	muls	r0, r3
 8000326:	23ff      	movs	r3, #255	; 0xff
 8000328:	fb90 f0f3 	sdiv	r0, r0, r3
 800032c:	b280      	uxth	r0, r0
 800032e:	8710      	strh	r0, [r2, #56]	; 0x38
 8000330:	4770      	bx	lr

08000332 <DEBUG_Init>:
}

void DEBUG_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8000332:	2330      	movs	r3, #48	; 0x30
void DEBUG_Init(){
 8000334:	b507      	push	{r0, r1, r2, lr}
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8000336:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800033a:	2303      	movs	r3, #3
 800033c:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000340:	2310      	movs	r3, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000342:	a901      	add	r1, sp, #4
 8000344:	4803      	ldr	r0, [pc, #12]	; (8000354 <DEBUG_Init+0x22>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000346:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800034a:	f000 fc68 	bl	8000c1e <GPIO_Init>
}
 800034e:	b003      	add	sp, #12
 8000350:	f85d fb04 	ldr.w	pc, [sp], #4
 8000354:	40010c00 	.word	0x40010c00

08000358 <debug_toggle>:

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 8000358:	2120      	movs	r1, #32
void debug_toggle(void){
 800035a:	b508      	push	{r3, lr}
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 800035c:	4807      	ldr	r0, [pc, #28]	; (800037c <debug_toggle+0x24>)
 800035e:	f000 fcc1 	bl	8000ce4 <GPIO_ReadOutputDataBit>
    if(led_bit == (uint8_t)Bit_SET)
 8000362:	2801      	cmp	r0, #1
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8000364:	f04f 0120 	mov.w	r1, #32
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <debug_toggle+0x24>)
    if(led_bit == (uint8_t)Bit_SET)
 800036a:	d103      	bne.n	8000374 <debug_toggle+0x1c>
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 800036c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8000370:	f000 bcc3 	b.w	8000cfa <GPIO_ResetBits>
}
 8000374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8000378:	f000 bcbd 	b.w	8000cf6 <GPIO_SetBits>
 800037c:	40010c00 	.word	0x40010c00

08000380 <SHUTDOWN_Init>:

void SHUTDOWN_Init(){
 8000380:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000382:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000384:	2404      	movs	r4, #4
void SHUTDOWN_Init(){
 8000386:	b085      	sub	sp, #20
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000388:	4669      	mov	r1, sp
 800038a:	4813      	ldr	r0, [pc, #76]	; (80003d8 <SHUTDOWN_Init+0x58>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800038c:	f88d 3002 	strb.w	r3, [sp, #2]

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000390:	2508      	movs	r5, #8
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000392:	f8ad 4000 	strh.w	r4, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000396:	f88d 4003 	strb.w	r4, [sp, #3]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800039a:	f000 fc40 	bl	8000c1e <GPIO_Init>
	EXTI_StructInit(&EXTI_InitStructure);
 800039e:	a802      	add	r0, sp, #8
 80003a0:	f000 f936 	bl	8000610 <EXTI_StructInit>
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80003a4:	2300      	movs	r3, #0
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
 80003a6:	9402      	str	r4, [sp, #8]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80003a8:	2401      	movs	r4, #1
	EXTI_Init(&EXTI_InitStructure);
 80003aa:	eb0d 0005 	add.w	r0, sp, r5
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80003ae:	f88d 300c 	strb.w	r3, [sp, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80003b2:	f88d 500d 	strb.w	r5, [sp, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80003b6:	f88d 400e 	strb.w	r4, [sp, #14]
	EXTI_Init(&EXTI_InitStructure);
 80003ba:	f000 f8ef 	bl	800059c <EXTI_Init>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80003be:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
 80003c0:	f88d 5004 	strb.w	r5, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 80003c4:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 80003c8:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80003cc:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80003d0:	f002 f88a 	bl	80024e8 <NVIC_Init>
}
 80003d4:	b005      	add	sp, #20
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	40010800 	.word	0x40010800

080003dc <I2C1_Init>:

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 80003dc:	b510      	push	{r4, lr}
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80003de:	2101      	movs	r1, #1
void I2C1_Init(void){
 80003e0:	b086      	sub	sp, #24
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80003e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003e6:	f000 ffef 	bl	80013c8 <RCC_APB1PeriphClockCmd>

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80003ea:	23c0      	movs	r3, #192	; 0xc0
 80003ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003f0:	2303      	movs	r3, #3
 80003f2:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 80003f6:	231c      	movs	r3, #28
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80003f8:	a901      	add	r1, sp, #4
 80003fa:	4812      	ldr	r0, [pc, #72]	; (8000444 <I2C1_Init+0x68>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 80003fc:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000400:	f000 fc0d 	bl	8000c1e <GPIO_Init>
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000404:	2300      	movs	r3, #0
 8000406:	f8ad 300c 	strh.w	r3, [sp, #12]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800040a:	f8ad 3010 	strh.w	r3, [sp, #16]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800040e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000412:	f8ad 3012 	strh.w	r3, [sp, #18]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000416:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800041a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800041e:	f8ad 3014 	strh.w	r3, [sp, #20]
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 8000422:	4c09      	ldr	r4, [pc, #36]	; (8000448 <I2C1_Init+0x6c>)
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <I2C1_Init+0x70>)
 8000426:	a906      	add	r1, sp, #24
 8000428:	f841 3d10 	str.w	r3, [r1, #-16]!
    I2C_Init(I2C1, &I2C_InitStructure);
 800042c:	4620      	mov	r0, r4
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800042e:	f8ad 200e 	strh.w	r2, [sp, #14]
    I2C_Init(I2C1, &I2C_InitStructure);
 8000432:	f000 fceb 	bl	8000e0c <I2C_Init>

     /*enable I2C*/
    I2C_Cmd(I2C1,ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	4620      	mov	r0, r4
 800043a:	f000 fd5f 	bl	8000efc <I2C_Cmd>

    //NVIC_EnableIRQ(I2C1_EV_IRQn);
}
 800043e:	b006      	add	sp, #24
 8000440:	bd10      	pop	{r4, pc}
 8000442:	bf00      	nop
 8000444:	40010c00 	.word	0x40010c00
 8000448:	40005400 	.word	0x40005400
 800044c:	000186a0 	.word	0x000186a0

08000450 <SysTick_Init>:
#include <stm32f10x.h>
#include "stm32_time.h"

static __IO uint32_t sysTickCounter;
 
void SysTick_Init(void) {
 8000450:	b508      	push	{r3, lr}
	/****************************************
	 *SystemFrequency/1000      1ms         *
	 *SystemFrequency/100000    10us        *
	 *SystemFrequency/1000000   1us         *
	 *****************************************/
	SystemCoreClockUpdate();
 8000452:	f7ff fef9 	bl	8000248 <SystemCoreClockUpdate>
	while (SysTick_Config(SystemCoreClock / 1000000) != 0); // One SysTick interrupt now equals 1us
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <SysTick_Init+0x28>)
 8000458:	4a08      	ldr	r2, [pc, #32]	; (800047c <SysTick_Init+0x2c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 800045c:	21f0      	movs	r1, #240	; 0xf0
 800045e:	fbb3 f3f2 	udiv	r3, r3, r2
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <SysTick_Init+0x30>)
 8000464:	3b01      	subs	r3, #1
 8000466:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <SysTick_Init+0x34>)
 800046a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800046e:	2300      	movs	r3, #0
 8000470:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8000472:	2307      	movs	r3, #7
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	bd08      	pop	{r3, pc}
 8000478:	20000000 	.word	0x20000000
 800047c:	000f4240 	.word	0x000f4240
 8000480:	e000e010 	.word	0xe000e010
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <SysTick_Handler>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8000488:	b672      	cpsid	i
 * This method needs to be called in the SysTick_Handler
 */

void SysTick_Handler(void) {
	__disable_irq();
	sysTickCounter++;
 800048a:	4a03      	ldr	r2, [pc, #12]	; (8000498 <SysTick_Handler+0x10>)
 800048c:	6813      	ldr	r3, [r2, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	6013      	str	r3, [r2, #0]
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8000492:	b662      	cpsie	i
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000880 	.word	0x20000880

0800049c <delay>:
	while ((micros() - i) < (n));
}


uint32_t millis(void){
	return sysTickCounter/1000;
 800049c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a0:	4906      	ldr	r1, [pc, #24]	; (80004bc <delay+0x20>)
void delay(uint32_t n) {
 80004a2:	b510      	push	{r4, lr}
	return sysTickCounter/1000;
 80004a4:	680c      	ldr	r4, [r1, #0]
 80004a6:	461a      	mov	r2, r3
 80004a8:	fbb4 f4f3 	udiv	r4, r4, r3
 80004ac:	680b      	ldr	r3, [r1, #0]
 80004ae:	fbb3 f3f2 	udiv	r3, r3, r2
	while ((millis() - i) < (n));
 80004b2:	1b1b      	subs	r3, r3, r4
 80004b4:	4283      	cmp	r3, r0
 80004b6:	d3f9      	bcc.n	80004ac <delay+0x10>
}
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	20000880 	.word	0x20000880

080004c0 <udelay>:
}

uint32_t micros(void){
	return sysTickCounter;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <udelay+0x10>)
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	681a      	ldr	r2, [r3, #0]
	while ((micros() - i) < (n));
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	4282      	cmp	r2, r0
 80004ca:	d3fb      	bcc.n	80004c4 <udelay+0x4>
}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000880 	.word	0x20000880

080004d4 <millis>:
	return sysTickCounter/1000;
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <millis+0x10>)
 80004d6:	6818      	ldr	r0, [r3, #0]
}
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000880 	.word	0x20000880

080004e8 <micros>:
	return sysTickCounter;
 80004e8:	4b01      	ldr	r3, [pc, #4]	; (80004f0 <micros+0x8>)
 80004ea:	6818      	ldr	r0, [r3, #0]
}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000880 	.word	0x20000880

080004f4 <RCC_Configuration>:

void RCC_Configuration(void){
 80004f4:	b510      	push	{r4, lr}
//#if 0
	ErrorStatus HSEStartUpStatus;
	RCC_DeInit();
 80004f6:	f000 fe3d 	bl	8001174 <RCC_DeInit>

	/* Enable HSE */
 	RCC_HSEConfig(RCC_HSE_ON);
 80004fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80004fe:	f000 fe59 	bl	80011b4 <RCC_HSEConfig>
 	/* Wait till HSE is ready */
 	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000502:	f000 ffab 	bl	800145c <RCC_WaitForHSEStartUp>
 
 	if(HSEStartUpStatus == SUCCESS){
 8000506:	2801      	cmp	r0, #1
 	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000508:	4604      	mov	r4, r0
 	if(HSEStartUpStatus == SUCCESS){
 800050a:	d00e      	beq.n	800052a <RCC_Configuration+0x36>
 	}
//#endif
  /* PCLK1 = HCLK/4 */
  //RCC_PCLK1Config(RCC_HCLK_Div2);

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
 800050c:	2101      	movs	r1, #1
 800050e:	2007      	movs	r0, #7
 8000510:	f000 ff5a 	bl	80013c8 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000514:	2101      	movs	r1, #1
 8000516:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800051a:	f000 ff49 	bl	80013b0 <RCC_APB2PeriphClockCmd>
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 800051e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 8000522:	2101      	movs	r1, #1
 8000524:	201d      	movs	r0, #29
 8000526:	f000 bf43 	b.w	80013b0 <RCC_APB2PeriphClockCmd>
		 RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fe90 	bl	8001250 <RCC_HCLKConfig>
		 RCC_PCLK2Config(RCC_HCLK_Div1);
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fea1 	bl	8001278 <RCC_PCLK2Config>
		 RCC_PCLK1Config(RCC_HCLK_Div4);
 8000536:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800053a:	f000 fe93 	bl	8001264 <RCC_PCLK1Config>
		 RCC_ADCCLKConfig(RCC_PCLK2_Div4);
 800053e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000542:	f000 feb5 	bl	80012b0 <RCC_ADCCLKConfig>
		 FLASH_SetLatency(FLASH_Latency_2);
 8000546:	2002      	movs	r0, #2
 8000548:	f000 f894 	bl	8000674 <FLASH_SetLatency>
		 FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 800054c:	2010      	movs	r0, #16
 800054e:	f000 f8a7 	bl	80006a0 <FLASH_PrefetchBufferCmd>
		 RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000552:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000556:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800055a:	f000 fe57 	bl	800120c <RCC_PLLConfig>
		 RCC_PLLCmd(ENABLE);
 800055e:	4620      	mov	r0, r4
 8000560:	f000 fe5e 	bl	8001220 <RCC_PLLCmd>
		 while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8000564:	2039      	movs	r0, #57	; 0x39
 8000566:	f000 ff65 	bl	8001434 <RCC_GetFlagStatus>
 800056a:	2800      	cmp	r0, #0
 800056c:	d0fa      	beq.n	8000564 <RCC_Configuration+0x70>
		 RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800056e:	2002      	movs	r0, #2
 8000570:	f000 fe5c 	bl	800122c <RCC_SYSCLKConfig>
		 while(RCC_GetSYSCLKSource() != 0x08);
 8000574:	f000 fe64 	bl	8001240 <RCC_GetSYSCLKSource>
 8000578:	2808      	cmp	r0, #8
 800057a:	d1fb      	bne.n	8000574 <RCC_Configuration+0x80>
 800057c:	e7c6      	b.n	800050c <RCC_Configuration+0x18>
 800057e:	bf00      	nop

08000580 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000580:	2200      	movs	r2, #0
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <EXTI_DeInit+0x14>)
 8000584:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000586:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 8000588:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 800058a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 800058c:	4a02      	ldr	r2, [pc, #8]	; (8000598 <EXTI_DeInit+0x18>)
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40010400 	.word	0x40010400
 8000598:	000fffff 	.word	0x000fffff

0800059c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800059c:	7982      	ldrb	r2, [r0, #6]
{
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	6801      	ldr	r1, [r0, #0]
 80005a2:	7903      	ldrb	r3, [r0, #4]
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80005a4:	b342      	cbz	r2, 80005f8 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80005a6:	43cc      	mvns	r4, r1
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <EXTI_Init+0x70>)
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80005aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80005ae:	6815      	ldr	r5, [r2, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80005b0:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80005b4:	4025      	ands	r5, r4
 80005b6:	6015      	str	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80005b8:	6855      	ldr	r5, [r2, #4]
 80005ba:	402c      	ands	r4, r5
 80005bc:	6054      	str	r4, [r2, #4]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80005be:	681c      	ldr	r4, [r3, #0]
 80005c0:	4321      	orrs	r1, r4
 80005c2:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80005c4:	6803      	ldr	r3, [r0, #0]
 80005c6:	6894      	ldr	r4, [r2, #8]
 80005c8:	43d9      	mvns	r1, r3
 80005ca:	400c      	ands	r4, r1
 80005cc:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80005ce:	68d4      	ldr	r4, [r2, #12]
 80005d0:	4021      	ands	r1, r4
 80005d2:	60d1      	str	r1, [r2, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80005d4:	7941      	ldrb	r1, [r0, #5]
 80005d6:	2910      	cmp	r1, #16
 80005d8:	d106      	bne.n	80005e8 <EXTI_Init+0x4c>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80005da:	6891      	ldr	r1, [r2, #8]
 80005dc:	4319      	orrs	r1, r3
 80005de:	6091      	str	r1, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80005e0:	68d1      	ldr	r1, [r2, #12]
 80005e2:	430b      	orrs	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]
 80005e6:	bd30      	pop	{r4, r5, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80005e8:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80005ec:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80005f0:	6811      	ldr	r1, [r2, #0]
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	bd30      	pop	{r4, r5, pc}
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80005f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005fc:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	ea22 0101 	bic.w	r1, r2, r1
 8000606:	6019      	str	r1, [r3, #0]
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	40010400 	.word	0x40010400

08000610 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000610:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8000612:	220c      	movs	r2, #12
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000614:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000616:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8000618:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800061a:	7183      	strb	r3, [r0, #6]
 800061c:	4770      	bx	lr

0800061e <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800061e:	4a02      	ldr	r2, [pc, #8]	; (8000628 <EXTI_GenerateSWInterrupt+0xa>)
 8000620:	6913      	ldr	r3, [r2, #16]
 8000622:	4318      	orrs	r0, r3
 8000624:	6110      	str	r0, [r2, #16]
 8000626:	4770      	bx	lr
 8000628:	40010400 	.word	0x40010400

0800062c <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <EXTI_GetFlagStatus+0x10>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000632:	bf14      	ite	ne
 8000634:	2001      	movne	r0, #1
 8000636:	2000      	moveq	r0, #0
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400

08000640 <EXTI_ClearFlag>:
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <EXTI_ClearFlag+0x8>)
 8000642:	6158      	str	r0, [r3, #20]
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40010400 	.word	0x40010400

0800064c <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <EXTI_GetITStatus+0x18>)
 800064e:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4003      	ands	r3, r0
 8000654:	d004      	beq.n	8000660 <EXTI_GetITStatus+0x14>
 8000656:	4202      	tst	r2, r0
 8000658:	bf14      	ite	ne
 800065a:	2001      	movne	r0, #1
 800065c:	2000      	moveq	r0, #0
 800065e:	4770      	bx	lr
 8000660:	4618      	mov	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000662:	4770      	bx	lr
 8000664:	40010400 	.word	0x40010400

08000668 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <EXTI_ClearITPendingBit+0x8>)
 800066a:	6158      	str	r0, [r3, #20]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40010400 	.word	0x40010400

08000674 <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <FLASH_SetLatency+0x10>)
 8000676:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8000678:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 800067c:	4318      	orrs	r0, r3
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 800067e:	6010      	str	r0, [r2, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <FLASH_HalfCycleAccessCmd+0x14>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	f022 0208 	bic.w	r2, r2, #8
 8000690:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4310      	orrs	r0, r2
 8000696:	6018      	str	r0, [r3, #0]
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000

080006a0 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <FLASH_PrefetchBufferCmd+0x14>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	f022 0210 	bic.w	r2, r2, #16
 80006a8:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4310      	orrs	r0, r2
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <FLASH_UnlockBank1>:
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <FLASH_UnlockBank1+0x10>)
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <FLASH_UnlockBank1+0x14>)
 80006bc:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80006be:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000
 80006cc:	45670123 	.word	0x45670123

080006d0 <FLASH_Unlock>:
 80006d0:	f7ff bff2 	b.w	80006b8 <FLASH_UnlockBank1>

080006d4 <FLASH_LockBank1>:
  * @retval None
  */
void FLASH_LockBank1(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 80006d4:	4a02      	ldr	r2, [pc, #8]	; (80006e0 <FLASH_LockBank1+0xc>)
 80006d6:	6913      	ldr	r3, [r2, #16]
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6113      	str	r3, [r2, #16]
 80006de:	4770      	bx	lr
 80006e0:	40022000 	.word	0x40022000

080006e4 <FLASH_Lock>:
 80006e4:	f7ff bff6 	b.w	80006d4 <FLASH_LockBank1>

080006e8 <FLASH_GetUserOptionByte>:
  *         and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <FLASH_GetUserOptionByte+0x8>)
 80006ea:	69d8      	ldr	r0, [r3, #28]
}
 80006ec:	0880      	lsrs	r0, r0, #2
 80006ee:	4770      	bx	lr
 80006f0:	40022000 	.word	0x40022000

080006f4 <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Flash write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <FLASH_GetWriteProtectionOptionByte+0x8>)
 80006f6:	6a18      	ldr	r0, [r3, #32]
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40022000 	.word	0x40022000

08000700 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <FLASH_GetReadOutProtectionStatus+0xc>)
 8000702:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8000704:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <FLASH_GetPrefetchBufferStatus+0xc>)
 8000712:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8000714:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8000722:	691a      	ldr	r2, [r3, #16]
  if(NewState != DISABLE)
 8000724:	b111      	cbz	r1, 800072c <FLASH_ITConfig+0xc>
    FLASH->CR |= FLASH_IT;
 8000726:	4310      	orrs	r0, r2
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8000728:	6118      	str	r0, [r3, #16]
 800072a:	4770      	bx	lr
 800072c:	ea22 0000 	bic.w	r0, r2, r0
 8000730:	e7fa      	b.n	8000728 <FLASH_ITConfig+0x8>
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8000738:	2801      	cmp	r0, #1
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <FLASH_GetFlagStatus+0x1c>)
 800073c:	d103      	bne.n	8000746 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 800073e:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8000740:	f000 0001 	and.w	r0, r0, #1
 8000744:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4218      	tst	r0, r3
      bitstatus = RESET;
 800074a:	bf14      	ite	ne
 800074c:	2001      	movne	r0, #1
 800074e:	2000      	moveq	r0, #0
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <FLASH_ClearFlag+0x8>)
 800075a:	60d8      	str	r0, [r3, #12]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <FLASH_GetStatus+0x24>)
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	07d1      	lsls	r1, r2, #31
 800076a:	d409      	bmi.n	8000780 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	0752      	lsls	r2, r2, #29
 8000770:	d408      	bmi.n	8000784 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8000778:	bf14      	ite	ne
 800077a:	2003      	movne	r0, #3
 800077c:	2004      	moveq	r0, #4
 800077e:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 8000780:	2001      	movs	r0, #1
 8000782:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000784:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8000786:	4770      	bx	lr
 8000788:	40022000 	.word	0x40022000

0800078c <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <FLASH_GetBank1Status+0x24>)
 800078e:	68da      	ldr	r2, [r3, #12]
 8000790:	07d1      	lsls	r1, r2, #31
 8000792:	d409      	bmi.n	80007a8 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000794:	68da      	ldr	r2, [r3, #12]
 8000796:	0752      	lsls	r2, r2, #29
 8000798:	d408      	bmi.n	80007ac <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80007a0:	bf14      	ite	ne
 80007a2:	2003      	movne	r0, #3
 80007a4:	2004      	moveq	r0, #4
 80007a6:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 80007a8:	2001      	movs	r0, #1
 80007aa:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 80007ac:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80007ae:	4770      	bx	lr
 80007b0:	40022000 	.word	0x40022000

080007b4 <FLASH_WaitForLastBank1Operation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{ 
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80007b8:	f7ff ffe8 	bl	800078c <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80007bc:	2801      	cmp	r0, #1
 80007be:	d106      	bne.n	80007ce <FLASH_WaitForLastBank1Operation+0x1a>
 80007c0:	b90c      	cbnz	r4, 80007c6 <FLASH_WaitForLastBank1Operation+0x12>
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80007c2:	2005      	movs	r0, #5
 80007c4:	bd10      	pop	{r4, pc}
    status = FLASH_GetBank1Status();
 80007c6:	f7ff ffe1 	bl	800078c <FLASH_GetBank1Status>
    Timeout--;
 80007ca:	3c01      	subs	r4, #1
 80007cc:	e7f6      	b.n	80007bc <FLASH_WaitForLastBank1Operation+0x8>
    status = FLASH_TIMEOUT;
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	bf08      	it	eq
 80007d2:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 80007d4:	bd10      	pop	{r4, pc}

080007d6 <FLASH_EraseAllBank1Pages>:
{
 80007d6:	b510      	push	{r4, lr}
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80007d8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80007dc:	f7ff ffea 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 80007e0:	2804      	cmp	r0, #4
 80007e2:	d112      	bne.n	800080a <FLASH_EraseAllBank1Pages+0x34>
     FLASH->CR |= CR_MER_Set;
 80007e4:	4c09      	ldr	r4, [pc, #36]	; (800080c <FLASH_EraseAllBank1Pages+0x36>)
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80007e6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
     FLASH->CR |= CR_MER_Set;
 80007ea:	6923      	ldr	r3, [r4, #16]
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 80007f2:	6923      	ldr	r3, [r4, #16]
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80007fa:	f7ff ffdb 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    FLASH->CR &= CR_MER_Reset;
 80007fe:	6923      	ldr	r3, [r4, #16]
 8000800:	f023 0304 	bic.w	r3, r3, #4
 8000804:	04db      	lsls	r3, r3, #19
 8000806:	0cdb      	lsrs	r3, r3, #19
 8000808:	6123      	str	r3, [r4, #16]
}
 800080a:	bd10      	pop	{r4, pc}
 800080c:	40022000 	.word	0x40022000

08000810 <FLASH_EraseAllPages>:
 8000810:	f7ff bfe1 	b.w	80007d6 <FLASH_EraseAllBank1Pages>

08000814 <FLASH_UserOptionByteConfig>:
{
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  FLASH->OPTKEYR = FLASH_KEY1;
 8000816:	4c13      	ldr	r4, [pc, #76]	; (8000864 <FLASH_UserOptionByteConfig+0x50>)
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <FLASH_UserOptionByteConfig+0x54>)
{
 800081a:	4607      	mov	r7, r0
  FLASH->OPTKEYR = FLASH_KEY1;
 800081c:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800081e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000822:	60a3      	str	r3, [r4, #8]
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000824:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 8000828:	460e      	mov	r6, r1
 800082a:	4615      	mov	r5, r2
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800082c:	f7ff ffc2 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8000830:	2804      	cmp	r0, #4
 8000832:	d115      	bne.n	8000860 <FLASH_UserOptionByteConfig+0x4c>
    FLASH->CR |= CR_OPTPG_Set; 
 8000834:	6923      	ldr	r3, [r4, #16]
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8000836:	f047 07f8 	orr.w	r7, r7, #248	; 0xf8
    FLASH->CR |= CR_OPTPG_Set; 
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6123      	str	r3, [r4, #16]
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8000840:	433e      	orrs	r6, r7
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <FLASH_UserOptionByteConfig+0x58>)
 8000844:	4335      	orrs	r5, r6
 8000846:	805d      	strh	r5, [r3, #2]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000848:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800084c:	f7ff ffb2 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 8000850:	2805      	cmp	r0, #5
 8000852:	d005      	beq.n	8000860 <FLASH_UserOptionByteConfig+0x4c>
      FLASH->CR &= CR_OPTPG_Reset;
 8000854:	6923      	ldr	r3, [r4, #16]
 8000856:	f023 0310 	bic.w	r3, r3, #16
 800085a:	04db      	lsls	r3, r3, #19
 800085c:	0cdb      	lsrs	r3, r3, #19
 800085e:	6123      	str	r3, [r4, #16]
}
 8000860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000862:	bf00      	nop
 8000864:	40022000 	.word	0x40022000
 8000868:	45670123 	.word	0x45670123
 800086c:	1ffff800 	.word	0x1ffff800

08000870 <FLASH_ReadOutProtection>:
{
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000874:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000878:	f7ff ff9c 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 800087c:	2804      	cmp	r0, #4
 800087e:	d139      	bne.n	80008f4 <FLASH_ReadOutProtection+0x84>
    FLASH->OPTKEYR = FLASH_KEY1;
 8000880:	4c1d      	ldr	r4, [pc, #116]	; (80008f8 <FLASH_ReadOutProtection+0x88>)
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <FLASH_ReadOutProtection+0x8c>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000884:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->OPTKEYR = FLASH_KEY1;
 8000888:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800088a:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800088e:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 8000890:	6923      	ldr	r3, [r4, #16]
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8000898:	6923      	ldr	r3, [r4, #16]
 800089a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089e:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80008a0:	f7ff ff88 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if(status == FLASH_COMPLETE)
 80008a4:	2804      	cmp	r0, #4
 80008a6:	d11d      	bne.n	80008e4 <FLASH_ReadOutProtection+0x74>
      FLASH->CR &= CR_OPTER_Reset;
 80008a8:	6923      	ldr	r3, [r4, #16]
 80008aa:	f023 0320 	bic.w	r3, r3, #32
 80008ae:	04db      	lsls	r3, r3, #19
 80008b0:	0cdb      	lsrs	r3, r3, #19
 80008b2:	6123      	str	r3, [r4, #16]
      FLASH->CR |= CR_OPTPG_Set; 
 80008b4:	6923      	ldr	r3, [r4, #16]
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6123      	str	r3, [r4, #16]
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <FLASH_ReadOutProtection+0x90>)
      if(NewState != DISABLE)
 80008be:	b17d      	cbz	r5, 80008e0 <FLASH_ReadOutProtection+0x70>
        OB->RDP = 0x00;
 80008c0:	2200      	movs	r2, #0
        OB->RDP = RDP_Key;  
 80008c2:	801a      	strh	r2, [r3, #0]
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80008c4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80008c8:	f7ff ff74 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
      if(status != FLASH_TIMEOUT)
 80008cc:	2805      	cmp	r0, #5
 80008ce:	d011      	beq.n	80008f4 <FLASH_ReadOutProtection+0x84>
        FLASH->CR &= CR_OPTPG_Reset;
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <FLASH_ReadOutProtection+0x88>)
 80008d2:	6913      	ldr	r3, [r2, #16]
 80008d4:	f023 0310 	bic.w	r3, r3, #16
 80008d8:	04db      	lsls	r3, r3, #19
 80008da:	0cdb      	lsrs	r3, r3, #19
 80008dc:	6113      	str	r3, [r2, #16]
 80008de:	bd38      	pop	{r3, r4, r5, pc}
        OB->RDP = RDP_Key;  
 80008e0:	22a5      	movs	r2, #165	; 0xa5
 80008e2:	e7ee      	b.n	80008c2 <FLASH_ReadOutProtection+0x52>
      if(status != FLASH_TIMEOUT)
 80008e4:	2805      	cmp	r0, #5
 80008e6:	d005      	beq.n	80008f4 <FLASH_ReadOutProtection+0x84>
        FLASH->CR &= CR_OPTER_Reset;
 80008e8:	6923      	ldr	r3, [r4, #16]
 80008ea:	f023 0320 	bic.w	r3, r3, #32
 80008ee:	04db      	lsls	r3, r3, #19
 80008f0:	0cdb      	lsrs	r3, r3, #19
 80008f2:	6123      	str	r3, [r4, #16]
}
 80008f4:	bd38      	pop	{r3, r4, r5, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000
 80008fc:	45670123 	.word	0x45670123
 8000900:	1ffff800 	.word	0x1ffff800

08000904 <FLASH_EnableWriteProtection>:
{
 8000904:	b510      	push	{r4, lr}
 8000906:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000908:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800090c:	f7ff ff52 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8000910:	2804      	cmp	r0, #4
 8000912:	d12b      	bne.n	800096c <FLASH_EnableWriteProtection+0x68>
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 8000914:	43e4      	mvns	r4, r4
    FLASH->OPTKEYR = FLASH_KEY1;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <FLASH_EnableWriteProtection+0xa0>)
 8000918:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <FLASH_EnableWriteProtection+0xa4>)
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 800091a:	b2e1      	uxtb	r1, r4
    FLASH->OPTKEYR = FLASH_KEY1;
 800091c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800091e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000922:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8000924:	691a      	ldr	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8000926:	29ff      	cmp	r1, #255	; 0xff
    FLASH->CR |= CR_OPTPG_Set;
 8000928:	f042 0210 	orr.w	r2, r2, #16
 800092c:	611a      	str	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 800092e:	d113      	bne.n	8000958 <FLASH_EnableWriteProtection+0x54>
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 8000930:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d11a      	bne.n	800096e <FLASH_EnableWriteProtection+0x6a>
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 8000938:	f3c4 4307 	ubfx	r3, r4, #16, #8
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800093c:	2bff      	cmp	r3, #255	; 0xff
 800093e:	d11f      	bne.n	8000980 <FLASH_EnableWriteProtection+0x7c>
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8000940:	0e24      	lsrs	r4, r4, #24
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8000942:	2cff      	cmp	r4, #255	; 0xff
 8000944:	d125      	bne.n	8000992 <FLASH_EnableWriteProtection+0x8e>
 8000946:	2004      	movs	r0, #4
      FLASH->CR &= CR_OPTPG_Reset;
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <FLASH_EnableWriteProtection+0xa0>)
 800094a:	6913      	ldr	r3, [r2, #16]
 800094c:	f023 0310 	bic.w	r3, r3, #16
 8000950:	04db      	lsls	r3, r3, #19
 8000952:	0cdb      	lsrs	r3, r3, #19
 8000954:	6113      	str	r3, [r2, #16]
 8000956:	e009      	b.n	800096c <FLASH_EnableWriteProtection+0x68>
      OB->WRP0 = WRP0_Data;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <FLASH_EnableWriteProtection+0xa8>)
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800095a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      OB->WRP0 = WRP0_Data;
 800095e:	8119      	strh	r1, [r3, #8]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000960:	f7ff ff28 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8000964:	2804      	cmp	r0, #4
 8000966:	d0e3      	beq.n	8000930 <FLASH_EnableWriteProtection+0x2c>
    if(status != FLASH_TIMEOUT)
 8000968:	2805      	cmp	r0, #5
 800096a:	d1ed      	bne.n	8000948 <FLASH_EnableWriteProtection+0x44>
}
 800096c:	bd10      	pop	{r4, pc}
      OB->WRP1 = WRP1_Data;
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <FLASH_EnableWriteProtection+0xa8>)
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000970:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      OB->WRP1 = WRP1_Data;
 8000974:	8153      	strh	r3, [r2, #10]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000976:	f7ff ff1d 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800097a:	2804      	cmp	r0, #4
 800097c:	d0dc      	beq.n	8000938 <FLASH_EnableWriteProtection+0x34>
 800097e:	e7f3      	b.n	8000968 <FLASH_EnableWriteProtection+0x64>
      OB->WRP2 = WRP2_Data;
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <FLASH_EnableWriteProtection+0xa8>)
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000982:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      OB->WRP2 = WRP2_Data;
 8000986:	8193      	strh	r3, [r2, #12]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000988:	f7ff ff14 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 800098c:	2804      	cmp	r0, #4
 800098e:	d0d7      	beq.n	8000940 <FLASH_EnableWriteProtection+0x3c>
 8000990:	e7ea      	b.n	8000968 <FLASH_EnableWriteProtection+0x64>
      OB->WRP3 = WRP3_Data;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <FLASH_EnableWriteProtection+0xa8>)
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8000994:	b2a4      	uxth	r4, r4
      OB->WRP3 = WRP3_Data;
 8000996:	81dc      	strh	r4, [r3, #14]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800099c:	f7ff ff0a 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
 80009a0:	e7e2      	b.n	8000968 <FLASH_EnableWriteProtection+0x64>
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000
 80009a8:	45670123 	.word	0x45670123
 80009ac:	1ffff800 	.word	0x1ffff800

080009b0 <FLASH_ProgramOptionByteData>:
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	4606      	mov	r6, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80009b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 80009b8:	460d      	mov	r5, r1
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80009ba:	f7ff fefb 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 80009be:	2804      	cmp	r0, #4
 80009c0:	d117      	bne.n	80009f2 <FLASH_ProgramOptionByteData+0x42>
    FLASH->OPTKEYR = FLASH_KEY1;
 80009c2:	4c0c      	ldr	r4, [pc, #48]	; (80009f4 <FLASH_ProgramOptionByteData+0x44>)
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <FLASH_ProgramOptionByteData+0x48>)
    *(__IO uint16_t*)Address = Data;
 80009c6:	b2ad      	uxth	r5, r5
    FLASH->OPTKEYR = FLASH_KEY1;
 80009c8:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80009ca:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80009ce:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTPG_Set; 
 80009d0:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80009d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_OPTPG_Set; 
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 80009dc:	8035      	strh	r5, [r6, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80009de:	f7ff fee9 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 80009e2:	2805      	cmp	r0, #5
 80009e4:	d005      	beq.n	80009f2 <FLASH_ProgramOptionByteData+0x42>
      FLASH->CR &= CR_OPTPG_Reset;
 80009e6:	6923      	ldr	r3, [r4, #16]
 80009e8:	f023 0310 	bic.w	r3, r3, #16
 80009ec:	04db      	lsls	r3, r3, #19
 80009ee:	0cdb      	lsrs	r3, r3, #19
 80009f0:	6123      	str	r3, [r4, #16]
}
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	40022000 	.word	0x40022000
 80009f8:	45670123 	.word	0x45670123

080009fc <FLASH_ProgramHalfWord>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 8000a04:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a06:	f7ff fed5 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8000a0a:	2804      	cmp	r0, #4
 8000a0c:	d10f      	bne.n	8000a2e <FLASH_ProgramHalfWord+0x32>
    FLASH->CR |= CR_PG_Set;
 8000a0e:	4c08      	ldr	r4, [pc, #32]	; (8000a30 <FLASH_ProgramHalfWord+0x34>)
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_PG_Set;
 8000a14:	6923      	ldr	r3, [r4, #16]
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8000a1c:	802e      	strh	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a1e:	f7ff fec9 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    FLASH->CR &= CR_PG_Reset;
 8000a22:	6923      	ldr	r3, [r4, #16]
 8000a24:	f023 0301 	bic.w	r3, r3, #1
 8000a28:	04db      	lsls	r3, r3, #19
 8000a2a:	0cdb      	lsrs	r3, r3, #19
 8000a2c:	6123      	str	r3, [r4, #16]
}
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	40022000 	.word	0x40022000

08000a34 <FLASH_ProgramWord>:
  __IO uint32_t tmp = 0;
 8000a34:	2300      	movs	r3, #0
{
 8000a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a38:	4606      	mov	r6, r0
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
 8000a3e:	460d      	mov	r5, r1
  __IO uint32_t tmp = 0;
 8000a40:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a42:	f7ff feb7 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8000a46:	2804      	cmp	r0, #4
 8000a48:	d11b      	bne.n	8000a82 <FLASH_ProgramWord+0x4e>
    FLASH->CR |= CR_PG_Set;
 8000a4a:	4c0f      	ldr	r4, [pc, #60]	; (8000a88 <FLASH_ProgramWord+0x54>)
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_PG_Set;
 8000a50:	6923      	ldr	r3, [r4, #16]
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8000a58:	b2ab      	uxth	r3, r5
 8000a5a:	8033      	strh	r3, [r6, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a5c:	f7ff feaa 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if(status == FLASH_COMPLETE)
 8000a60:	2804      	cmp	r0, #4
 8000a62:	d108      	bne.n	8000a76 <FLASH_ProgramWord+0x42>
      tmp = Address + 2;
 8000a64:	3602      	adds	r6, #2
 8000a66:	9601      	str	r6, [sp, #4]
      *(__IO uint16_t*) tmp = Data >> 16;
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	0c2d      	lsrs	r5, r5, #16
 8000a6c:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000a6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a72:	f7ff fe9f 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
      FLASH->CR &= CR_PG_Reset;
 8000a76:	6923      	ldr	r3, [r4, #16]
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	04db      	lsls	r3, r3, #19
 8000a7e:	0cdb      	lsrs	r3, r3, #19
 8000a80:	6123      	str	r3, [r4, #16]
}
 8000a82:	b002      	add	sp, #8
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <FLASH_EraseOptionBytes>:
{
 8000a8c:	b538      	push	{r3, r4, r5, lr}
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 8000a8e:	f7ff fe37 	bl	8000700 <FLASH_GetReadOutProtectionStatus>
    rdptmp = 0x00;  
 8000a92:	2800      	cmp	r0, #0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000a94:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    rdptmp = 0x00;  
 8000a98:	bf0c      	ite	eq
 8000a9a:	25a5      	moveq	r5, #165	; 0xa5
 8000a9c:	2500      	movne	r5, #0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000a9e:	f7ff fe89 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8000aa2:	2804      	cmp	r0, #4
 8000aa4:	d12b      	bne.n	8000afe <FLASH_EraseOptionBytes+0x72>
    FLASH->OPTKEYR = FLASH_KEY1;
 8000aa6:	4c16      	ldr	r4, [pc, #88]	; (8000b00 <FLASH_EraseOptionBytes+0x74>)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <FLASH_EraseOptionBytes+0x78>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000aaa:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->OPTKEYR = FLASH_KEY1;
 8000aae:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8000ab0:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000ab4:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 8000ab6:	6923      	ldr	r3, [r4, #16]
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8000abe:	6923      	ldr	r3, [r4, #16]
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000ac6:	f7ff fe75 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    if(status == FLASH_COMPLETE)
 8000aca:	2804      	cmp	r0, #4
 8000acc:	d10f      	bne.n	8000aee <FLASH_EraseOptionBytes+0x62>
      FLASH->CR &= CR_OPTER_Reset;
 8000ace:	6923      	ldr	r3, [r4, #16]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      FLASH->CR &= CR_OPTER_Reset;
 8000ad4:	f023 0320 	bic.w	r3, r3, #32
 8000ad8:	04db      	lsls	r3, r3, #19
 8000ada:	0cdb      	lsrs	r3, r3, #19
 8000adc:	6123      	str	r3, [r4, #16]
      FLASH->CR |= CR_OPTPG_Set;
 8000ade:	6923      	ldr	r3, [r4, #16]
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6123      	str	r3, [r4, #16]
      OB->RDP = (uint16_t)rdptmp; 
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <FLASH_EraseOptionBytes+0x7c>)
 8000ae8:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000aea:	f7ff fe63 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
      if (status != FLASH_TIMEOUT)
 8000aee:	2805      	cmp	r0, #5
 8000af0:	d005      	beq.n	8000afe <FLASH_EraseOptionBytes+0x72>
        FLASH->CR &= CR_OPTPG_Reset;
 8000af2:	6923      	ldr	r3, [r4, #16]
 8000af4:	f023 0310 	bic.w	r3, r3, #16
 8000af8:	04db      	lsls	r3, r3, #19
 8000afa:	0cdb      	lsrs	r3, r3, #19
 8000afc:	6123      	str	r3, [r4, #16]
}
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
 8000b00:	40022000 	.word	0x40022000
 8000b04:	45670123 	.word	0x45670123
 8000b08:	1ffff800 	.word	0x1ffff800

08000b0c <FLASH_ErasePage>:
{
 8000b0c:	b538      	push	{r3, r4, r5, lr}
 8000b0e:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000b10:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000b14:	f7ff fe4e 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8000b18:	2804      	cmp	r0, #4
 8000b1a:	d113      	bne.n	8000b44 <FLASH_ErasePage+0x38>
    FLASH->CR|= CR_PER_Set;
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <FLASH_ErasePage+0x3c>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000b1e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->CR|= CR_PER_Set;
 8000b22:	6923      	ldr	r3, [r4, #16]
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8000b2a:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8000b2c:	6923      	ldr	r3, [r4, #16]
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b32:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000b34:	f7ff fe3e 	bl	80007b4 <FLASH_WaitForLastBank1Operation>
    FLASH->CR &= CR_PER_Reset;
 8000b38:	6923      	ldr	r3, [r4, #16]
 8000b3a:	f023 0302 	bic.w	r3, r3, #2
 8000b3e:	04db      	lsls	r3, r3, #19
 8000b40:	0cdb      	lsrs	r3, r3, #19
 8000b42:	6123      	str	r3, [r4, #16]
}
 8000b44:	bd38      	pop	{r3, r4, r5, pc}
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000

08000b4c <FLASH_WaitForLastOperation>:
 8000b4c:	f7ff be32 	b.w	80007b4 <FLASH_WaitForLastBank1Operation>

08000b50 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000b50:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <GPIO_DeInit+0x9c>)
 8000b54:	4298      	cmp	r0, r3
 8000b56:	d109      	bne.n	8000b6c <GPIO_DeInit+0x1c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	2004      	movs	r0, #4
 8000b5c:	f000 fc40 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000b60:	2100      	movs	r1, #0
 8000b62:	2004      	movs	r0, #4
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000b68:	f000 bc3a 	b.w	80013e0 <RCC_APB2PeriphResetCmd>
  else if (GPIOx == GPIOB)
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <GPIO_DeInit+0xa0>)
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d106      	bne.n	8000b80 <GPIO_DeInit+0x30>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000b72:	2101      	movs	r1, #1
 8000b74:	2008      	movs	r0, #8
 8000b76:	f000 fc33 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2008      	movs	r0, #8
 8000b7e:	e7f1      	b.n	8000b64 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOC)
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <GPIO_DeInit+0xa4>)
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d106      	bne.n	8000b94 <GPIO_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000b86:	2101      	movs	r1, #1
 8000b88:	2010      	movs	r0, #16
 8000b8a:	f000 fc29 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2010      	movs	r0, #16
 8000b92:	e7e7      	b.n	8000b64 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOD)
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <GPIO_DeInit+0xa8>)
 8000b96:	4298      	cmp	r0, r3
 8000b98:	d106      	bne.n	8000ba8 <GPIO_DeInit+0x58>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	f000 fc1f 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	e7dd      	b.n	8000b64 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOE)
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <GPIO_DeInit+0xac>)
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d106      	bne.n	8000bbc <GPIO_DeInit+0x6c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2040      	movs	r0, #64	; 0x40
 8000bb2:	f000 fc15 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2040      	movs	r0, #64	; 0x40
 8000bba:	e7d3      	b.n	8000b64 <GPIO_DeInit+0x14>
  else if (GPIOx == GPIOF)
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <GPIO_DeInit+0xb0>)
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d106      	bne.n	8000bd0 <GPIO_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	f000 fc0b 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	e7c9      	b.n	8000b64 <GPIO_DeInit+0x14>
    if (GPIOx == GPIOG)
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <GPIO_DeInit+0xb4>)
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d108      	bne.n	8000be8 <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bdc:	f000 fc00 	bl	80013e0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000be0:	2100      	movs	r1, #0
 8000be2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000be6:	e7bd      	b.n	8000b64 <GPIO_DeInit+0x14>
 8000be8:	bd08      	pop	{r3, pc}
 8000bea:	bf00      	nop
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40011400 	.word	0x40011400
 8000bfc:	40011800 	.word	0x40011800
 8000c00:	40011c00 	.word	0x40011c00
 8000c04:	40012000 	.word	0x40012000

08000c08 <GPIO_AFIODeInit>:
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000c08:	2101      	movs	r1, #1
{
 8000c0a:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	f000 fbe7 	bl	80013e0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8000c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 bbe1 	b.w	80013e0 <RCC_APB2PeriphResetCmd>

08000c1e <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000c1e:	78cb      	ldrb	r3, [r1, #3]
{
 8000c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000c24:	06da      	lsls	r2, r3, #27
 8000c26:	bf48      	it	mi
 8000c28:	788a      	ldrbmi	r2, [r1, #2]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000c2a:	880e      	ldrh	r6, [r1, #0]
 8000c2c:	f003 050f 	and.w	r5, r3, #15
 8000c30:	bf48      	it	mi
 8000c32:	4315      	orrmi	r5, r2
 8000c34:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000c38:	d01a      	beq.n	8000c70 <GPIO_Init+0x52>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c3a:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000c3c:	f04f 0e01 	mov.w	lr, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000c40:	f04f 0c0f 	mov.w	ip, #15
    tmpreg = GPIOx->CRL;
 8000c44:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 8000c46:	fa0e f701 	lsl.w	r7, lr, r1
      if (currentpin == pos)
 8000c4a:	ea37 0406 	bics.w	r4, r7, r6
 8000c4e:	d10b      	bne.n	8000c68 <GPIO_Init+0x4a>
        pos = pinpos << 2;
 8000c50:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8000c52:	fa0c f804 	lsl.w	r8, ip, r4
        tmpreg &= ~pinmask;
 8000c56:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000c5a:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c5e:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8000c60:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c64:	d125      	bne.n	8000cb2 <GPIO_Init+0x94>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000c66:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c68:	3101      	adds	r1, #1
 8000c6a:	2908      	cmp	r1, #8
 8000c6c:	d1eb      	bne.n	8000c46 <GPIO_Init+0x28>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000c6e:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000c70:	2eff      	cmp	r6, #255	; 0xff
 8000c72:	d91c      	bls.n	8000cae <GPIO_Init+0x90>
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c74:	2100      	movs	r1, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c76:	f04f 0e01 	mov.w	lr, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000c7a:	f04f 0c0f 	mov.w	ip, #15
    tmpreg = GPIOx->CRH;
 8000c7e:	6842      	ldr	r2, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c80:	f101 0408 	add.w	r4, r1, #8
 8000c84:	fa0e f404 	lsl.w	r4, lr, r4
      if (currentpin == pos)
 8000c88:	ea34 0706 	bics.w	r7, r4, r6
 8000c8c:	d10b      	bne.n	8000ca6 <GPIO_Init+0x88>
        pos = pinpos << 2;
 8000c8e:	008f      	lsls	r7, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8000c90:	fa0c f807 	lsl.w	r8, ip, r7
        tmpreg &= ~pinmask;
 8000c94:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000c98:	fa05 f707 	lsl.w	r7, r5, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c9c:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8000c9e:	ea42 0207 	orr.w	r2, r2, r7
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ca2:	d10a      	bne.n	8000cba <GPIO_Init+0x9c>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ca4:	6144      	str	r4, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ca6:	3101      	adds	r1, #1
 8000ca8:	2908      	cmp	r1, #8
 8000caa:	d1e9      	bne.n	8000c80 <GPIO_Init+0x62>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000cac:	6042      	str	r2, [r0, #4]
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000cb2:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000cb4:	bf08      	it	eq
 8000cb6:	6107      	streq	r7, [r0, #16]
 8000cb8:	e7d6      	b.n	8000c68 <GPIO_Init+0x4a>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000cba:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000cbc:	bf08      	it	eq
 8000cbe:	6104      	streq	r4, [r0, #16]
 8000cc0:	e7f1      	b.n	8000ca6 <GPIO_Init+0x88>

08000cc2 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc6:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	70c3      	strb	r3, [r0, #3]
 8000cd0:	4770      	bx	lr

08000cd2 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000cd2:	6883      	ldr	r3, [r0, #8]
 8000cd4:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000cd6:	bf14      	ite	ne
 8000cd8:	2001      	movne	r0, #1
 8000cda:	2000      	moveq	r0, #0
 8000cdc:	4770      	bx	lr

08000cde <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000cde:	6880      	ldr	r0, [r0, #8]
}
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	4770      	bx	lr

08000ce4 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000ce4:	68c3      	ldr	r3, [r0, #12]
 8000ce6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000ce8:	bf14      	ite	ne
 8000cea:	2001      	movne	r0, #1
 8000cec:	2000      	moveq	r0, #0
 8000cee:	4770      	bx	lr

08000cf0 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000cf0:	68c0      	ldr	r0, [r0, #12]
}
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	4770      	bx	lr

08000cf6 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000cf6:	6101      	str	r1, [r0, #16]
 8000cf8:	4770      	bx	lr

08000cfa <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000cfa:	6141      	str	r1, [r0, #20]
 8000cfc:	4770      	bx	lr

08000cfe <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000cfe:	b10a      	cbz	r2, 8000d04 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d00:	6101      	str	r1, [r0, #16]
 8000d02:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8000d04:	6141      	str	r1, [r0, #20]
 8000d06:	4770      	bx	lr

08000d08 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000d08:	60c1      	str	r1, [r0, #12]
 8000d0a:	4770      	bx	lr

08000d0c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000d0c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d10:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000d12:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d14:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d16:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d18:	6983      	ldr	r3, [r0, #24]
 8000d1a:	4770      	bx	lr

08000d1c <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000d1c:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <GPIO_EventOutputConfig+0x18>)
 8000d1e:	6813      	ldr	r3, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8000d20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	4319      	orrs	r1, r3
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8000d2a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 8000d2e:	6011      	str	r1, [r2, #0]
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000

08000d38 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <GPIO_EventOutputCmd+0x8>)
 8000d3a:	6018      	str	r0, [r3, #0]
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	4220001c 	.word	0x4220001c

08000d44 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000d44:	2800      	cmp	r0, #0
 8000d46:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <GPIO_PinRemapConfig+0x5c>)
{
 8000d48:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000d4a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8000d4e:	bfb4      	ite	lt
 8000d50:	69d3      	ldrlt	r3, [r2, #28]
    tmpreg = AFIO->MAPR;
 8000d52:	6853      	ldrge	r3, [r2, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000d54:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  tmp = GPIO_Remap & LSB_MASK;
 8000d58:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000d5a:	d110      	bne.n	8000d7e <GPIO_PinRemapConfig+0x3a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000d5c:	6855      	ldr	r5, [r2, #4]
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000d5e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000d62:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8000d66:	6055      	str	r5, [r2, #4]
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8000d68:	b119      	cbz	r1, 8000d72 <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000d6a:	0d42      	lsrs	r2, r0, #21
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	4094      	lsls	r4, r2
 8000d70:	4323      	orrs	r3, r4
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <GPIO_PinRemapConfig+0x5c>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000d74:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 8000d76:	bfb4      	ite	lt
 8000d78:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000d7a:	6053      	strge	r3, [r2, #4]
 8000d7c:	bd30      	pop	{r4, r5, pc}
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000d7e:	02c2      	lsls	r2, r0, #11
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000d80:	bf4d      	iteet	mi
 8000d82:	2203      	movmi	r2, #3
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000d84:	0d42      	lsrpl	r2, r0, #21
 8000d86:	0112      	lslpl	r2, r2, #4
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000d88:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000d8c:	bf4c      	ite	mi
 8000d8e:	40aa      	lslmi	r2, r5
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000d90:	fa04 f202 	lslpl.w	r2, r4, r2
 8000d94:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000d98:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000d9c:	e7e4      	b.n	8000d68 <GPIO_PinRemapConfig+0x24>
 8000d9e:	bf00      	nop
 8000da0:	40010000 	.word	0x40010000

08000da4 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000da4:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000da6:	240f      	movs	r4, #15
 8000da8:	f001 0303 	and.w	r3, r1, #3
 8000dac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8000db0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000db4:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000db8:	688a      	ldr	r2, [r1, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	409c      	lsls	r4, r3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000dbe:	ea22 0204 	bic.w	r2, r2, r4
 8000dc2:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000dc4:	688a      	ldr	r2, [r1, #8]
 8000dc6:	4098      	lsls	r0, r3
 8000dc8:	4310      	orrs	r0, r2
 8000dca:	6088      	str	r0, [r1, #8]
 8000dcc:	bd10      	pop	{r4, pc}

08000dce <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000dce:	4b01      	ldr	r3, [pc, #4]	; (8000dd4 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 8000dd0:	6018      	str	r0, [r3, #0]
 8000dd2:	4770      	bx	lr
 8000dd4:	422000dc 	.word	0x422000dc

08000dd8 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000dd8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <I2C_DeInit+0x30>)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000ddc:	2101      	movs	r1, #1
  if (I2Cx == I2C1)
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d10a      	bne.n	8000df8 <I2C_DeInit+0x20>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000de2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000de6:	f000 fb07 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8000dea:	2100      	movs	r1, #0
 8000dec:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8000df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000df4:	f000 bb00 	b.w	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000df8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dfc:	f000 fafc 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000e00:	2100      	movs	r1, #0
 8000e02:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e06:	e7f3      	b.n	8000df0 <I2C_DeInit+0x18>
 8000e08:	40005400 	.word	0x40005400

08000e0c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000e12:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000e14:	a801      	add	r0, sp, #4
{
 8000e16:	460d      	mov	r5, r1
  RCC_GetClocksFreq(&rcc_clocks);
 8000e18:	f000 fa78 	bl	800130c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e1c:	9a03      	ldr	r2, [sp, #12]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e1e:	492e      	ldr	r1, [pc, #184]	; (8000ed8 <I2C_Init+0xcc>)
  tmpreg &= CR2_FREQ_Reset;
 8000e20:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e24:	fbb2 f1f1 	udiv	r1, r2, r1
  tmpreg &= CR2_FREQ_Reset;
 8000e28:	0436      	lsls	r6, r6, #16
 8000e2a:	0c36      	lsrs	r6, r6, #16
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e2c:	b288      	uxth	r0, r1
  tmpreg |= freqrange;
 8000e2e:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000e30:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8000e32:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e34:	4e29      	ldr	r6, [pc, #164]	; (8000edc <I2C_Init+0xd0>)
  I2Cx->CR1 &= CR1_PE_Reset;
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	0c1b      	lsrs	r3, r3, #16
 8000e3e:	8023      	strh	r3, [r4, #0]
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	42b3      	cmp	r3, r6
 8000e44:	d823      	bhi.n	8000e8e <I2C_Init+0x82>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf38      	it	cc
 8000e52:	2304      	movcc	r3, #4
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e54:	3001      	adds	r0, #1
 8000e56:	b280      	uxth	r0, r0
 8000e58:	8420      	strh	r0, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000e5a:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8000e5c:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000e5e:	88aa      	ldrh	r2, [r5, #4]
  I2Cx->CR1 |= CR1_PE_Set;
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	8023      	strh	r3, [r4, #0]
  tmpreg = I2Cx->CR1;
 8000e68:	8823      	ldrh	r3, [r4, #0]
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000e6a:	8969      	ldrh	r1, [r5, #10]
  tmpreg &= CR1_CLEAR_Mask;
 8000e6c:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000e70:	f023 0302 	bic.w	r3, r3, #2
 8000e74:	041b      	lsls	r3, r3, #16
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000e76:	430a      	orrs	r2, r1
  tmpreg &= CR1_CLEAR_Mask;
 8000e78:	0c1b      	lsrs	r3, r3, #16
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000e7e:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000e80:	892a      	ldrh	r2, [r5, #8]
 8000e82:	89ab      	ldrh	r3, [r5, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	8123      	strh	r3, [r4, #8]
}
 8000e8a:	b006      	add	sp, #24
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000e8e:	f64b 70ff 	movw	r0, #49151	; 0xbfff
 8000e92:	88ee      	ldrh	r6, [r5, #6]
 8000e94:	4286      	cmp	r6, r0
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000e96:	bf1b      	ittet	ne
 8000e98:	2019      	movne	r0, #25
 8000e9a:	4343      	mulne	r3, r0
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000e9c:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000ea0:	fbb2 f3f3 	udivne	r3, r2, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000ea4:	bf0b      	itete	eq
 8000ea6:	fbb2 f3f3 	udiveq	r3, r2, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000eaa:	b29b      	uxthne	r3, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000eac:	b29b      	uxtheq	r3, r3
      result |= I2C_DutyCycle_16_9;
 8000eae:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
    if ((result & CCR_CCR_Set) == 0)
 8000eb2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000eb6:	b90a      	cbnz	r2, 8000ebc <I2C_Init+0xb0>
      result |= (uint16_t)0x0001;  
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000ebc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ec0:	434a      	muls	r2, r1
 8000ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec6:	fb92 f2f1 	sdiv	r2, r2, r1
 8000eca:	3201      	adds	r2, #1
 8000ecc:	b292      	uxth	r2, r2
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8000ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000ed2:	8422      	strh	r2, [r4, #32]
 8000ed4:	e7c1      	b.n	8000e5a <I2C_Init+0x4e>
 8000ed6:	bf00      	nop
 8000ed8:	000f4240 	.word	0x000f4240
 8000edc:	000186a0 	.word	0x000186a0

08000ee0 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8000ee0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ee4:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000ee6:	2300      	movs	r3, #0
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8000ee8:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000eec:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8000eee:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8000ef0:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000ef2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8000ef6:	80c2      	strh	r2, [r0, #6]
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000ef8:	8183      	strh	r3, [r0, #12]
 8000efa:	4770      	bx	lr

08000efc <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8000efc:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000efe:	b121      	cbz	r1, 8000f0a <I2C_Cmd+0xe>
    I2Cx->CR1 |= CR1_PE_Set;
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8000f06:	8003      	strh	r3, [r0, #0]
 8000f08:	4770      	bx	lr
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	e7f8      	b.n	8000f06 <I2C_Cmd+0xa>

08000f14 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8000f14:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8000f16:	b121      	cbz	r1, 8000f22 <I2C_DMACmd+0xe>
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8000f1e:	8083      	strh	r3, [r0, #4]
 8000f20:	4770      	bx	lr
 8000f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	e7f8      	b.n	8000f1e <I2C_DMACmd+0xa>

08000f2c <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 8000f2c:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8000f2e:	b121      	cbz	r1, 8000f3a <I2C_DMALastTransferCmd+0xe>
    I2Cx->CR2 |= CR2_LAST_Set;
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
 8000f36:	8083      	strh	r3, [r0, #4]
 8000f38:	4770      	bx	lr
 8000f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	0c1b      	lsrs	r3, r3, #16
 8000f42:	e7f8      	b.n	8000f36 <I2C_DMALastTransferCmd+0xa>

08000f44 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8000f44:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000f46:	b121      	cbz	r1, 8000f52 <I2C_GenerateSTART+0xe>
    I2Cx->CR1 |= CR1_START_Set;
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 8000f4e:	8003      	strh	r3, [r0, #0]
 8000f50:	4770      	bx	lr
 8000f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f56:	041b      	lsls	r3, r3, #16
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	e7f8      	b.n	8000f4e <I2C_GenerateSTART+0xa>

08000f5c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000f5c:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000f5e:	b121      	cbz	r1, 8000f6a <I2C_GenerateSTOP+0xe>
    I2Cx->CR1 |= CR1_STOP_Set;
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000f66:	8003      	strh	r3, [r0, #0]
 8000f68:	4770      	bx	lr
 8000f6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	0c1b      	lsrs	r3, r3, #16
 8000f72:	e7f8      	b.n	8000f66 <I2C_GenerateSTOP+0xa>

08000f74 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000f74:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000f76:	b121      	cbz	r1, 8000f82 <I2C_AcknowledgeConfig+0xe>
    I2Cx->CR1 |= CR1_ACK_Set;
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000f7e:	8003      	strh	r3, [r0, #0]
 8000f80:	4770      	bx	lr
 8000f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f86:	041b      	lsls	r3, r3, #16
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	e7f8      	b.n	8000f7e <I2C_AcknowledgeConfig+0xa>

08000f8c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000f8c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000f8e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  tmpreg = I2Cx->OAR2;
 8000f92:	b29b      	uxth	r3, r3
  tmpreg &= OAR2_ADD2_Reset;
 8000f94:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000f98:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8000f9a:	8183      	strh	r3, [r0, #12]
 8000f9c:	4770      	bx	lr

08000f9e <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 8000f9e:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8000fa0:	b121      	cbz	r1, 8000fac <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
 8000fa8:	8183      	strh	r3, [r0, #12]
 8000faa:	4770      	bx	lr
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	e7f8      	b.n	8000fa8 <I2C_DualAddressCmd+0xa>

08000fb6 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 8000fb6:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8000fb8:	b121      	cbz	r1, 8000fc4 <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= CR1_ENGC_Set;
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= CR1_ENGC_Reset;
 8000fc0:	8003      	strh	r3, [r0, #0]
 8000fc2:	4770      	bx	lr
 8000fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	e7f8      	b.n	8000fc0 <I2C_GeneralCallCmd+0xa>

08000fce <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8000fce:	8883      	ldrh	r3, [r0, #4]
 8000fd0:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8000fd2:	b112      	cbz	r2, 8000fda <I2C_ITConfig+0xc>
    I2Cx->CR2 |= I2C_IT;
 8000fd4:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8000fd6:	8081      	strh	r1, [r0, #4]
 8000fd8:	4770      	bx	lr
 8000fda:	ea23 0101 	bic.w	r1, r3, r1
 8000fde:	e7fa      	b.n	8000fd6 <I2C_ITConfig+0x8>

08000fe0 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000fe0:	8201      	strh	r1, [r0, #16]
 8000fe2:	4770      	bx	lr

08000fe4 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000fe4:	8a00      	ldrh	r0, [r0, #16]
}
 8000fe6:	b2c0      	uxtb	r0, r0
 8000fe8:	4770      	bx	lr

08000fea <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000fea:	b122      	cbz	r2, 8000ff6 <I2C_Send7bitAddress+0xc>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8000fec:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000ff0:	b289      	uxth	r1, r1
 8000ff2:	8201      	strh	r1, [r0, #16]
 8000ff4:	4770      	bx	lr
    Address &= OAR1_ADD0_Reset;
 8000ff6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000ffa:	e7f9      	b.n	8000ff0 <I2C_Send7bitAddress+0x6>

08000ffc <I2C_ReadRegister>:
  *     @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 8000ffc:	2300      	movs	r3, #0
{
 8000ffe:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001000:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001002:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	4419      	add	r1, r3
 8001008:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	8818      	ldrh	r0, [r3, #0]
}
 800100e:	b280      	uxth	r0, r0
 8001010:	b002      	add	sp, #8
 8001012:	4770      	bx	lr

08001014 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 8001014:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001016:	b131      	cbz	r1, 8001026 <I2C_SoftwareResetCmd+0x12>
    I2Cx->CR1 |= CR1_SWRST_Set;
 8001018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800101c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001020:	b29b      	uxth	r3, r3
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= CR1_SWRST_Reset;
 8001022:	8003      	strh	r3, [r0, #0]
 8001024:	4770      	bx	lr
 8001026:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102a:	e7fa      	b.n	8001022 <I2C_SoftwareResetCmd+0xe>

0800102c <I2C_SMBusAlertConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800102c:	8803      	ldrh	r3, [r0, #0]
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800102e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001032:	bf15      	itete	ne
 8001034:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001038:	b29b      	uxtheq	r3, r3
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800103a:	041b      	lslne	r3, r3, #16
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800103c:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001040:	bf18      	it	ne
 8001042:	0c1b      	lsrne	r3, r3, #16
 8001044:	8003      	strh	r3, [r0, #0]
 8001046:	4770      	bx	lr

08001048 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 8001048:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 800104a:	b121      	cbz	r1, 8001056 <I2C_TransmitPEC+0xe>
    I2Cx->CR1 |= CR1_PEC_Set;
 800104c:	b29b      	uxth	r3, r3
 800104e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= CR1_PEC_Reset;
 8001052:	8003      	strh	r3, [r0, #0]
 8001054:	4770      	bx	lr
 8001056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	e7f8      	b.n	8001052 <I2C_TransmitPEC+0xa>

08001060 <I2C_PECPositionConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001060:	8803      	ldrh	r3, [r0, #0]
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001062:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001066:	bf15      	itete	ne
 8001068:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800106c:	b29b      	uxtheq	r3, r3
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800106e:	041b      	lslne	r3, r3, #16
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001070:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001074:	bf18      	it	ne
 8001076:	0c1b      	lsrne	r3, r3, #16
 8001078:	8003      	strh	r3, [r0, #0]
 800107a:	4770      	bx	lr

0800107c <I2C_NACKPositionConfig>:
 800107c:	f7ff bff0 	b.w	8001060 <I2C_PECPositionConfig>

08001080 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 8001080:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001082:	b121      	cbz	r1, 800108e <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= CR1_ENPEC_Set;
 8001084:	b29b      	uxth	r3, r3
 8001086:	f043 0320 	orr.w	r3, r3, #32
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= CR1_ENPEC_Reset;
 800108a:	8003      	strh	r3, [r0, #0]
 800108c:	4770      	bx	lr
 800108e:	f023 0320 	bic.w	r3, r3, #32
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	0c1b      	lsrs	r3, r3, #16
 8001096:	e7f8      	b.n	800108a <I2C_CalculatePEC+0xa>

08001098 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001098:	8b00      	ldrh	r0, [r0, #24]
}
 800109a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800109e:	4770      	bx	lr

080010a0 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 80010a0:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80010a2:	b121      	cbz	r1, 80010ae <I2C_ARPCmd+0xe>
    I2Cx->CR1 |= CR1_ENARP_Set;
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f043 0310 	orr.w	r3, r3, #16
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= CR1_ENARP_Reset;
 80010aa:	8003      	strh	r3, [r0, #0]
 80010ac:	4770      	bx	lr
 80010ae:	f023 0310 	bic.w	r3, r3, #16
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	e7f8      	b.n	80010aa <I2C_ARPCmd+0xa>

080010b8 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 80010b8:	8803      	ldrh	r3, [r0, #0]
  if (NewState == DISABLE)
 80010ba:	b921      	cbnz	r1, 80010c6 <I2C_StretchClockCmd+0xe>
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 80010bc:	b29b      	uxth	r3, r3
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 80010c2:	8003      	strh	r3, [r0, #0]
 80010c4:	4770      	bx	lr
 80010c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	0c1b      	lsrs	r3, r3, #16
 80010ce:	e7f8      	b.n	80010c2 <I2C_StretchClockCmd+0xa>

080010d0 <I2C_FastModeDutyCycleConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80010d0:	8b83      	ldrh	r3, [r0, #28]
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80010d2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    I2Cx->CCR &= I2C_DutyCycle_2;
 80010d6:	bf1b      	ittet	ne
 80010d8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80010dc:	041b      	lslne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80010de:	b29b      	uxtheq	r3, r3
    I2Cx->CCR &= I2C_DutyCycle_2;
 80010e0:	0c1b      	lsrne	r3, r3, #16
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80010e2:	bf08      	it	eq
 80010e4:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80010e8:	8383      	strh	r3, [r0, #28]
 80010ea:	4770      	bx	lr

080010ec <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80010ec:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80010ee:	8b00      	ldrh	r0, [r0, #24]
  flag1 = I2Cx->SR1;
 80010f0:	b29b      	uxth	r3, r3
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80010f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80010f6:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
 80010fa:	4018      	ands	r0, r3
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80010fc:	1a43      	subs	r3, r0, r1
 80010fe:	4258      	negs	r0, r3
 8001100:	4158      	adcs	r0, r3
 8001102:	4770      	bx	lr

08001104 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001104:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001106:	8b00      	ldrh	r0, [r0, #24]
  flag1 = I2Cx->SR1;
 8001108:	b29b      	uxth	r3, r3
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800110a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 800110e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001112:	4770      	bx	lr

08001114 <I2C_GetFlagStatus>:
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001114:	2300      	movs	r3, #0
{
 8001116:	b082      	sub	sp, #8
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800111c:	0f0b      	lsrs	r3, r1, #28
  i2cxbase = (uint32_t)I2Cx;
 800111e:	9001      	str	r0, [sp, #4]
  i2creg = I2C_FLAG >> 28;
 8001120:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
  
  if(i2creg != 0)
 8001122:	9b00      	ldr	r3, [sp, #0]
  I2C_FLAG &= FLAG_Mask;
 8001124:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  if(i2creg != 0)
 8001128:	b153      	cbz	r3, 8001140 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800112a:	9b01      	ldr	r3, [sp, #4]
 800112c:	3314      	adds	r3, #20
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800112e:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001130:	9b01      	ldr	r3, [sp, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001136:	bf14      	ite	ne
 8001138:	2001      	movne	r0, #1
 800113a:	2000      	moveq	r0, #0
 800113c:	b002      	add	sp, #8
 800113e:	4770      	bx	lr
    i2cxbase += 0x18;
 8001140:	9b01      	ldr	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001142:	0c09      	lsrs	r1, r1, #16
    i2cxbase += 0x18;
 8001144:	3318      	adds	r3, #24
 8001146:	e7f2      	b.n	800112e <I2C_GetFlagStatus+0x1a>

08001148 <I2C_ClearFlag>:
 8001148:	43c9      	mvns	r1, r1
 800114a:	b289      	uxth	r1, r1
 800114c:	8281      	strh	r1, [r0, #20]
 800114e:	4770      	bx	lr

08001150 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8001150:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001152:	8a80      	ldrh	r0, [r0, #20]
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8001154:	b29b      	uxth	r3, r3
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001156:	b280      	uxth	r0, r0
 8001158:	4008      	ands	r0, r1
 800115a:	d006      	beq.n	800116a <I2C_GetITStatus+0x1a>
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 800115c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001160:	ea13 4311 	ands.w	r3, r3, r1, lsr #16
 8001164:	bf14      	ite	ne
 8001166:	2001      	movne	r0, #1
 8001168:	2000      	moveq	r0, #0
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800116a:	4770      	bx	lr

0800116c <I2C_ClearITPendingBit>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800116c:	43c9      	mvns	r1, r1
 800116e:	b289      	uxth	r1, r1
 8001170:	8281      	strh	r1, [r0, #20]
 8001172:	4770      	bx	lr

08001174 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <RCC_DeInit+0x38>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800117e:	6859      	ldr	r1, [r3, #4]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <RCC_DeInit+0x3c>)
 8001182:	400a      	ands	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800118c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001190:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001198:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011a0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80011a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	f8ff0000 	.word	0xf8ff0000

080011b4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80011b6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011c0:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c8:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 80011ca:	d003      	beq.n	80011d4 <RCC_HSEConfig+0x20>
 80011cc:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80011d0:	d005      	beq.n	80011de <RCC_HSEConfig+0x2a>
 80011d2:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	4770      	bx	lr
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80011e4:	e7f9      	b.n	80011da <RCC_HSEConfig+0x26>
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <RCC_AdjustHSICalibrationValue+0x10>)
 80011ee:	6813      	ldr	r3, [r2, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 80011f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80011f4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 80011f8:	6010      	str	r0, [r2, #0]
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000

08001200 <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001200:	4b01      	ldr	r3, [pc, #4]	; (8001208 <RCC_HSICmd+0x8>)
 8001202:	6018      	str	r0, [r3, #0]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	42420000 	.word	0x42420000

0800120c <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <RCC_PLLConfig+0x10>)
 800120e:	6853      	ldr	r3, [r2, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001210:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001214:	4319      	orrs	r1, r3
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8001216:	4301      	orrs	r1, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001218:	6051      	str	r1, [r2, #4]
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000

08001220 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001220:	4b01      	ldr	r3, [pc, #4]	; (8001228 <RCC_PLLCmd+0x8>)
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	42420060 	.word	0x42420060

0800122c <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <RCC_SYSCLKConfig+0x10>)
 800122e:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001230:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001234:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001236:	6050      	str	r0, [r2, #4]
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <RCC_GetSYSCLKSource+0xc>)
 8001242:	6858      	ldr	r0, [r3, #4]
}
 8001244:	f000 000c 	and.w	r0, r0, #12
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <RCC_HCLKConfig+0x10>)
 8001252:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001258:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800125a:	6050      	str	r0, [r2, #4]
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <RCC_PCLK1Config+0x10>)
 8001266:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001268:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800126c:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800126e:	6050      	str	r0, [r2, #4]
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <RCC_PCLK2Config+0x10>)
 800127a:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 800127c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001280:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001284:	6050      	str	r0, [r2, #4]
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000

0800128c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800128e:	781a      	ldrb	r2, [r3, #0]
  if (NewState != DISABLE)
 8001290:	b111      	cbz	r1, 8001298 <RCC_ITConfig+0xc>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001292:	4310      	orrs	r0, r2
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001294:	7018      	strb	r0, [r3, #0]
 8001296:	4770      	bx	lr
 8001298:	ea22 0000 	bic.w	r0, r2, r0
 800129c:	e7fa      	b.n	8001294 <RCC_ITConfig+0x8>
 800129e:	bf00      	nop
 80012a0:	40021009 	.word	0x40021009

080012a4 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <RCC_USBCLKConfig+0x8>)
 80012a6:	6018      	str	r0, [r3, #0]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	424200d8 	.word	0x424200d8

080012b0 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <RCC_ADCCLKConfig+0x10>)
 80012b2:	6853      	ldr	r3, [r2, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80012b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80012b8:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012ba:	6050      	str	r0, [r2, #4]
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000

080012c4 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80012c4:	2200      	movs	r2, #0
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <RCC_LSEConfig+0x1c>)
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80012c8:	2801      	cmp	r0, #1
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80012ca:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80012cc:	701a      	strb	r2, [r3, #0]
  switch(RCC_LSE)
 80012ce:	d002      	beq.n	80012d6 <RCC_LSEConfig+0x12>
 80012d0:	2804      	cmp	r0, #4
 80012d2:	d002      	beq.n	80012da <RCC_LSEConfig+0x16>
 80012d4:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80012d6:	7018      	strb	r0, [r3, #0]
      break;
 80012d8:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80012da:	2205      	movs	r2, #5
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	4770      	bx	lr
 80012e0:	40021020 	.word	0x40021020

080012e4 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80012e4:	4b01      	ldr	r3, [pc, #4]	; (80012ec <RCC_LSICmd+0x8>)
 80012e6:	6018      	str	r0, [r3, #0]
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	42420480 	.word	0x42420480

080012f0 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80012f0:	4a02      	ldr	r2, [pc, #8]	; (80012fc <RCC_RTCCLKConfig+0xc>)
 80012f2:	6a13      	ldr	r3, [r2, #32]
 80012f4:	4318      	orrs	r0, r3
 80012f6:	6210      	str	r0, [r2, #32]
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <RCC_RTCCLKCmd+0x8>)
 8001302:	6018      	str	r0, [r3, #0]
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	4242043c 	.word	0x4242043c

0800130c <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <RCC_GetClocksFreq+0x78>)
{
 800130e:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001310:	6853      	ldr	r3, [r2, #4]
 8001312:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8001316:	2b04      	cmp	r3, #4
 8001318:	d021      	beq.n	800135e <RCC_GetClocksFreq+0x52>
 800131a:	2b08      	cmp	r3, #8
 800131c:	d021      	beq.n	8001362 <RCC_GetClocksFreq+0x56>
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <RCC_GetClocksFreq+0x7c>)
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001320:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001322:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001324:	4919      	ldr	r1, [pc, #100]	; (800138c <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 8001326:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800132a:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800132c:	6803      	ldr	r3, [r0, #0]
 800132e:	40e3      	lsrs	r3, r4
 8001330:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001332:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8001334:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8001338:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800133a:	fa23 f404 	lsr.w	r4, r3, r4
 800133e:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001340:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8001342:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8001346:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001348:	40e3      	lsrs	r3, r4
 800134a:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800134c:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 800134e:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8001352:	4411      	add	r1, r2
 8001354:	7c0a      	ldrb	r2, [r1, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001356:	fbb3 f3f2 	udiv	r3, r3, r2
 800135a:	6103      	str	r3, [r0, #16]
 800135c:	bd10      	pop	{r4, pc}
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <RCC_GetClocksFreq+0x84>)
 8001360:	e7de      	b.n	8001320 <RCC_GetClocksFreq+0x14>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001362:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001364:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8001366:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 800136a:	03cc      	lsls	r4, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 800136c:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8001370:	d402      	bmi.n	8001378 <RCC_GetClocksFreq+0x6c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <RCC_GetClocksFreq+0x88>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001374:	434b      	muls	r3, r1
 8001376:	e7d3      	b.n	8001320 <RCC_GetClocksFreq+0x14>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001378:	6851      	ldr	r1, [r2, #4]
 800137a:	0389      	lsls	r1, r1, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800137c:	bf4c      	ite	mi
 800137e:	4902      	ldrmi	r1, [pc, #8]	; (8001388 <RCC_GetClocksFreq+0x7c>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001380:	4903      	ldrpl	r1, [pc, #12]	; (8001390 <RCC_GetClocksFreq+0x84>)
 8001382:	e7f7      	b.n	8001374 <RCC_GetClocksFreq+0x68>
 8001384:	40021000 	.word	0x40021000
 8001388:	007a1200 	.word	0x007a1200
 800138c:	20000014 	.word	0x20000014
 8001390:	00f42400 	.word	0x00f42400
 8001394:	003d0900 	.word	0x003d0900

08001398 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800139a:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 800139c:	b111      	cbz	r1, 80013a4 <RCC_AHBPeriphClockCmd+0xc>
    RCC->AHBENR |= RCC_AHBPeriph;
 800139e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80013a0:	6158      	str	r0, [r3, #20]
 80013a2:	4770      	bx	lr
 80013a4:	ea22 0000 	bic.w	r0, r2, r0
 80013a8:	e7fa      	b.n	80013a0 <RCC_AHBPeriphClockCmd+0x8>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013b2:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 80013b4:	b111      	cbz	r1, 80013bc <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 80013b6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013b8:	6198      	str	r0, [r3, #24]
 80013ba:	4770      	bx	lr
 80013bc:	ea22 0000 	bic.w	r0, r2, r0
 80013c0:	e7fa      	b.n	80013b8 <RCC_APB2PeriphClockCmd+0x8>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013ca:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 80013cc:	b111      	cbz	r1, 80013d4 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 80013ce:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013d0:	61d8      	str	r0, [r3, #28]
 80013d2:	4770      	bx	lr
 80013d4:	ea22 0000 	bic.w	r0, r2, r0
 80013d8:	e7fa      	b.n	80013d0 <RCC_APB1PeriphClockCmd+0x8>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80013e2:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 80013e4:	b111      	cbz	r1, 80013ec <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 80013e6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80013e8:	60d8      	str	r0, [r3, #12]
 80013ea:	4770      	bx	lr
 80013ec:	ea22 0000 	bic.w	r0, r2, r0
 80013f0:	e7fa      	b.n	80013e8 <RCC_APB2PeriphResetCmd+0x8>
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80013fa:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 80013fc:	b111      	cbz	r1, 8001404 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 80013fe:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001400:	6118      	str	r0, [r3, #16]
 8001402:	4770      	bx	lr
 8001404:	ea22 0000 	bic.w	r0, r2, r0
 8001408:	e7fa      	b.n	8001400 <RCC_APB1PeriphResetCmd+0x8>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <RCC_BackupResetCmd+0x8>)
 8001412:	6018      	str	r0, [r3, #0]
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	42420440 	.word	0x42420440

0800141c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <RCC_ClockSecuritySystemCmd+0x8>)
 800141e:	6018      	str	r0, [r3, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	4242004c 	.word	0x4242004c

08001428 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <RCC_MCOConfig+0x8>)
 800142a:	7018      	strb	r0, [r3, #0]
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021007 	.word	0x40021007

08001434 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001434:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001436:	2a01      	cmp	r2, #1
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <RCC_GetFlagStatus+0x24>)
 800143a:	d107      	bne.n	800144c <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 800143c:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 800143e:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001442:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8001446:	f000 0001 	and.w	r0, r0, #1
 800144a:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800144c:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 800144e:	bf0c      	ite	eq
 8001450:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 8001452:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8001454:	e7f3      	b.n	800143e <RCC_GetFlagStatus+0xa>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <RCC_WaitForHSEStartUp>:
  __IO uint32_t StartUpCounter = 0;
 800145c:	2300      	movs	r3, #0
{
 800145e:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8001460:	9301      	str	r3, [sp, #4]
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001462:	2031      	movs	r0, #49	; 0x31
 8001464:	f7ff ffe6 	bl	8001434 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001474:	d001      	beq.n	800147a <RCC_WaitForHSEStartUp+0x1e>
 8001476:	2800      	cmp	r0, #0
 8001478:	d0f3      	beq.n	8001462 <RCC_WaitForHSEStartUp+0x6>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800147a:	2031      	movs	r0, #49	; 0x31
 800147c:	f7ff ffda 	bl	8001434 <RCC_GetFlagStatus>
}
 8001480:	3000      	adds	r0, #0
 8001482:	bf18      	it	ne
 8001484:	2001      	movne	r0, #1
 8001486:	b003      	add	sp, #12
 8001488:	f85d fb04 	ldr.w	pc, [sp], #4

0800148c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 800148c:	4a02      	ldr	r2, [pc, #8]	; (8001498 <RCC_ClearFlag+0xc>)
 800148e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001494:	6253      	str	r3, [r2, #36]	; 0x24
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000

0800149c <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <RCC_GetITStatus+0x10>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 80014a2:	bf14      	ite	ne
 80014a4:	2001      	movne	r0, #1
 80014a6:	2000      	moveq	r0, #0
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <RCC_ClearITPendingBit+0x8>)
 80014b2:	7018      	strb	r0, [r3, #0]
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	4002100a 	.word	0x4002100a

080014bc <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80014bc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <USART_DeInit+0x88>)
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d10b      	bne.n	80014dc <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80014c4:	2101      	movs	r1, #1
 80014c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014ca:	f7ff ff89 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 80014ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80014d2:	2100      	movs	r1, #0
 80014d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014d8:	f7ff bf82 	b.w	80013e0 <RCC_APB2PeriphResetCmd>
  else if (USARTx == USART2)
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <USART_DeInit+0x8c>)
 80014de:	4298      	cmp	r0, r3
 80014e0:	d10b      	bne.n	80014fa <USART_DeInit+0x3e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80014e2:	2101      	movs	r1, #1
 80014e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014e8:	f7ff ff86 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80014ec:	2100      	movs	r1, #0
 80014ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
}
 80014f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80014f6:	f7ff bf7f 	b.w	80013f8 <RCC_APB1PeriphResetCmd>
  else if (USARTx == USART3)
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <USART_DeInit+0x90>)
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d108      	bne.n	8001512 <USART_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001500:	2101      	movs	r1, #1
 8001502:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001506:	f7ff ff77 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800150a:	2100      	movs	r1, #0
 800150c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001510:	e7ef      	b.n	80014f2 <USART_DeInit+0x36>
  else if (USARTx == UART4)
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <USART_DeInit+0x94>)
 8001514:	4298      	cmp	r0, r3
 8001516:	d108      	bne.n	800152a <USART_DeInit+0x6e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001518:	2101      	movs	r1, #1
 800151a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800151e:	f7ff ff6b 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001522:	2100      	movs	r1, #0
 8001524:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001528:	e7e3      	b.n	80014f2 <USART_DeInit+0x36>
    if (USARTx == UART5)
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <USART_DeInit+0x98>)
 800152c:	4298      	cmp	r0, r3
 800152e:	d108      	bne.n	8001542 <USART_DeInit+0x86>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001530:	2101      	movs	r1, #1
 8001532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001536:	f7ff ff5f 	bl	80013f8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800153a:	2100      	movs	r1, #0
 800153c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001540:	e7d7      	b.n	80014f2 <USART_DeInit+0x36>
 8001542:	bd08      	pop	{r3, pc}
 8001544:	40013800 	.word	0x40013800
 8001548:	40004400 	.word	0x40004400
 800154c:	40004800 	.word	0x40004800
 8001550:	40004c00 	.word	0x40004c00
 8001554:	40005000 	.word	0x40005000

08001558 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001558:	b530      	push	{r4, r5, lr}
 800155a:	460d      	mov	r5, r1
 800155c:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800155e:	8a03      	ldrh	r3, [r0, #16]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8001560:	898a      	ldrh	r2, [r1, #12]
  tmpreg = USARTx->CR2;
 8001562:	b29b      	uxth	r3, r3
 8001564:	88c9      	ldrh	r1, [r1, #6]
 8001566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156a:	430b      	orrs	r3, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800156c:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800156e:	8983      	ldrh	r3, [r0, #12]
 8001570:	88a9      	ldrh	r1, [r5, #4]
 8001572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001576:	f023 030c 	bic.w	r3, r3, #12
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	430b      	orrs	r3, r1
 8001580:	8929      	ldrh	r1, [r5, #8]
{
 8001582:	b087      	sub	sp, #28
 8001584:	430b      	orrs	r3, r1
 8001586:	8969      	ldrh	r1, [r5, #10]
 8001588:	430b      	orrs	r3, r1
 800158a:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800158c:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800158e:	8a83      	ldrh	r3, [r0, #20]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001596:	4313      	orrs	r3, r2
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001598:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800159a:	a801      	add	r0, sp, #4
 800159c:	f7ff feb6 	bl	800130c <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <USART_Init+0xa8>)
 80015a2:	9b03      	ldr	r3, [sp, #12]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80015a4:	9904      	ldr	r1, [sp, #16]
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80015a6:	4294      	cmp	r4, r2
 80015a8:	bf18      	it	ne
 80015aa:	4619      	movne	r1, r3
 80015ac:	2219      	movs	r2, #25
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80015ae:	89a3      	ldrh	r3, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80015b0:	434a      	muls	r2, r1
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80015b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80015b6:	682b      	ldr	r3, [r5, #0]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80015b8:	f04f 0564 	mov.w	r5, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80015bc:	bf14      	ite	ne
 80015be:	005b      	lslne	r3, r3, #1
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80015c0:	009b      	lsleq	r3, r3, #2
 80015c2:	fbb2 f1f3 	udiv	r1, r2, r3
  tmpreg = (integerdivider / 100) << 4;
 80015c6:	fbb1 f3f5 	udiv	r3, r1, r5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80015ca:	89a2      	ldrh	r2, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 80015cc:	0118      	lsls	r0, r3, #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80015ce:	0412      	lsls	r2, r2, #16
 80015d0:	fb05 1313 	mls	r3, r5, r3, r1
 80015d4:	d50b      	bpl.n	80015ee <USART_Init+0x96>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	3232      	adds	r2, #50	; 0x32
 80015da:	fbb2 f2f5 	udiv	r2, r2, r5
 80015de:	f002 0207 	and.w	r2, r2, #7
 80015e2:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	8123      	strh	r3, [r4, #8]
}
 80015ea:	b007      	add	sp, #28
 80015ec:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	3332      	adds	r3, #50	; 0x32
 80015f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	4303      	orrs	r3, r0
 80015fc:	e7f3      	b.n	80015e6 <USART_Init+0x8e>
 80015fe:	bf00      	nop
 8001600:	40013800 	.word	0x40013800

08001604 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001604:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001608:	220c      	movs	r2, #12
  USART_InitStruct->USART_BaudRate = 9600;
 800160a:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800160c:	2300      	movs	r3, #0
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800160e:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001610:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001612:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001614:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001616:	8183      	strh	r3, [r0, #12]
 8001618:	4770      	bx	lr

0800161a <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800161a:	880b      	ldrh	r3, [r1, #0]
{
 800161c:	b510      	push	{r4, lr}
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800161e:	884c      	ldrh	r4, [r1, #2]
  tmpreg = USARTx->CR2;
 8001620:	8a02      	ldrh	r2, [r0, #16]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001622:	4323      	orrs	r3, r4
 8001624:	888c      	ldrh	r4, [r1, #4]
 8001626:	88c9      	ldrh	r1, [r1, #6]
  tmpreg = USARTx->CR2;
 8001628:	b292      	uxth	r2, r2
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800162a:	4323      	orrs	r3, r4
 800162c:	430b      	orrs	r3, r1
 800162e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001632:	4313      	orrs	r3, r2
 8001634:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001636:	8203      	strh	r3, [r0, #16]
 8001638:	bd10      	pop	{r4, pc}

0800163a <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800163a:	2300      	movs	r3, #0
 800163c:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800163e:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001640:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001642:	80c3      	strh	r3, [r0, #6]
 8001644:	4770      	bx	lr

08001646 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001646:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001648:	b121      	cbz	r1, 8001654 <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 800164a:	b29b      	uxth	r3, r3
 800164c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001650:	8183      	strh	r3, [r0, #12]
 8001652:	4770      	bx	lr
 8001654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	e7f8      	b.n	8001650 <USART_Cmd+0xa>

0800165e <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800165e:	f001 031f 	and.w	r3, r1, #31
{
 8001662:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001664:	f3c1 1442 	ubfx	r4, r1, #5, #3
  itmask = (((uint32_t)0x01) << itpos);
 8001668:	2101      	movs	r1, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800166a:	2c01      	cmp	r4, #1
  itmask = (((uint32_t)0x01) << itpos);
 800166c:	fa01 f103 	lsl.w	r1, r1, r3
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001670:	d105      	bne.n	800167e <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 8001672:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001674:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8001676:	b13a      	cbz	r2, 8001688 <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001678:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800167a:	6001      	str	r1, [r0, #0]
 800167c:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800167e:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 8001680:	bf0c      	ite	eq
 8001682:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 8001684:	3014      	addne	r0, #20
 8001686:	e7f5      	b.n	8001674 <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001688:	ea23 0101 	bic.w	r1, r3, r1
 800168c:	e7f5      	b.n	800167a <USART_ITConfig+0x1c>

0800168e <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800168e:	8a83      	ldrh	r3, [r0, #20]
 8001690:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001692:	b112      	cbz	r2, 800169a <USART_DMACmd+0xc>
    USARTx->CR3 |= USART_DMAReq;
 8001694:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001696:	8281      	strh	r1, [r0, #20]
 8001698:	4770      	bx	lr
 800169a:	ea23 0101 	bic.w	r1, r3, r1
 800169e:	e7fa      	b.n	8001696 <USART_DMACmd+0x8>

080016a0 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 80016a0:	8a03      	ldrh	r3, [r0, #16]
 80016a2:	f023 030f 	bic.w	r3, r3, #15
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80016ac:	8a03      	ldrh	r3, [r0, #16]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4319      	orrs	r1, r3
 80016b2:	8201      	strh	r1, [r0, #16]
 80016b4:	4770      	bx	lr

080016b6 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 80016b6:	8983      	ldrh	r3, [r0, #12]
 80016b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80016c2:	8983      	ldrh	r3, [r0, #12]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4319      	orrs	r1, r3
 80016c8:	8181      	strh	r1, [r0, #12]
 80016ca:	4770      	bx	lr

080016cc <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 80016cc:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 80016ce:	b121      	cbz	r1, 80016da <USART_ReceiverWakeUpCmd+0xe>
    USARTx->CR1 |= CR1_RWU_Set;
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f043 0302 	orr.w	r3, r3, #2
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 80016d6:	8183      	strh	r3, [r0, #12]
 80016d8:	4770      	bx	lr
 80016da:	f023 0302 	bic.w	r3, r3, #2
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	e7f8      	b.n	80016d6 <USART_ReceiverWakeUpCmd+0xa>

080016e4 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 80016e4:	8a03      	ldrh	r3, [r0, #16]
 80016e6:	f023 0320 	bic.w	r3, r3, #32
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	0c1b      	lsrs	r3, r3, #16
 80016ee:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80016f0:	8a03      	ldrh	r3, [r0, #16]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4319      	orrs	r1, r3
 80016f6:	8201      	strh	r1, [r0, #16]
 80016f8:	4770      	bx	lr

080016fa <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80016fa:	8a03      	ldrh	r3, [r0, #16]
  if (NewState != DISABLE)
 80016fc:	b121      	cbz	r1, 8001708 <USART_LINCmd+0xe>
    USARTx->CR2 |= CR2_LINEN_Set;
 80016fe:	b29b      	uxth	r3, r3
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8001704:	8203      	strh	r3, [r0, #16]
 8001706:	4770      	bx	lr
 8001708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	e7f8      	b.n	8001704 <USART_LINCmd+0xa>

08001712 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001712:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001716:	8081      	strh	r1, [r0, #4]
 8001718:	4770      	bx	lr

0800171a <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800171a:	8880      	ldrh	r0, [r0, #4]
}
 800171c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001720:	4770      	bx	lr

08001722 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8001722:	8983      	ldrh	r3, [r0, #12]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	8183      	strh	r3, [r0, #12]
 800172c:	4770      	bx	lr

0800172e <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 800172e:	8b03      	ldrh	r3, [r0, #24]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001734:	8b03      	ldrh	r3, [r0, #24]
 8001736:	b29b      	uxth	r3, r3
 8001738:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800173c:	8301      	strh	r1, [r0, #24]
 800173e:	4770      	bx	lr

08001740 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8001740:	8b03      	ldrh	r3, [r0, #24]
 8001742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001746:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001748:	8b03      	ldrh	r3, [r0, #24]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4319      	orrs	r1, r3
 800174e:	8301      	strh	r1, [r0, #24]
 8001750:	4770      	bx	lr

08001752 <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8001752:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001754:	b121      	cbz	r1, 8001760 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= CR3_SCEN_Set;
 8001756:	b29b      	uxth	r3, r3
 8001758:	f043 0320 	orr.w	r3, r3, #32
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 800175c:	8283      	strh	r3, [r0, #20]
 800175e:	4770      	bx	lr
 8001760:	f023 0320 	bic.w	r3, r3, #32
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	e7f8      	b.n	800175c <USART_SmartCardCmd+0xa>

0800176a <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 800176a:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 800176c:	b121      	cbz	r1, 8001778 <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= CR3_NACK_Set;
 800176e:	b29b      	uxth	r3, r3
 8001770:	f043 0310 	orr.w	r3, r3, #16
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8001774:	8283      	strh	r3, [r0, #20]
 8001776:	4770      	bx	lr
 8001778:	f023 0310 	bic.w	r3, r3, #16
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	e7f8      	b.n	8001774 <USART_SmartCardNACKCmd+0xa>

08001782 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8001782:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 8001784:	b121      	cbz	r1, 8001790 <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= CR3_HDSEL_Set;
 8001786:	b29b      	uxth	r3, r3
 8001788:	f043 0308 	orr.w	r3, r3, #8
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 800178c:	8283      	strh	r3, [r0, #20]
 800178e:	4770      	bx	lr
 8001790:	f023 0308 	bic.w	r3, r3, #8
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	0c1b      	lsrs	r3, r3, #16
 8001798:	e7f8      	b.n	800178c <USART_HalfDuplexCmd+0xa>

0800179a <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 800179a:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 800179c:	b131      	cbz	r1, 80017ac <USART_OverSampling8Cmd+0x12>
    USARTx->CR1 |= CR1_OVER8_Set;
 800179e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017a6:	b29b      	uxth	r3, r3
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 80017a8:	8183      	strh	r3, [r0, #12]
 80017aa:	4770      	bx	lr
 80017ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017b0:	e7fa      	b.n	80017a8 <USART_OverSampling8Cmd+0xe>

080017b2 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80017b2:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 80017b4:	b121      	cbz	r1, 80017c0 <USART_OneBitMethodCmd+0xe>
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 80017bc:	8283      	strh	r3, [r0, #20]
 80017be:	4770      	bx	lr
 80017c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	0c1b      	lsrs	r3, r3, #16
 80017c8:	e7f8      	b.n	80017bc <USART_OneBitMethodCmd+0xa>

080017ca <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 80017ca:	8a83      	ldrh	r3, [r0, #20]
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80017d6:	8a83      	ldrh	r3, [r0, #20]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4319      	orrs	r1, r3
 80017dc:	8281      	strh	r1, [r0, #20]
 80017de:	4770      	bx	lr

080017e0 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 80017e0:	8a83      	ldrh	r3, [r0, #20]
  if (NewState != DISABLE)
 80017e2:	b121      	cbz	r1, 80017ee <USART_IrDACmd+0xe>
    USARTx->CR3 |= CR3_IREN_Set;
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f043 0302 	orr.w	r3, r3, #2
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 80017ea:	8283      	strh	r3, [r0, #20]
 80017ec:	4770      	bx	lr
 80017ee:	f023 0302 	bic.w	r3, r3, #2
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	e7f8      	b.n	80017ea <USART_IrDACmd+0xa>

080017f8 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80017f8:	8803      	ldrh	r3, [r0, #0]
 80017fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80017fc:	bf14      	ite	ne
 80017fe:	2001      	movne	r0, #1
 8001800:	2000      	moveq	r0, #0
 8001802:	4770      	bx	lr

08001804 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001804:	43c9      	mvns	r1, r1
 8001806:	b289      	uxth	r1, r1
 8001808:	8001      	strh	r1, [r0, #0]
 800180a:	4770      	bx	lr

0800180c <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 800180c:	2301      	movs	r3, #1
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800180e:	f3c1 1242 	ubfx	r2, r1, #5, #3
{
 8001812:	b510      	push	{r4, lr}
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001814:	2a01      	cmp	r2, #1
  itmask = USART_IT & IT_Mask;
 8001816:	f001 041f 	and.w	r4, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 800181a:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800181e:	d10e      	bne.n	800183e <USART_GetITStatus+0x32>
  {
    itmask &= USARTx->CR1;
 8001820:	8982      	ldrh	r2, [r0, #12]
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001822:	b292      	uxth	r2, r2
 8001824:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001826:	8802      	ldrh	r2, [r0, #0]
 8001828:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800182a:	b16b      	cbz	r3, 8001848 <USART_GetITStatus+0x3c>
  bitpos = (uint32_t)0x01 << bitpos;
 800182c:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x08;
 800182e:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8001830:	fa03 f101 	lsl.w	r1, r3, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001834:	420a      	tst	r2, r1
 8001836:	bf14      	ite	ne
 8001838:	4618      	movne	r0, r3
 800183a:	2000      	moveq	r0, #0
 800183c:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800183e:	2a02      	cmp	r2, #2
    itmask &= USARTx->CR2;
 8001840:	bf0c      	ite	eq
 8001842:	8a02      	ldrheq	r2, [r0, #16]
    itmask &= USARTx->CR3;
 8001844:	8a82      	ldrhne	r2, [r0, #20]
 8001846:	e7ec      	b.n	8001822 <USART_GetITStatus+0x16>
 8001848:	4618      	mov	r0, r3
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800184c:	0a0b      	lsrs	r3, r1, #8
 800184e:	2101      	movs	r1, #1
 8001850:	4099      	lsls	r1, r3
  USARTx->SR = (uint16_t)~itmask;
 8001852:	43c9      	mvns	r1, r1
 8001854:	b289      	uxth	r1, r1
 8001856:	8001      	strh	r1, [r0, #0]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800185c:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800185e:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001860:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001864:	f024 0401 	bic.w	r4, r4, #1
 8001868:	0424      	lsls	r4, r4, #16
 800186a:	0c24      	lsrs	r4, r4, #16
 800186c:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800186e:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001870:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001872:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8001876:	0424      	lsls	r4, r4, #16
 8001878:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800187a:	431c      	orrs	r4, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <TI1_Config+0x68>)
  tmpccer = TIMx->CCER;
 800187e:	b2ad      	uxth	r5, r5
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001880:	4298      	cmp	r0, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001882:	b2a4      	uxth	r4, r4
 8001884:	f041 0101 	orr.w	r1, r1, #1
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001888:	d012      	beq.n	80018b0 <TI1_Config+0x54>
 800188a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188e:	4298      	cmp	r0, r3
 8001890:	d00e      	beq.n	80018b0 <TI1_Config+0x54>
 8001892:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001896:	d00b      	beq.n	80018b0 <TI1_Config+0x54>
 8001898:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800189c:	4298      	cmp	r0, r3
 800189e:	d007      	beq.n	80018b0 <TI1_Config+0x54>
 80018a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d003      	beq.n	80018b0 <TI1_Config+0x54>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80018a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ac:	4298      	cmp	r0, r3
 80018ae:	d105      	bne.n	80018bc <TI1_Config+0x60>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 80018b0:	f025 0502 	bic.w	r5, r5, #2
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80018b4:	4329      	orrs	r1, r5
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80018b6:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80018b8:	8401      	strh	r1, [r0, #32]
 80018ba:	bd30      	pop	{r4, r5, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80018bc:	f025 050a 	bic.w	r5, r5, #10
 80018c0:	e7f8      	b.n	80018b4 <TI1_Config+0x58>
 80018c2:	bf00      	nop
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80018c8:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80018ca:	8c05      	ldrh	r5, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80018cc:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80018ce:	f025 0510 	bic.w	r5, r5, #16
 80018d2:	042d      	lsls	r5, r5, #16
 80018d4:	0c2d      	lsrs	r5, r5, #16
 80018d6:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018d8:	8b05      	ldrh	r5, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80018da:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80018de:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 80018e2:	052d      	lsls	r5, r5, #20
 80018e4:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80018e6:	431d      	orrs	r5, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <TI2_Config+0x74>)
  tmpccer = TIMx->CCER;
 80018ea:	8c04      	ldrh	r4, [r0, #32]
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80018ec:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 80018ee:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80018f0:	b2ad      	uxth	r5, r5
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80018f2:	d012      	beq.n	800191a <TI2_Config+0x52>
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	4298      	cmp	r0, r3
 80018fa:	d00e      	beq.n	800191a <TI2_Config+0x52>
 80018fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001900:	d00b      	beq.n	800191a <TI2_Config+0x52>
 8001902:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8001906:	4298      	cmp	r0, r3
 8001908:	d007      	beq.n	800191a <TI2_Config+0x52>
 800190a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800190e:	4298      	cmp	r0, r3
 8001910:	d003      	beq.n	800191a <TI2_Config+0x52>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001916:	4298      	cmp	r0, r3
 8001918:	d109      	bne.n	800192e <TI2_Config+0x66>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 800191a:	f024 0420 	bic.w	r4, r4, #32
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800191e:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
 8001922:	f044 0410 	orr.w	r4, r4, #16
 8001926:	b2a4      	uxth	r4, r4
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001928:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800192a:	8404      	strh	r4, [r0, #32]
 800192c:	bd30      	pop	{r4, r5, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800192e:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001932:	f041 0110 	orr.w	r1, r1, #16
 8001936:	430c      	orrs	r4, r1
 8001938:	e7f6      	b.n	8001928 <TI2_Config+0x60>
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00

08001940 <TIM_DeInit>:
{
 8001940:	b508      	push	{r3, lr}
  if (TIMx == TIM1)
 8001942:	4b61      	ldr	r3, [pc, #388]	; (8001ac8 <TIM_DeInit+0x188>)
 8001944:	4298      	cmp	r0, r3
 8001946:	d10b      	bne.n	8001960 <TIM_DeInit+0x20>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001948:	2101      	movs	r1, #1
 800194a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800194e:	f7ff fd47 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001952:	2100      	movs	r1, #0
 8001954:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8001958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800195c:	f7ff bd40 	b.w	80013e0 <RCC_APB2PeriphResetCmd>
  else if (TIMx == TIM2)
 8001960:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001964:	d109      	bne.n	800197a <TIM_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001966:	2101      	movs	r1, #1
 8001968:	4608      	mov	r0, r1
 800196a:	f7ff fd45 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800196e:	2100      	movs	r1, #0
 8001970:	2001      	movs	r0, #1
}
 8001972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001976:	f7ff bd3f 	b.w	80013f8 <RCC_APB1PeriphResetCmd>
  else if (TIMx == TIM3)
 800197a:	4b54      	ldr	r3, [pc, #336]	; (8001acc <TIM_DeInit+0x18c>)
 800197c:	4298      	cmp	r0, r3
 800197e:	d106      	bne.n	800198e <TIM_DeInit+0x4e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001980:	2101      	movs	r1, #1
 8001982:	2002      	movs	r0, #2
 8001984:	f7ff fd38 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001988:	2100      	movs	r1, #0
 800198a:	2002      	movs	r0, #2
 800198c:	e7f1      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM4)
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <TIM_DeInit+0x190>)
 8001990:	4298      	cmp	r0, r3
 8001992:	d106      	bne.n	80019a2 <TIM_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001994:	2101      	movs	r1, #1
 8001996:	2004      	movs	r0, #4
 8001998:	f7ff fd2e 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800199c:	2100      	movs	r1, #0
 800199e:	2004      	movs	r0, #4
 80019a0:	e7e7      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM5)
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <TIM_DeInit+0x194>)
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d106      	bne.n	80019b6 <TIM_DeInit+0x76>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80019a8:	2101      	movs	r1, #1
 80019aa:	2008      	movs	r0, #8
 80019ac:	f7ff fd24 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80019b0:	2100      	movs	r1, #0
 80019b2:	2008      	movs	r0, #8
 80019b4:	e7dd      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM6)
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <TIM_DeInit+0x198>)
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d106      	bne.n	80019ca <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80019bc:	2101      	movs	r1, #1
 80019be:	2010      	movs	r0, #16
 80019c0:	f7ff fd1a 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2010      	movs	r0, #16
 80019c8:	e7d3      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM7)
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <TIM_DeInit+0x19c>)
 80019cc:	4298      	cmp	r0, r3
 80019ce:	d106      	bne.n	80019de <TIM_DeInit+0x9e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80019d0:	2101      	movs	r1, #1
 80019d2:	2020      	movs	r0, #32
 80019d4:	f7ff fd10 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80019d8:	2100      	movs	r1, #0
 80019da:	2020      	movs	r0, #32
 80019dc:	e7c9      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM8)
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <TIM_DeInit+0x1a0>)
 80019e0:	4298      	cmp	r0, r3
 80019e2:	d108      	bne.n	80019f6 <TIM_DeInit+0xb6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80019e4:	2101      	movs	r1, #1
 80019e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ea:	f7ff fcf9 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80019ee:	2100      	movs	r1, #0
 80019f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019f4:	e7b0      	b.n	8001958 <TIM_DeInit+0x18>
  else if (TIMx == TIM9)
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <TIM_DeInit+0x1a4>)
 80019f8:	4298      	cmp	r0, r3
 80019fa:	d108      	bne.n	8001a0e <TIM_DeInit+0xce>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80019fc:	2101      	movs	r1, #1
 80019fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a02:	f7ff fced 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001a06:	2100      	movs	r1, #0
 8001a08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a0c:	e7a4      	b.n	8001958 <TIM_DeInit+0x18>
  else if (TIMx == TIM10)
 8001a0e:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <TIM_DeInit+0x1a8>)
 8001a10:	4298      	cmp	r0, r3
 8001a12:	d108      	bne.n	8001a26 <TIM_DeInit+0xe6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001a14:	2101      	movs	r1, #1
 8001a16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a1a:	f7ff fce1 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a24:	e798      	b.n	8001958 <TIM_DeInit+0x18>
  else if (TIMx == TIM11) 
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <TIM_DeInit+0x1ac>)
 8001a28:	4298      	cmp	r0, r3
 8001a2a:	d108      	bne.n	8001a3e <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a32:	f7ff fcd5 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001a36:	2100      	movs	r1, #0
 8001a38:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a3c:	e78c      	b.n	8001958 <TIM_DeInit+0x18>
  else if (TIMx == TIM12)
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <TIM_DeInit+0x1b0>)
 8001a40:	4298      	cmp	r0, r3
 8001a42:	d106      	bne.n	8001a52 <TIM_DeInit+0x112>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001a44:	2101      	movs	r1, #1
 8001a46:	2040      	movs	r0, #64	; 0x40
 8001a48:	f7ff fcd6 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2040      	movs	r0, #64	; 0x40
 8001a50:	e78f      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM13) 
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <TIM_DeInit+0x1b4>)
 8001a54:	4298      	cmp	r0, r3
 8001a56:	d106      	bne.n	8001a66 <TIM_DeInit+0x126>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	2080      	movs	r0, #128	; 0x80
 8001a5c:	f7ff fccc 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001a60:	2100      	movs	r1, #0
 8001a62:	2080      	movs	r0, #128	; 0x80
 8001a64:	e785      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM14) 
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <TIM_DeInit+0x1b8>)
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	d108      	bne.n	8001a7e <TIM_DeInit+0x13e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a72:	f7ff fcc1 	bl	80013f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001a76:	2100      	movs	r1, #0
 8001a78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a7c:	e779      	b.n	8001972 <TIM_DeInit+0x32>
  else if (TIMx == TIM15)
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <TIM_DeInit+0x1bc>)
 8001a80:	4298      	cmp	r0, r3
 8001a82:	d108      	bne.n	8001a96 <TIM_DeInit+0x156>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8001a84:	2101      	movs	r1, #1
 8001a86:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a8a:	f7ff fca9 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a94:	e760      	b.n	8001958 <TIM_DeInit+0x18>
  else if (TIMx == TIM16)
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <TIM_DeInit+0x1c0>)
 8001a98:	4298      	cmp	r0, r3
 8001a9a:	d108      	bne.n	8001aae <TIM_DeInit+0x16e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aa2:	f7ff fc9d 	bl	80013e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aac:	e754      	b.n	8001958 <TIM_DeInit+0x18>
    if (TIMx == TIM17)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <TIM_DeInit+0x1c4>)
 8001ab0:	4298      	cmp	r0, r3
 8001ab2:	d108      	bne.n	8001ac6 <TIM_DeInit+0x186>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001aba:	f7ff fc91 	bl	80013e0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ac4:	e748      	b.n	8001958 <TIM_DeInit+0x18>
 8001ac6:	bd08      	pop	{r3, pc}
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800
 8001ad4:	40000c00 	.word	0x40000c00
 8001ad8:	40001000 	.word	0x40001000
 8001adc:	40001400 	.word	0x40001400
 8001ae0:	40013400 	.word	0x40013400
 8001ae4:	40014c00 	.word	0x40014c00
 8001ae8:	40015000 	.word	0x40015000
 8001aec:	40015400 	.word	0x40015400
 8001af0:	40001800 	.word	0x40001800
 8001af4:	40001c00 	.word	0x40001c00
 8001af8:	40002000 	.word	0x40002000
 8001afc:	40014000 	.word	0x40014000
 8001b00:	40014400 	.word	0x40014400
 8001b04:	40014800 	.word	0x40014800

08001b08 <TIM_TimeBaseInit>:
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <TIM_TimeBaseInit+0x8c>)
  tmpcr1 = TIMx->CR1;  
 8001b0a:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001b0c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 8001b0e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001b10:	d012      	beq.n	8001b38 <TIM_TimeBaseInit+0x30>
 8001b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b16:	4290      	cmp	r0, r2
 8001b18:	d00e      	beq.n	8001b38 <TIM_TimeBaseInit+0x30>
 8001b1a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b1e:	d00b      	beq.n	8001b38 <TIM_TimeBaseInit+0x30>
 8001b20:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001b24:	4290      	cmp	r0, r2
 8001b26:	d007      	beq.n	8001b38 <TIM_TimeBaseInit+0x30>
 8001b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b2c:	4290      	cmp	r0, r2
 8001b2e:	d003      	beq.n	8001b38 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b34:	4290      	cmp	r0, r2
 8001b36:	d103      	bne.n	8001b40 <TIM_TimeBaseInit+0x38>
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001b38:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001b3e:	4313      	orrs	r3, r2
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001b40:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <TIM_TimeBaseInit+0x90>)
 8001b42:	4290      	cmp	r0, r2
 8001b44:	d008      	beq.n	8001b58 <TIM_TimeBaseInit+0x50>
 8001b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b4a:	4290      	cmp	r0, r2
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001b4c:	bf1f      	itttt	ne
 8001b4e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001b52:	88ca      	ldrhne	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001b54:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001b56:	4313      	orrne	r3, r2
  TIMx->CR1 = tmpcr1;
 8001b58:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001b5a:	888b      	ldrh	r3, [r1, #4]
 8001b5c:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001b5e:	880b      	ldrh	r3, [r1, #0]
 8001b60:	8503      	strh	r3, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <TIM_TimeBaseInit+0x8c>)
 8001b64:	4298      	cmp	r0, r3
 8001b66:	d00f      	beq.n	8001b88 <TIM_TimeBaseInit+0x80>
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	4298      	cmp	r0, r3
 8001b6e:	d00b      	beq.n	8001b88 <TIM_TimeBaseInit+0x80>
 8001b70:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001b74:	4298      	cmp	r0, r3
 8001b76:	d007      	beq.n	8001b88 <TIM_TimeBaseInit+0x80>
 8001b78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b7c:	4298      	cmp	r0, r3
 8001b7e:	d003      	beq.n	8001b88 <TIM_TimeBaseInit+0x80>
 8001b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b84:	4298      	cmp	r0, r3
 8001b86:	d101      	bne.n	8001b8c <TIM_TimeBaseInit+0x84>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001b88:	7a0b      	ldrb	r3, [r1, #8]
 8001b8a:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	8283      	strh	r3, [r0, #20]
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40001000 	.word	0x40001000

08001b9c <TIM_OC1Init>:
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001b9c:	8c03      	ldrh	r3, [r0, #32]
{
 8001b9e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	0c1b      	lsrs	r3, r3, #16
 8001ba8:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001baa:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001bac:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001bae:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001bb0:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001bb2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001bba:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001bbc:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001bc0:	890d      	ldrh	r5, [r1, #8]
 8001bc2:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001bc4:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001bc6:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001bc8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001bca:	432b      	orrs	r3, r5
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001bcc:	4d14      	ldr	r5, [pc, #80]	; (8001c20 <TIM_OC1Init+0x84>)
  tmpcr2 =  TIMx->CR2;
 8001bce:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001bd0:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001bd2:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001bd4:	d00f      	beq.n	8001bf6 <TIM_OC1Init+0x5a>
 8001bd6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bda:	42a8      	cmp	r0, r5
 8001bdc:	d00b      	beq.n	8001bf6 <TIM_OC1Init+0x5a>
 8001bde:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001be2:	42a8      	cmp	r0, r5
 8001be4:	d007      	beq.n	8001bf6 <TIM_OC1Init+0x5a>
 8001be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bea:	42a8      	cmp	r0, r5
 8001bec:	d003      	beq.n	8001bf6 <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001bee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bf2:	42a8      	cmp	r0, r5
 8001bf4:	d10e      	bne.n	8001c14 <TIM_OC1Init+0x78>
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001bf6:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001bf8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001bfc:	432b      	orrs	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001bfe:	888d      	ldrh	r5, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001c00:	f023 0304 	bic.w	r3, r3, #4
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001c04:	432b      	orrs	r3, r5
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001c06:	89ce      	ldrh	r6, [r1, #14]
 8001c08:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001c0a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001c0e:	4335      	orrs	r5, r6
 8001c10:	432c      	orrs	r4, r5
 8001c12:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8001c14:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c16:	8302      	strh	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001c18:	88ca      	ldrh	r2, [r1, #6]
 8001c1a:	8682      	strh	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001c1c:	8403      	strh	r3, [r0, #32]
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
 8001c20:	40012c00 	.word	0x40012c00

08001c24 <TIM_OC2Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001c24:	8c03      	ldrh	r3, [r0, #32]
{
 8001c26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001c28:	f023 0310 	bic.w	r3, r3, #16
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c32:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001c34:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c36:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001c38:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001c3a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8001c3e:	0412      	lsls	r2, r2, #16
 8001c40:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001c42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001c46:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001c4a:	890d      	ldrh	r5, [r1, #8]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001c4c:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001c4e:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001c50:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001c52:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001c54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001c58:	4d11      	ldr	r5, [pc, #68]	; (8001ca0 <TIM_OC2Init+0x7c>)
  tmpcr2 =  TIMx->CR2;
 8001c5a:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001c5c:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001c5e:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001c60:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001c62:	d003      	beq.n	8001c6c <TIM_OC2Init+0x48>
 8001c64:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c68:	42a8      	cmp	r0, r5
 8001c6a:	d113      	bne.n	8001c94 <TIM_OC2Init+0x70>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001c6c:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8001c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001c72:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001c76:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8001c7a:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001c7c:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001c7e:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001c80:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001c84:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001c86:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001c8a:	4335      	orrs	r5, r6
 8001c8c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001c90:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001c92:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8001c94:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c96:	8302      	strh	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001c98:	88ca      	ldrh	r2, [r1, #6]
 8001c9a:	8702      	strh	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001c9c:	8403      	strh	r3, [r0, #32]
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ca0:	40012c00 	.word	0x40012c00

08001ca4 <TIM_OC3Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001ca4:	8c03      	ldrh	r3, [r0, #32]
{
 8001ca6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001cb2:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001cb4:	8882      	ldrh	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001cb6:	8b84      	ldrh	r4, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001cb8:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8001cba:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001cbe:	0424      	lsls	r4, r4, #16
 8001cc0:	0c24      	lsrs	r4, r4, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001cc2:	432c      	orrs	r4, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001cc8:	890d      	ldrh	r5, [r1, #8]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001cca:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001ccc:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001cce:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001cd0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001cd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cd6:	4d11      	ldr	r5, [pc, #68]	; (8001d1c <TIM_OC3Init+0x78>)
  tmpcr2 =  TIMx->CR2;
 8001cd8:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cda:	42a8      	cmp	r0, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001cdc:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cde:	d003      	beq.n	8001ce8 <TIM_OC3Init+0x44>
 8001ce0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ce4:	42a8      	cmp	r0, r5
 8001ce6:	d113      	bne.n	8001d10 <TIM_OC3Init+0x6c>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001ce8:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8001cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001cee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8001cf2:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8001cf6:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001cf8:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001cfa:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001cfc:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001d00:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8001d02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001d06:	4335      	orrs	r5, r6
 8001d08:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001d0c:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001d0e:	b292      	uxth	r2, r2
  TIMx->CR2 = tmpcr2;
 8001d10:	8082      	strh	r2, [r0, #4]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d12:	88ca      	ldrh	r2, [r1, #6]
  TIMx->CCMR2 = tmpccmrx;
 8001d14:	8384      	strh	r4, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d16:	8782      	strh	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001d18:	8403      	strh	r3, [r0, #32]
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <TIM_OC4Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8001d20:	8c03      	ldrh	r3, [r0, #32]
{
 8001d22:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8001d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001d2e:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001d30:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001d32:	8b82      	ldrh	r2, [r0, #28]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001d34:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8001d36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8001d3a:	0412      	lsls	r2, r2, #16
 8001d3c:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001d3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001d46:	890d      	ldrh	r5, [r1, #8]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001d48:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001d4a:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001d4c:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001d4e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001d50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001d54:	4d0b      	ldr	r5, [pc, #44]	; (8001d84 <TIM_OC4Init+0x64>)
  tmpcr2 =  TIMx->CR2;
 8001d56:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001d58:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001d5a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001d5c:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001d5e:	d003      	beq.n	8001d68 <TIM_OC4Init+0x48>
 8001d60:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d64:	42a8      	cmp	r0, r5
 8001d66:	d105      	bne.n	8001d74 <TIM_OC4Init+0x54>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001d68:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8001d6a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001d6e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001d72:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8001d74:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d76:	8382      	strh	r2, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001d78:	88ca      	ldrh	r2, [r1, #6]
 8001d7a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001d7e:	8403      	strh	r3, [r0, #32]
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00

08001d88 <TIM_BDTRConfig>:
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001d88:	884a      	ldrh	r2, [r1, #2]
 8001d8a:	880b      	ldrh	r3, [r1, #0]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	888a      	ldrh	r2, [r1, #4]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	88ca      	ldrh	r2, [r1, #6]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	890a      	ldrh	r2, [r1, #8]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	894a      	ldrh	r2, [r1, #10]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	898a      	ldrh	r2, [r1, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001da8:	4770      	bx	lr

08001daa <TIM_TimeBaseStructInit>:
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dae:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001db0:	2300      	movs	r3, #0
 8001db2:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001db4:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001db6:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001db8:	7203      	strb	r3, [r0, #8]
 8001dba:	4770      	bx	lr

08001dbc <TIM_OCStructInit>:
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001dc0:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001dc2:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8001dc4:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001dc6:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001dc8:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001dca:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001dcc:	81c3      	strh	r3, [r0, #14]
 8001dce:	4770      	bx	lr

08001dd0 <TIM_ICStructInit>:
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001dd0:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001dd2:	2201      	movs	r2, #1
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001dd4:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001dd6:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001dd8:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001dda:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001ddc:	8103      	strh	r3, [r0, #8]
 8001dde:	4770      	bx	lr

08001de0 <TIM_BDTRStructInit>:
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8001de0:	2300      	movs	r3, #0
 8001de2:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8001de4:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8001de6:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8001de8:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8001dea:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8001dec:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8001dee:	8183      	strh	r3, [r0, #12]
 8001df0:	4770      	bx	lr

08001df2 <TIM_Cmd>:
    TIMx->CR1 |= TIM_CR1_CEN;
 8001df2:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001df4:	b121      	cbz	r1, 8001e00 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001dfc:	8003      	strh	r3, [r0, #0]
 8001dfe:	4770      	bx	lr
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	e7f8      	b.n	8001dfc <TIM_Cmd+0xa>

08001e0a <TIM_CtrlPWMOutputs>:
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001e0a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001e0e:	b139      	cbz	r1, 8001e20 <TIM_CtrlPWMOutputs+0x16>
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e18:	b29b      	uxth	r3, r3
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001e1a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001e1e:	4770      	bx	lr
 8001e20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e24:	e7f9      	b.n	8001e1a <TIM_CtrlPWMOutputs+0x10>

08001e26 <TIM_GenerateEvent>:
  TIMx->EGR = TIM_EventSource;
 8001e26:	8281      	strh	r1, [r0, #20]
 8001e28:	4770      	bx	lr

08001e2a <TIM_DMAConfig>:
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8001e30:	4770      	bx	lr

08001e32 <TIM_DMACmd>:
    TIMx->DIER |= TIM_DMASource; 
 8001e32:	8983      	ldrh	r3, [r0, #12]
 8001e34:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001e36:	b112      	cbz	r2, 8001e3e <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
 8001e38:	4319      	orrs	r1, r3
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001e3a:	8181      	strh	r1, [r0, #12]
 8001e3c:	4770      	bx	lr
 8001e3e:	ea23 0101 	bic.w	r1, r3, r1
 8001e42:	e7fa      	b.n	8001e3a <TIM_DMACmd+0x8>

08001e44 <TIM_ITConfig>:
 8001e44:	f7ff bff5 	b.w	8001e32 <TIM_DMACmd>

08001e48 <TIM_InternalClockConfig>:
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001e48:	8903      	ldrh	r3, [r0, #8]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	8103      	strh	r3, [r0, #8]
 8001e54:	4770      	bx	lr

08001e56 <TIM_ITRxExternalClockConfig>:
  tmpsmcr = TIMx->SMCR;
 8001e56:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_InputTriggerSource;
 8001e60:	4319      	orrs	r1, r3
  TIMx->SMCR = tmpsmcr;
 8001e62:	8101      	strh	r1, [r0, #8]
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001e64:	8903      	ldrh	r3, [r0, #8]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f043 0307 	orr.w	r3, r3, #7
 8001e6c:	8103      	strh	r3, [r0, #8]
 8001e6e:	4770      	bx	lr

08001e70 <TIM_TIxExternalClockConfig>:
{
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	460d      	mov	r5, r1
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001e74:	2d60      	cmp	r5, #96	; 0x60
{
 8001e76:	4611      	mov	r1, r2
 8001e78:	4604      	mov	r4, r0
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001e7a:	f04f 0201 	mov.w	r2, #1
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001e7e:	d10e      	bne.n	8001e9e <TIM_TIxExternalClockConfig+0x2e>
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001e80:	f7ff fd22 	bl	80018c8 <TI2_Config>
  tmpsmcr = TIMx->SMCR;
 8001e84:	8921      	ldrh	r1, [r4, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001e86:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001e8a:	0409      	lsls	r1, r1, #16
 8001e8c:	0c09      	lsrs	r1, r1, #16
  tmpsmcr |= TIM_InputTriggerSource;
 8001e8e:	4329      	orrs	r1, r5
  TIMx->SMCR = tmpsmcr;
 8001e90:	8121      	strh	r1, [r4, #8]
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001e92:	8923      	ldrh	r3, [r4, #8]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f043 0307 	orr.w	r3, r3, #7
 8001e9a:	8123      	strh	r3, [r4, #8]
 8001e9c:	bd38      	pop	{r3, r4, r5, pc}
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001e9e:	f7ff fcdd 	bl	800185c <TI1_Config>
 8001ea2:	e7ef      	b.n	8001e84 <TIM_TIxExternalClockConfig+0x14>

08001ea4 <TIM_ETRConfig>:
{
 8001ea4:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8001ea6:	8904      	ldrh	r4, [r0, #8]
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001ea8:	430a      	orrs	r2, r1
  tmpsmcr &= SMCR_ETR_Mask;
 8001eaa:	b2e4      	uxtb	r4, r4
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001eac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001eb0:	431c      	orrs	r4, r3
 8001eb2:	b2a4      	uxth	r4, r4
  TIMx->SMCR = tmpsmcr;
 8001eb4:	8104      	strh	r4, [r0, #8]
 8001eb6:	bd10      	pop	{r4, pc}

08001eb8 <TIM_ETRClockMode1Config>:
{
 8001eb8:	b510      	push	{r4, lr}
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001eba:	f7ff fff3 	bl	8001ea4 <TIM_ETRConfig>
  tmpsmcr = TIMx->SMCR;
 8001ebe:	8903      	ldrh	r3, [r0, #8]
 8001ec0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8001ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8001ecc:	8103      	strh	r3, [r0, #8]
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <TIM_ETRClockMode2Config>:
{
 8001ed0:	b510      	push	{r4, lr}
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001ed2:	f7ff ffe7 	bl	8001ea4 <TIM_ETRConfig>
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001ed6:	8903      	ldrh	r3, [r0, #8]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ede:	8103      	strh	r3, [r0, #8]
 8001ee0:	bd10      	pop	{r4, pc}

08001ee2 <TIM_PrescalerConfig>:
  TIMx->PSC = Prescaler;
 8001ee2:	8501      	strh	r1, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode;
 8001ee4:	8282      	strh	r2, [r0, #20]
 8001ee6:	4770      	bx	lr

08001ee8 <TIM_CounterModeConfig>:
  tmpcr1 = TIMx->CR1;
 8001ee8:	8803      	ldrh	r3, [r0, #0]
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	0c1b      	lsrs	r3, r3, #16
  tmpcr1 |= TIM_CounterMode;
 8001ef2:	4319      	orrs	r1, r3
  TIMx->CR1 = tmpcr1;
 8001ef4:	8001      	strh	r1, [r0, #0]
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_SelectInputTrigger>:
  tmpsmcr = TIMx->SMCR;
 8001ef8:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_InputTriggerSource;
 8001f02:	4319      	orrs	r1, r3
  TIMx->SMCR = tmpsmcr;
 8001f04:	8101      	strh	r1, [r0, #8]
 8001f06:	4770      	bx	lr

08001f08 <TIM_EncoderInterfaceConfig>:
{
 8001f08:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr = TIMx->SMCR;
 8001f0a:	8906      	ldrh	r6, [r0, #8]
  tmpccmr1 = TIMx->CCMR1;
 8001f0c:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f0e:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001f10:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001f14:	f024 0403 	bic.w	r4, r4, #3
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001f18:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001f1c:	f026 0607 	bic.w	r6, r6, #7
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001f20:	0424      	lsls	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001f22:	042d      	lsls	r5, r5, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001f24:	0436      	lsls	r6, r6, #16
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001f26:	0c24      	lsrs	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001f28:	0c2d      	lsrs	r5, r5, #16
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001f2a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001f2e:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001f30:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001f34:	431d      	orrs	r5, r3
  tmpsmcr |= TIM_EncoderMode;
 8001f36:	4331      	orrs	r1, r6
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001f38:	f044 0401 	orr.w	r4, r4, #1
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001f3c:	b2ad      	uxth	r5, r5
  TIMx->SMCR = tmpsmcr;
 8001f3e:	8101      	strh	r1, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8001f40:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f42:	8405      	strh	r5, [r0, #32]
 8001f44:	bd70      	pop	{r4, r5, r6, pc}

08001f46 <TIM_ForcedOC1Config>:
  tmpccmr1 = TIMx->CCMR1;
 8001f46:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_ForcedAction;
 8001f50:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8001f52:	8301      	strh	r1, [r0, #24]
 8001f54:	4770      	bx	lr

08001f56 <TIM_ForcedOC2Config>:
  tmpccmr1 = TIMx->CCMR1;
 8001f56:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8001f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001f60:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001f64:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 8001f66:	8301      	strh	r1, [r0, #24]
 8001f68:	4770      	bx	lr

08001f6a <TIM_ForcedOC3Config>:
  tmpccmr2 = TIMx->CCMR2;
 8001f6a:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8001f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_ForcedAction;
 8001f74:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 8001f76:	8381      	strh	r1, [r0, #28]
 8001f78:	4770      	bx	lr

08001f7a <TIM_ForcedOC4Config>:
  tmpccmr2 = TIMx->CCMR2;
 8001f7a:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8001f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001f84:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001f88:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 8001f8a:	8381      	strh	r1, [r0, #28]
 8001f8c:	4770      	bx	lr

08001f8e <TIM_ARRPreloadConfig>:
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001f8e:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001f90:	b121      	cbz	r1, 8001f9c <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001f98:	8003      	strh	r3, [r0, #0]
 8001f9a:	4770      	bx	lr
 8001f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	e7f8      	b.n	8001f98 <TIM_ARRPreloadConfig+0xa>

08001fa6 <TIM_SelectCOM>:
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001fa6:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001fa8:	b121      	cbz	r1, 8001fb4 <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f043 0304 	orr.w	r3, r3, #4
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8001fb0:	8083      	strh	r3, [r0, #4]
 8001fb2:	4770      	bx	lr
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	e7f8      	b.n	8001fb0 <TIM_SelectCOM+0xa>

08001fbe <TIM_SelectCCDMA>:
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001fbe:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001fc0:	b121      	cbz	r1, 8001fcc <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8001fc8:	8083      	strh	r3, [r0, #4]
 8001fca:	4770      	bx	lr
 8001fcc:	f023 0308 	bic.w	r3, r3, #8
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	e7f8      	b.n	8001fc8 <TIM_SelectCCDMA+0xa>

08001fd6 <TIM_CCPreloadControl>:
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001fd6:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8001fd8:	b121      	cbz	r1, 8001fe4 <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8001fe0:	8083      	strh	r3, [r0, #4]
 8001fe2:	4770      	bx	lr
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	e7f8      	b.n	8001fe0 <TIM_CCPreloadControl+0xa>

08001fee <TIM_OC1PreloadConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8001fee:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001ff0:	f023 0308 	bic.w	r3, r3, #8
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_OCPreload;
 8001ff8:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8001ffa:	8301      	strh	r1, [r0, #24]
 8001ffc:	4770      	bx	lr

08001ffe <TIM_OC2PreloadConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8001ffe:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8002000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002008:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800200c:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 800200e:	8301      	strh	r1, [r0, #24]
 8002010:	4770      	bx	lr

08002012 <TIM_OC3PreloadConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8002012:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8002014:	f023 0308 	bic.w	r3, r3, #8
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_OCPreload;
 800201c:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 800201e:	8381      	strh	r1, [r0, #28]
 8002020:	4770      	bx	lr

08002022 <TIM_OC4PreloadConfig>:
  tmpccmr2 = TIMx->CCMR2;
 8002022:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8002024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800202c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002030:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 8002032:	8381      	strh	r1, [r0, #28]
 8002034:	4770      	bx	lr

08002036 <TIM_OC1FastConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8002036:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_OCFast;
 8002040:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8002042:	8301      	strh	r1, [r0, #24]
 8002044:	4770      	bx	lr

08002046 <TIM_OC2FastConfig>:
  tmpccmr1 = TIMx->CCMR1;
 8002046:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8002048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002050:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002054:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 8002056:	8301      	strh	r1, [r0, #24]
 8002058:	4770      	bx	lr

0800205a <TIM_OC3FastConfig>:
  tmpccmr2 = TIMx->CCMR2;
 800205a:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_OCFast;
 8002064:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 8002066:	8381      	strh	r1, [r0, #28]
 8002068:	4770      	bx	lr

0800206a <TIM_OC4FastConfig>:
  tmpccmr2 = TIMx->CCMR2;
 800206a:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 800206c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002074:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002078:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 800207a:	8381      	strh	r1, [r0, #28]
 800207c:	4770      	bx	lr

0800207e <TIM_ClearOC1Ref>:
  tmpccmr1 = TIMx->CCMR1;
 800207e:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8002080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002084:	041b      	lsls	r3, r3, #16
 8002086:	0c1b      	lsrs	r3, r3, #16
  tmpccmr1 |= TIM_OCClear;
 8002088:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 800208a:	8301      	strh	r1, [r0, #24]
 800208c:	4770      	bx	lr

0800208e <TIM_ClearOC2Ref>:
  tmpccmr1 = TIMx->CCMR1;
 800208e:	8b03      	ldrh	r3, [r0, #24]
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8002090:	f3c3 030e 	ubfx	r3, r3, #0, #15
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002094:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002098:	b289      	uxth	r1, r1
  TIMx->CCMR1 = tmpccmr1;
 800209a:	8301      	strh	r1, [r0, #24]
 800209c:	4770      	bx	lr

0800209e <TIM_ClearOC3Ref>:
  tmpccmr2 = TIMx->CCMR2;
 800209e:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 80020a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	0c1b      	lsrs	r3, r3, #16
  tmpccmr2 |= TIM_OCClear;
 80020a8:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 80020aa:	8381      	strh	r1, [r0, #28]
 80020ac:	4770      	bx	lr

080020ae <TIM_ClearOC4Ref>:
  tmpccmr2 = TIMx->CCMR2;
 80020ae:	8b83      	ldrh	r3, [r0, #28]
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 80020b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80020b4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80020b8:	b289      	uxth	r1, r1
  TIMx->CCMR2 = tmpccmr2;
 80020ba:	8381      	strh	r1, [r0, #28]
 80020bc:	4770      	bx	lr

080020be <TIM_OC1PolarityConfig>:
  tmpccer = TIMx->CCER;
 80020be:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80020c8:	4319      	orrs	r1, r3
  TIMx->CCER = tmpccer;
 80020ca:	8401      	strh	r1, [r0, #32]
 80020cc:	4770      	bx	lr

080020ce <TIM_OC1NPolarityConfig>:
  tmpccer = TIMx->CCER;
 80020ce:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 80020d0:	f023 0308 	bic.w	r3, r3, #8
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80020d8:	4319      	orrs	r1, r3
  TIMx->CCER = tmpccer;
 80020da:	8401      	strh	r1, [r0, #32]
 80020dc:	4770      	bx	lr

080020de <TIM_OC2PolarityConfig>:
  tmpccer = TIMx->CCER;
 80020de:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 80020e0:	f023 0320 	bic.w	r3, r3, #32
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80020e8:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80020ec:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 80020ee:	8401      	strh	r1, [r0, #32]
 80020f0:	4770      	bx	lr

080020f2 <TIM_OC2NPolarityConfig>:
  tmpccer = TIMx->CCER;
 80020f2:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 80020f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80020fc:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8002100:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 8002102:	8401      	strh	r1, [r0, #32]
 8002104:	4770      	bx	lr

08002106 <TIM_OC3PolarityConfig>:
  tmpccer = TIMx->CCER;
 8002106:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8002108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002110:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002114:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 8002116:	8401      	strh	r1, [r0, #32]
 8002118:	4770      	bx	lr

0800211a <TIM_OC3NPolarityConfig>:
  tmpccer = TIMx->CCER;
 800211a:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 800211c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002124:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002128:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 800212a:	8401      	strh	r1, [r0, #32]
 800212c:	4770      	bx	lr

0800212e <TIM_OC4PolarityConfig>:
  tmpccer = TIMx->CCER;
 800212e:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8002130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002138:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800213c:	b289      	uxth	r1, r1
  TIMx->CCER = tmpccer;
 800213e:	8401      	strh	r1, [r0, #32]
 8002140:	4770      	bx	lr

08002142 <TIM_CCxCmd>:
{
 8002142:	b510      	push	{r4, lr}
  tmp = CCER_CCE_Set << TIM_Channel;
 8002144:	2401      	movs	r4, #1
  TIMx->CCER &= (uint16_t)~ tmp;
 8002146:	8c03      	ldrh	r3, [r0, #32]
  tmp = CCER_CCE_Set << TIM_Channel;
 8002148:	408c      	lsls	r4, r1
  TIMx->CCER &= (uint16_t)~ tmp;
 800214a:	b29b      	uxth	r3, r3
 800214c:	ea23 0304 	bic.w	r3, r3, r4
 8002150:	8403      	strh	r3, [r0, #32]
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002152:	8c03      	ldrh	r3, [r0, #32]
 8002154:	fa02 f101 	lsl.w	r1, r2, r1
 8002158:	4319      	orrs	r1, r3
 800215a:	b289      	uxth	r1, r1
 800215c:	8401      	strh	r1, [r0, #32]
 800215e:	bd10      	pop	{r4, pc}

08002160 <TIM_CCxNCmd>:
{
 8002160:	b510      	push	{r4, lr}
  tmp = CCER_CCNE_Set << TIM_Channel;
 8002162:	2404      	movs	r4, #4
  TIMx->CCER &= (uint16_t) ~tmp;
 8002164:	8c03      	ldrh	r3, [r0, #32]
  tmp = CCER_CCNE_Set << TIM_Channel;
 8002166:	408c      	lsls	r4, r1
  TIMx->CCER &= (uint16_t) ~tmp;
 8002168:	b29b      	uxth	r3, r3
 800216a:	ea23 0304 	bic.w	r3, r3, r4
 800216e:	8403      	strh	r3, [r0, #32]
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002170:	8c03      	ldrh	r3, [r0, #32]
 8002172:	fa02 f101 	lsl.w	r1, r2, r1
 8002176:	4319      	orrs	r1, r3
 8002178:	b289      	uxth	r1, r1
 800217a:	8401      	strh	r1, [r0, #32]
 800217c:	bd10      	pop	{r4, pc}

0800217e <TIM_SelectOCxM>:
{
 800217e:	b530      	push	{r4, r5, lr}
  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8002180:	2501      	movs	r5, #1
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002182:	8c04      	ldrh	r4, [r0, #32]
  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8002184:	408d      	lsls	r5, r1
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002186:	b2a4      	uxth	r4, r4
 8002188:	ea24 0405 	bic.w	r4, r4, r5
  tmp += CCMR_Offset;
 800218c:	f100 0318 	add.w	r3, r0, #24
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002190:	8404      	strh	r4, [r0, #32]
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002192:	f021 0008 	bic.w	r0, r1, #8
 8002196:	b940      	cbnz	r0, 80021aa <TIM_SelectOCxM+0x2c>
    tmp += (TIM_Channel>>1);
 8002198:	0849      	lsrs	r1, r1, #1
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 800219a:	58c8      	ldr	r0, [r1, r3]
 800219c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80021a0:	50c8      	str	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80021a2:	58c8      	ldr	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80021a4:	4302      	orrs	r2, r0
 80021a6:	50ca      	str	r2, [r1, r3]
 80021a8:	bd30      	pop	{r4, r5, pc}
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80021aa:	3904      	subs	r1, #4
 80021ac:	f3c1 014e 	ubfx	r1, r1, #1, #15
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 80021b0:	58c8      	ldr	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80021b2:	0212      	lsls	r2, r2, #8
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 80021b4:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 80021b8:	50c8      	str	r0, [r1, r3]
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80021ba:	58c8      	ldr	r0, [r1, r3]
 80021bc:	b292      	uxth	r2, r2
 80021be:	e7f1      	b.n	80021a4 <TIM_SelectOCxM+0x26>

080021c0 <TIM_UpdateDisableConfig>:
    TIMx->CR1 |= TIM_CR1_UDIS;
 80021c0:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80021c2:	b121      	cbz	r1, 80021ce <TIM_UpdateDisableConfig+0xe>
    TIMx->CR1 |= TIM_CR1_UDIS;
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f043 0302 	orr.w	r3, r3, #2
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80021ca:	8003      	strh	r3, [r0, #0]
 80021cc:	4770      	bx	lr
 80021ce:	f023 0302 	bic.w	r3, r3, #2
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	e7f8      	b.n	80021ca <TIM_UpdateDisableConfig+0xa>

080021d8 <TIM_UpdateRequestConfig>:
    TIMx->CR1 |= TIM_CR1_URS;
 80021d8:	8803      	ldrh	r3, [r0, #0]
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80021da:	b121      	cbz	r1, 80021e6 <TIM_UpdateRequestConfig+0xe>
    TIMx->CR1 |= TIM_CR1_URS;
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f043 0304 	orr.w	r3, r3, #4
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 80021e2:	8003      	strh	r3, [r0, #0]
 80021e4:	4770      	bx	lr
 80021e6:	f023 0304 	bic.w	r3, r3, #4
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	e7f8      	b.n	80021e2 <TIM_UpdateRequestConfig+0xa>

080021f0 <TIM_SelectHallSensor>:
    TIMx->CR2 |= TIM_CR2_TI1S;
 80021f0:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 80021f2:	b121      	cbz	r1, 80021fe <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 80021fa:	8083      	strh	r3, [r0, #4]
 80021fc:	4770      	bx	lr
 80021fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	e7f8      	b.n	80021fa <TIM_SelectHallSensor+0xa>

08002208 <TIM_SelectOnePulseMode>:
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8002208:	8803      	ldrh	r3, [r0, #0]
 800220a:	f023 0308 	bic.w	r3, r3, #8
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= TIM_OPMode;
 8002214:	8803      	ldrh	r3, [r0, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4319      	orrs	r1, r3
 800221a:	8001      	strh	r1, [r0, #0]
 800221c:	4770      	bx	lr

0800221e <TIM_SelectOutputTrigger>:
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 800221e:	8883      	ldrh	r3, [r0, #4]
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	8083      	strh	r3, [r0, #4]
  TIMx->CR2 |=  TIM_TRGOSource;
 800222a:	8883      	ldrh	r3, [r0, #4]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4319      	orrs	r1, r3
 8002230:	8081      	strh	r1, [r0, #4]
 8002232:	4770      	bx	lr

08002234 <TIM_SelectSlaveMode>:
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8002234:	8903      	ldrh	r3, [r0, #8]
 8002236:	f023 0307 	bic.w	r3, r3, #7
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_SlaveMode;
 8002240:	8903      	ldrh	r3, [r0, #8]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4319      	orrs	r1, r3
 8002246:	8101      	strh	r1, [r0, #8]
 8002248:	4770      	bx	lr

0800224a <TIM_SelectMasterSlaveMode>:
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 800224a:	8903      	ldrh	r3, [r0, #8]
 800224c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002256:	8903      	ldrh	r3, [r0, #8]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4319      	orrs	r1, r3
 800225c:	8101      	strh	r1, [r0, #8]
 800225e:	4770      	bx	lr

08002260 <TIM_SetCounter>:
  TIMx->CNT = Counter;
 8002260:	8481      	strh	r1, [r0, #36]	; 0x24
 8002262:	4770      	bx	lr

08002264 <TIM_SetAutoreload>:
  TIMx->ARR = Autoreload;
 8002264:	8581      	strh	r1, [r0, #44]	; 0x2c
 8002266:	4770      	bx	lr

08002268 <TIM_SetCompare1>:
  TIMx->CCR1 = Compare1;
 8002268:	8681      	strh	r1, [r0, #52]	; 0x34
 800226a:	4770      	bx	lr

0800226c <TIM_SetCompare2>:
  TIMx->CCR2 = Compare2;
 800226c:	8701      	strh	r1, [r0, #56]	; 0x38
 800226e:	4770      	bx	lr

08002270 <TIM_SetCompare3>:
  TIMx->CCR3 = Compare3;
 8002270:	8781      	strh	r1, [r0, #60]	; 0x3c
 8002272:	4770      	bx	lr

08002274 <TIM_SetCompare4>:
  TIMx->CCR4 = Compare4;
 8002274:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8002278:	4770      	bx	lr

0800227a <TIM_SetIC1Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800227a:	8b03      	ldrh	r3, [r0, #24]
 800227c:	f023 030c 	bic.w	r3, r3, #12
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= TIM_ICPSC;
 8002286:	8b03      	ldrh	r3, [r0, #24]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4319      	orrs	r1, r3
 800228c:	8301      	strh	r1, [r0, #24]
 800228e:	4770      	bx	lr

08002290 <TIM_SetIC2Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002290:	8b03      	ldrh	r3, [r0, #24]
 8002292:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800229c:	8b03      	ldrh	r3, [r0, #24]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80022a4:	b289      	uxth	r1, r1
 80022a6:	8301      	strh	r1, [r0, #24]
 80022a8:	4770      	bx	lr

080022aa <TIM_PWMIConfig>:
{
 80022aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ac:	460c      	mov	r4, r1
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80022ae:	8849      	ldrh	r1, [r1, #2]
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80022b0:	88a2      	ldrh	r2, [r4, #4]
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80022b2:	2900      	cmp	r1, #0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80022b4:	f8b4 e000 	ldrh.w	lr, [r4]
    icoppositepolarity = TIM_ICPolarity_Rising;
 80022b8:	bf0c      	ite	eq
 80022ba:	2602      	moveq	r6, #2
 80022bc:	2600      	movne	r6, #0
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80022be:	2a01      	cmp	r2, #1
    icoppositeselection = TIM_ICSelection_DirectTI;
 80022c0:	bf0c      	ite	eq
 80022c2:	2702      	moveq	r7, #2
 80022c4:	2701      	movne	r7, #1
 80022c6:	8923      	ldrh	r3, [r4, #8]
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80022c8:	f1be 0f00 	cmp.w	lr, #0
 80022cc:	d10e      	bne.n	80022ec <TIM_PWMIConfig+0x42>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80022ce:	f7ff fac5 	bl	800185c <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80022d2:	88e1      	ldrh	r1, [r4, #6]
 80022d4:	f7ff ffd1 	bl	800227a <TIM_SetIC1Prescaler>
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80022d8:	4631      	mov	r1, r6
 80022da:	8923      	ldrh	r3, [r4, #8]
 80022dc:	463a      	mov	r2, r7
 80022de:	f7ff faf3 	bl	80018c8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80022e2:	88e1      	ldrh	r1, [r4, #6]
}
 80022e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80022e8:	f7ff bfd2 	b.w	8002290 <TIM_SetIC2Prescaler>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80022ec:	f7ff faec 	bl	80018c8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80022f0:	88e1      	ldrh	r1, [r4, #6]
 80022f2:	f7ff ffcd 	bl	8002290 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80022f6:	4631      	mov	r1, r6
 80022f8:	8923      	ldrh	r3, [r4, #8]
 80022fa:	463a      	mov	r2, r7
 80022fc:	f7ff faae 	bl	800185c <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002300:	88e1      	ldrh	r1, [r4, #6]
}
 8002302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002306:	f7ff bfb8 	b.w	800227a <TIM_SetIC1Prescaler>

0800230a <TIM_SetIC3Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800230a:	8b83      	ldrh	r3, [r0, #28]
 800230c:	f023 030c 	bic.w	r3, r3, #12
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	0c1b      	lsrs	r3, r3, #16
 8002314:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= TIM_ICPSC;
 8002316:	8b83      	ldrh	r3, [r0, #28]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4319      	orrs	r1, r3
 800231c:	8381      	strh	r1, [r0, #28]
 800231e:	4770      	bx	lr

08002320 <TIM_SetIC4Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8002320:	8b83      	ldrh	r3, [r0, #28]
 8002322:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800232c:	8b83      	ldrh	r3, [r0, #28]
 800232e:	b29b      	uxth	r3, r3
 8002330:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002334:	b289      	uxth	r1, r1
 8002336:	8381      	strh	r1, [r0, #28]
 8002338:	4770      	bx	lr

0800233a <TIM_ICInit>:
{
 800233a:	b570      	push	{r4, r5, r6, lr}
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800233c:	880e      	ldrh	r6, [r1, #0]
{
 800233e:	460d      	mov	r5, r1
 8002340:	890b      	ldrh	r3, [r1, #8]
 8002342:	888a      	ldrh	r2, [r1, #4]
 8002344:	4604      	mov	r4, r0
 8002346:	8849      	ldrh	r1, [r1, #2]
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002348:	b936      	cbnz	r6, 8002358 <TIM_ICInit+0x1e>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800234a:	f7ff fa87 	bl	800185c <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800234e:	88e9      	ldrh	r1, [r5, #6]
}
 8002350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002354:	f7ff bf91 	b.w	800227a <TIM_SetIC1Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002358:	2e04      	cmp	r6, #4
 800235a:	d106      	bne.n	800236a <TIM_ICInit+0x30>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800235c:	f7ff fab4 	bl	80018c8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002360:	88e9      	ldrh	r1, [r5, #6]
}
 8002362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002366:	f7ff bf93 	b.w	8002290 <TIM_SetIC2Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800236a:	2e08      	cmp	r6, #8
 800236c:	88ed      	ldrh	r5, [r5, #6]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800236e:	8c00      	ldrh	r0, [r0, #32]
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002370:	d139      	bne.n	80023e6 <TIM_ICInit+0xac>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002372:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002376:	0400      	lsls	r0, r0, #16
 8002378:	0c00      	lsrs	r0, r0, #16
 800237a:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 800237c:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 800237e:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002380:	b2b6      	uxth	r6, r6
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002382:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8002386:	4332      	orrs	r2, r6
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002388:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800238c:	4a34      	ldr	r2, [pc, #208]	; (8002460 <TIM_ICInit+0x126>)
  tmpccer = TIMx->CCER;
 800238e:	b280      	uxth	r0, r0
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002390:	4294      	cmp	r4, r2
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002392:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002394:	d012      	beq.n	80023bc <TIM_ICInit+0x82>
 8002396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239a:	4294      	cmp	r4, r2
 800239c:	d00e      	beq.n	80023bc <TIM_ICInit+0x82>
 800239e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80023a2:	d00b      	beq.n	80023bc <TIM_ICInit+0x82>
 80023a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023a8:	4294      	cmp	r4, r2
 80023aa:	d007      	beq.n	80023bc <TIM_ICInit+0x82>
 80023ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b0:	4294      	cmp	r4, r2
 80023b2:	d003      	beq.n	80023bc <TIM_ICInit+0x82>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80023b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b8:	4294      	cmp	r4, r2
 80023ba:	d10e      	bne.n	80023da <TIM_ICInit+0xa0>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 80023bc:	f420 7200 	bic.w	r2, r0, #512	; 0x200
 80023c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80023c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023c8:	b292      	uxth	r2, r2
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023ca:	83a3      	strh	r3, [r4, #28]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80023cc:	4629      	mov	r1, r5
  TIMx->CCER = tmpccer;
 80023ce:	8422      	strh	r2, [r4, #32]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80023d0:	4620      	mov	r0, r4
}
 80023d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80023d6:	f7ff bf98 	b.w	800230a <TIM_SetIC3Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80023da:	f420 6220 	bic.w	r2, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 80023de:	430a      	orrs	r2, r1
 80023e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e4:	e7f1      	b.n	80023ca <TIM_ICInit+0x90>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80023e6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80023ea:	0400      	lsls	r0, r0, #16
 80023ec:	0c00      	lsrs	r0, r0, #16
 80023ee:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023f0:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80023f2:	031b      	lsls	r3, r3, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80023f4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80023f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80023fc:	0536      	lsls	r6, r6, #20
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80023fe:	4a18      	ldr	r2, [pc, #96]	; (8002460 <TIM_ICInit+0x126>)
  tmpccer = TIMx->CCER;
 8002400:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002402:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002404:	4333      	orrs	r3, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002406:	4294      	cmp	r4, r2
  tmpccer = TIMx->CCER;
 8002408:	b280      	uxth	r0, r0
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800240a:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800240c:	d012      	beq.n	8002434 <TIM_ICInit+0xfa>
 800240e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002412:	4294      	cmp	r4, r2
 8002414:	d00e      	beq.n	8002434 <TIM_ICInit+0xfa>
 8002416:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800241a:	d00b      	beq.n	8002434 <TIM_ICInit+0xfa>
 800241c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002420:	4294      	cmp	r4, r2
 8002422:	d007      	beq.n	8002434 <TIM_ICInit+0xfa>
 8002424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002428:	4294      	cmp	r4, r2
 800242a:	d003      	beq.n	8002434 <TIM_ICInit+0xfa>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800242c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002430:	4294      	cmp	r4, r2
 8002432:	d10e      	bne.n	8002452 <TIM_ICInit+0x118>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8002434:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
 8002438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800243c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002440:	b292      	uxth	r2, r2
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002442:	83a3      	strh	r3, [r4, #28]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002444:	4629      	mov	r1, r5
  TIMx->CCER = tmpccer;
 8002446:	8422      	strh	r2, [r4, #32]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002448:	4620      	mov	r0, r4
}
 800244a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800244e:	f7ff bf67 	b.w	8002320 <TIM_SetIC4Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8002452:	f647 52ff 	movw	r2, #32255	; 0x7dff
 8002456:	4002      	ands	r2, r0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002458:	430a      	orrs	r2, r1
 800245a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800245e:	e7f0      	b.n	8002442 <TIM_ICInit+0x108>
 8002460:	40012c00 	.word	0x40012c00

08002464 <TIM_SetClockDivision>:
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8002464:	8803      	ldrh	r3, [r0, #0]
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= TIM_CKD;
 8002470:	8803      	ldrh	r3, [r0, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4319      	orrs	r1, r3
 8002476:	8001      	strh	r1, [r0, #0]
 8002478:	4770      	bx	lr

0800247a <TIM_GetCapture1>:
  return TIMx->CCR1;
 800247a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 800247c:	b280      	uxth	r0, r0
 800247e:	4770      	bx	lr

08002480 <TIM_GetCapture2>:
  return TIMx->CCR2;
 8002480:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8002482:	b280      	uxth	r0, r0
 8002484:	4770      	bx	lr

08002486 <TIM_GetCapture3>:
  return TIMx->CCR3;
 8002486:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8002488:	b280      	uxth	r0, r0
 800248a:	4770      	bx	lr

0800248c <TIM_GetCapture4>:
  return TIMx->CCR4;
 800248c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8002490:	b280      	uxth	r0, r0
 8002492:	4770      	bx	lr

08002494 <TIM_GetCounter>:
  return TIMx->CNT;
 8002494:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8002496:	b280      	uxth	r0, r0
 8002498:	4770      	bx	lr

0800249a <TIM_GetPrescaler>:
  return TIMx->PSC;
 800249a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800249c:	b280      	uxth	r0, r0
 800249e:	4770      	bx	lr

080024a0 <TIM_GetFlagStatus>:
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80024a0:	8a03      	ldrh	r3, [r0, #16]
 80024a2:	4219      	tst	r1, r3
}
 80024a4:	bf14      	ite	ne
 80024a6:	2001      	movne	r0, #1
 80024a8:	2000      	moveq	r0, #0
 80024aa:	4770      	bx	lr

080024ac <TIM_ClearFlag>:
 80024ac:	43c9      	mvns	r1, r1
 80024ae:	b289      	uxth	r1, r1
 80024b0:	8201      	strh	r1, [r0, #16]
 80024b2:	4770      	bx	lr

080024b4 <TIM_GetITStatus>:
  itstatus = TIMx->SR & TIM_IT;
 80024b4:	8a03      	ldrh	r3, [r0, #16]
  itenable = TIMx->DIER & TIM_IT;
 80024b6:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80024b8:	ea11 0003 	ands.w	r0, r1, r3
  itenable = TIMx->DIER & TIM_IT;
 80024bc:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80024be:	d003      	beq.n	80024c8 <TIM_GetITStatus+0x14>
 80024c0:	4211      	tst	r1, r2
 80024c2:	bf14      	ite	ne
 80024c4:	2001      	movne	r0, #1
 80024c6:	2000      	moveq	r0, #0
}
 80024c8:	4770      	bx	lr

080024ca <TIM_ClearITPendingBit>:
  TIMx->SR = (uint16_t)~TIM_IT;
 80024ca:	43c9      	mvns	r1, r1
 80024cc:	b289      	uxth	r1, r1
 80024ce:	8201      	strh	r1, [r0, #16]
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80024d4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <NVIC_PriorityGroupConfig+0x10>)
 80024da:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80024de:	60d8      	str	r0, [r3, #12]
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80024e8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80024ea:	78c2      	ldrb	r2, [r0, #3]
 80024ec:	7803      	ldrb	r3, [r0, #0]
 80024ee:	b1e2      	cbz	r2, 800252a <NVIC_Init+0x42>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <NVIC_Init+0x54>)
 80024f2:	68d1      	ldr	r1, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80024f4:	7842      	ldrb	r2, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80024f6:	43c9      	mvns	r1, r1
 80024f8:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 80024fc:	f1c1 0404 	rsb	r4, r1, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002500:	40a2      	lsls	r2, r4
    tmpsub = tmpsub >> tmppriority;
 8002502:	240f      	movs	r4, #15
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002504:	7880      	ldrb	r0, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 8002506:	fa24 f101 	lsr.w	r1, r4, r1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800250a:	4001      	ands	r1, r0
 800250c:	430a      	orrs	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800250e:	490c      	ldr	r1, [pc, #48]	; (8002540 <NVIC_Init+0x58>)
    tmppriority = tmppriority << 0x04;
 8002510:	0112      	lsls	r2, r2, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002512:	18c8      	adds	r0, r1, r3
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800251a:	f003 001f 	and.w	r0, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800251e:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002520:	2301      	movs	r3, #1
 8002522:	4083      	lsls	r3, r0
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002524:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002528:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800252a:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800252c:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002536:	3220      	adds	r2, #32
 8002538:	4901      	ldr	r1, [pc, #4]	; (8002540 <NVIC_Init+0x58>)
 800253a:	e7f3      	b.n	8002524 <NVIC_Init+0x3c>
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	e000e100 	.word	0xe000e100

08002544 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8002544:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8002548:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800254c:	4b01      	ldr	r3, [pc, #4]	; (8002554 <NVIC_SetVectorTable+0x10>)
 800254e:	4301      	orrs	r1, r0
 8002550:	6099      	str	r1, [r3, #8]
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800255a:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 800255c:	b111      	cbz	r1, 8002564 <NVIC_SystemLPConfig+0xc>
    SCB->SCR |= LowPowerMode;
 800255e:	4310      	orrs	r0, r2
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8002560:	6118      	str	r0, [r3, #16]
 8002562:	4770      	bx	lr
 8002564:	ea22 0000 	bic.w	r0, r2, r0
 8002568:	e7fa      	b.n	8002560 <NVIC_SystemLPConfig+0x8>
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8002572:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	bf0c      	ite	eq
 8002578:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800257c:	f022 0204 	bicne.w	r2, r2, #4
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4770      	bx	lr
 8002584:	e000e010 	.word	0xe000e010

08002588 <motor_cb(roberto_msgs::MotorState const&)>:
__IO bool shuttingDown = false;
__IO bool waitForServos = false;

bool spinningAutonomously = false;

void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 8002588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(!initialized)
 800258c:	4c92      	ldr	r4, [pc, #584]	; (80027d8 <motor_cb(roberto_msgs::MotorState const&)+0x250>)
void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 800258e:	4607      	mov	r7, r0
  if(!initialized)
 8002590:	7823      	ldrb	r3, [r4, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80b6 	beq.w	8002704 <motor_cb(roberto_msgs::MotorState const&)+0x17c>
    return;
  lastMsg = millis();
 8002598:	f7fd ff9c 	bl	80004d4 <millis>
  uint8_t intMode = cmd_msg.mode;
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 800259c:	4b8f      	ldr	r3, [pc, #572]	; (80027dc <motor_cb(roberto_msgs::MotorState const&)+0x254>)
  uint8_t intMode = cmd_msg.mode;
 800259e:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
  if(currentMode != intMode){
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4542      	cmp	r2, r8
    waitForServos = true;
 80025a8:	bf1c      	itt	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	7223      	strbne	r3, [r4, #8]
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
 80025ae:	f1b8 0f01 	cmp.w	r8, #1
  lastMsg = millis();
 80025b2:	6060      	str	r0, [r4, #4]
  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
 80025b4:	f040 80ca 	bne.w	800274c <motor_cb(roberto_msgs::MotorState const&)+0x1c4>
    float speedMult[2] = {1,1};
    float angle[2] = {0, 0};
    if (cmd_msg.heading_angle != 0){
 80025b8:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80025bc:	2100      	movs	r1, #0
 80025be:	4648      	mov	r0, r9
 80025c0:	f006 fcee 	bl	8008fa0 <__aeabi_fcmpeq>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	f040 80a4 	bne.w	8002712 <motor_cb(roberto_msgs::MotorState const&)+0x18a>
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
 80025ca:	4648      	mov	r0, r9
 80025cc:	f005 feca 	bl	8008364 <__aeabi_f2d>
 80025d0:	a37d      	add	r3, pc, #500	; (adr r3, 80027c8 <motor_cb(roberto_msgs::MotorState const&)+0x240>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f005 ff19 	bl	800840c <__aeabi_dmul>
 80025da:	2200      	movs	r2, #0
 80025dc:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <motor_cb(roberto_msgs::MotorState const&)+0x258>)
 80025de:	f006 f83f 	bl	8008660 <__aeabi_ddiv>
 80025e2:	f003 f9a9 	bl	8005938 <sin>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	a179      	add	r1, pc, #484	; (adr r1, 80027d0 <motor_cb(roberto_msgs::MotorState const&)+0x248>)
 80025ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025f0:	f006 f836 	bl	8008660 <__aeabi_ddiv>
 80025f4:	f006 f9e2 	bl	80089bc <__aeabi_d2f>
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
 80025f8:	4601      	mov	r1, r0
 80025fa:	9001      	str	r0, [sp, #4]
 80025fc:	f006 fa34 	bl	8008a68 <__addsf3>
 8002600:	68e6      	ldr	r6, [r4, #12]
 8002602:	4605      	mov	r5, r0
 8002604:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002608:	4630      	mov	r0, r6
 800260a:	f006 fb35 	bl	8008c78 <__aeabi_fmul>
 800260e:	6921      	ldr	r1, [r4, #16]
 8002610:	f006 fa2a 	bl	8008a68 <__addsf3>
 8002614:	4683      	mov	fp, r0
 8002616:	4601      	mov	r1, r0
 8002618:	4628      	mov	r0, r5
 800261a:	f006 fa23 	bl	8008a64 <__aeabi_fsub>
 800261e:	4601      	mov	r1, r0
 8002620:	4628      	mov	r0, r5
 8002622:	f006 fbdd 	bl	8008de0 <__aeabi_fdiv>
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
 8002626:	4659      	mov	r1, fp
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
 8002628:	4682      	mov	sl, r0
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
 800262a:	4628      	mov	r0, r5
 800262c:	f006 fa1c 	bl	8008a68 <__addsf3>
 8002630:	4601      	mov	r1, r0
 8002632:	4628      	mov	r0, r5
 8002634:	f006 fbd4 	bl	8008de0 <__aeabi_fdiv>
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
 8002638:	9b01      	ldr	r3, [sp, #4]
 800263a:	4631      	mov	r1, r6
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
 800263c:	4683      	mov	fp, r0
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
 800263e:	4618      	mov	r0, r3
 8002640:	f006 fa12 	bl	8008a68 <__addsf3>
 8002644:	4601      	mov	r1, r0
 8002646:	4630      	mov	r0, r6
 8002648:	f006 fbca 	bl	8008de0 <__aeabi_fdiv>
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 800264c:	f003 f9bc 	bl	80059c8 <atanf>
 8002650:	4601      	mov	r1, r0
 8002652:	4648      	mov	r0, r9
 8002654:	f006 fa08 	bl	8008a68 <__addsf3>
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
 8002658:	9b01      	ldr	r3, [sp, #4]
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
 800265a:	4605      	mov	r5, r0
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
 800265c:	4619      	mov	r1, r3
 800265e:	4630      	mov	r0, r6
 8002660:	f006 fa00 	bl	8008a64 <__aeabi_fsub>
 8002664:	4601      	mov	r1, r0
 8002666:	4630      	mov	r0, r6
 8002668:	f006 fbba 	bl	8008de0 <__aeabi_fdiv>
 800266c:	f003 f9ac 	bl	80059c8 <atanf>
 8002670:	4601      	mov	r1, r0
 8002672:	4648      	mov	r0, r9
 8002674:	f006 f9f8 	bl	8008a68 <__addsf3>
    }else{
      angle[0] = 0;
      angle[1] = 0;
    }

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 8002678:	495a      	ldr	r1, [pc, #360]	; (80027e4 <motor_cb(roberto_msgs::MotorState const&)+0x25c>)
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
 800267a:	4606      	mov	r6, r0
    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 800267c:	4628      	mov	r0, r5
 800267e:	f006 fcb7 	bl	8008ff0 <__aeabi_fcmpgt>
 8002682:	2800      	cmp	r0, #0
 8002684:	d141      	bne.n	800270a <motor_cb(roberto_msgs::MotorState const&)+0x182>
 8002686:	4958      	ldr	r1, [pc, #352]	; (80027e8 <motor_cb(roberto_msgs::MotorState const&)+0x260>)
 8002688:	4628      	mov	r0, r5
 800268a:	f006 fc93 	bl	8008fb4 <__aeabi_fcmplt>
 800268e:	2800      	cmp	r0, #0
 8002690:	d13d      	bne.n	800270e <motor_cb(roberto_msgs::MotorState const&)+0x186>
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);
 8002692:	4954      	ldr	r1, [pc, #336]	; (80027e4 <motor_cb(roberto_msgs::MotorState const&)+0x25c>)
 8002694:	4630      	mov	r0, r6
 8002696:	f006 fcab 	bl	8008ff0 <__aeabi_fcmpgt>
 800269a:	2800      	cmp	r0, #0
 800269c:	d13f      	bne.n	800271e <motor_cb(roberto_msgs::MotorState const&)+0x196>
 800269e:	4952      	ldr	r1, [pc, #328]	; (80027e8 <motor_cb(roberto_msgs::MotorState const&)+0x260>)
 80026a0:	4630      	mov	r0, r6
 80026a2:	f006 fc87 	bl	8008fb4 <__aeabi_fcmplt>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d13b      	bne.n	8002722 <motor_cb(roberto_msgs::MotorState const&)+0x19a>

    if(cmd_msg.heading_angle > 0){
 80026aa:	2100      	movs	r1, #0
 80026ac:	4648      	mov	r0, r9
 80026ae:	f006 fc9f 	bl	8008ff0 <__aeabi_fcmpgt>
      servo_left->setReference(angle[0]+135);
 80026b2:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80026b6:	494d      	ldr	r1, [pc, #308]	; (80027ec <motor_cb(roberto_msgs::MotorState const&)+0x264>)
    if(cmd_msg.heading_angle > 0){
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d034      	beq.n	8002726 <motor_cb(roberto_msgs::MotorState const&)+0x19e>
      servo_left->setReference(angle[0]+135);
 80026bc:	4628      	mov	r0, r5
 80026be:	f006 f9d3 	bl	8008a68 <__addsf3>
 80026c2:	f8d9 3000 	ldr.w	r3, [r9]
 80026c6:	4601      	mov	r1, r0
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4648      	mov	r0, r9
 80026cc:	4798      	blx	r3
      servo_right->setReference(-angle[1]+135);
 80026ce:	4631      	mov	r1, r6
 80026d0:	4846      	ldr	r0, [pc, #280]	; (80027ec <motor_cb(roberto_msgs::MotorState const&)+0x264>)
 80026d2:	f006 f9c7 	bl	8008a64 <__aeabi_fsub>
 80026d6:	69a5      	ldr	r5, [r4, #24]
 80026d8:	4601      	mov	r1, r0
 80026da:	4628      	mov	r0, r5
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
    }else{
      servo_left->setReference(angle[1]+135);
      servo_right->setReference(-angle[0]+135);
 80026e0:	4798      	blx	r3
    }
    motorCmd[0] = cmd_msg.speed*speedMult[0];
 80026e2:	6a3e      	ldr	r6, [r7, #32]
 80026e4:	4651      	mov	r1, sl
 80026e6:	4630      	mov	r0, r6
 80026e8:	f006 fac6 	bl	8008c78 <__aeabi_fmul>
    motorCmd[1] = cmd_msg.speed*speedMult[1];
 80026ec:	4659      	mov	r1, fp
    motorCmd[0] = cmd_msg.speed*speedMult[0];
 80026ee:	4605      	mov	r5, r0
 80026f0:	61e0      	str	r0, [r4, #28]
    motorCmd[1] = cmd_msg.speed*speedMult[1];
 80026f2:	4630      	mov	r0, r6
 80026f4:	f006 fac0 	bl	8008c78 <__aeabi_fmul>
    motorCmd[2] = cmd_msg.speed*speedMult[1];
    motorCmd[3] = cmd_msg.speed*speedMult[0];
 80026f8:	62a5      	str	r5, [r4, #40]	; 0x28
    motorCmd[1] = cmd_msg.speed*speedMult[1];
 80026fa:	6220      	str	r0, [r4, #32]
    motorCmd[2] = cmd_msg.speed*speedMult[1];
 80026fc:	6260      	str	r0, [r4, #36]	; 0x24
    motorCmd[0] = cmd_msg.speed;  //FR
    motorCmd[1] = -cmd_msg.speed; //FL
    motorCmd[2] = cmd_msg.speed; //RL
    motorCmd[3] = -cmd_msg.speed;  //RR
  }
  currentMode = intMode;
 80026fe:	9b00      	ldr	r3, [sp, #0]
 8002700:	f883 8000 	strb.w	r8, [r3]
}
 8002704:	b003      	add	sp, #12
 8002706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 800270a:	4d36      	ldr	r5, [pc, #216]	; (80027e4 <motor_cb(roberto_msgs::MotorState const&)+0x25c>)
 800270c:	e7c1      	b.n	8002692 <motor_cb(roberto_msgs::MotorState const&)+0x10a>
 800270e:	4d36      	ldr	r5, [pc, #216]	; (80027e8 <motor_cb(roberto_msgs::MotorState const&)+0x260>)
 8002710:	e7bf      	b.n	8002692 <motor_cb(roberto_msgs::MotorState const&)+0x10a>
    float speedMult[2] = {1,1};
 8002712:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
      angle[0] = 0;
 8002716:	2500      	movs	r5, #0
    float speedMult[2] = {1,1};
 8002718:	46d3      	mov	fp, sl
      angle[1] = 0;
 800271a:	462e      	mov	r6, r5
 800271c:	e7c5      	b.n	80026aa <motor_cb(roberto_msgs::MotorState const&)+0x122>
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);
 800271e:	4e31      	ldr	r6, [pc, #196]	; (80027e4 <motor_cb(roberto_msgs::MotorState const&)+0x25c>)
 8002720:	e7c3      	b.n	80026aa <motor_cb(roberto_msgs::MotorState const&)+0x122>
 8002722:	4e31      	ldr	r6, [pc, #196]	; (80027e8 <motor_cb(roberto_msgs::MotorState const&)+0x260>)
 8002724:	e7c1      	b.n	80026aa <motor_cb(roberto_msgs::MotorState const&)+0x122>
      servo_left->setReference(angle[1]+135);
 8002726:	4630      	mov	r0, r6
 8002728:	f006 f99e 	bl	8008a68 <__addsf3>
 800272c:	f8d9 3000 	ldr.w	r3, [r9]
 8002730:	4601      	mov	r1, r0
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	4648      	mov	r0, r9
 8002736:	4798      	blx	r3
      servo_right->setReference(-angle[0]+135);
 8002738:	4629      	mov	r1, r5
 800273a:	482c      	ldr	r0, [pc, #176]	; (80027ec <motor_cb(roberto_msgs::MotorState const&)+0x264>)
 800273c:	f006 f992 	bl	8008a64 <__aeabi_fsub>
 8002740:	69a6      	ldr	r6, [r4, #24]
 8002742:	4601      	mov	r1, r0
 8002744:	6833      	ldr	r3, [r6, #0]
 8002746:	4630      	mov	r0, r6
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	e7c9      	b.n	80026e0 <motor_cb(roberto_msgs::MotorState const&)+0x158>
  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
 800274c:	f1b8 0f02 	cmp.w	r8, #2
 8002750:	d125      	bne.n	800279e <motor_cb(roberto_msgs::MotorState const&)+0x216>
    if(spinAngle == 0){
 8002752:	2100      	movs	r1, #0
 8002754:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002756:	f006 fc23 	bl	8008fa0 <__aeabi_fcmpeq>
 800275a:	2800      	cmp	r0, #0
 800275c:	d0cf      	beq.n	80026fe <motor_cb(roberto_msgs::MotorState const&)+0x176>
      if(cmd_msg.heading_angle != 0){
 800275e:	69bd      	ldr	r5, [r7, #24]
 8002760:	2100      	movs	r1, #0
 8002762:	4628      	mov	r0, r5
 8002764:	f006 fc1c 	bl	8008fa0 <__aeabi_fcmpeq>
 8002768:	b9a8      	cbnz	r0, 8002796 <motor_cb(roberto_msgs::MotorState const&)+0x20e>
        spinningAutonomously = true;
 800276a:	2301      	movs	r3, #1
        spinAngle = cmd_msg.heading_angle;
 800276c:	62e5      	str	r5, [r4, #44]	; 0x2c
        spinningAutonomously = true;
 800276e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      servo_left->setReference(90);
 8002772:	6960      	ldr	r0, [r4, #20]
 8002774:	491e      	ldr	r1, [pc, #120]	; (80027f0 <motor_cb(roberto_msgs::MotorState const&)+0x268>)
 8002776:	6803      	ldr	r3, [r0, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4798      	blx	r3
      servo_right->setReference(90);
 800277c:	69a0      	ldr	r0, [r4, #24]
 800277e:	491c      	ldr	r1, [pc, #112]	; (80027f0 <motor_cb(roberto_msgs::MotorState const&)+0x268>)
 8002780:	6803      	ldr	r3, [r0, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	4798      	blx	r3
      motorCmd[0] = cmd_msg.speed;
 8002786:	6a3b      	ldr	r3, [r7, #32]
      motorCmd[1] = -cmd_msg.speed;
 8002788:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
      motorCmd[0] = cmd_msg.speed;
 800278c:	61e3      	str	r3, [r4, #28]
      motorCmd[1] = -cmd_msg.speed;
 800278e:	6222      	str	r2, [r4, #32]
      motorCmd[2] = -cmd_msg.speed;
 8002790:	6262      	str	r2, [r4, #36]	; 0x24
      motorCmd[3] = cmd_msg.speed;
 8002792:	62a3      	str	r3, [r4, #40]	; 0x28
 8002794:	e7b3      	b.n	80026fe <motor_cb(roberto_msgs::MotorState const&)+0x176>
        spinningAutonomously = false;
 8002796:	2300      	movs	r3, #0
 8002798:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800279c:	e7e9      	b.n	8002772 <motor_cb(roberto_msgs::MotorState const&)+0x1ea>
  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
 800279e:	f1b8 0f03 	cmp.w	r8, #3
 80027a2:	d1ac      	bne.n	80026fe <motor_cb(roberto_msgs::MotorState const&)+0x176>
    servo_left->setReference(45);
 80027a4:	6960      	ldr	r0, [r4, #20]
 80027a6:	4913      	ldr	r1, [pc, #76]	; (80027f4 <motor_cb(roberto_msgs::MotorState const&)+0x26c>)
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	4798      	blx	r3
    servo_right->setReference(45);
 80027ae:	69a0      	ldr	r0, [r4, #24]
 80027b0:	4910      	ldr	r1, [pc, #64]	; (80027f4 <motor_cb(roberto_msgs::MotorState const&)+0x26c>)
 80027b2:	6803      	ldr	r3, [r0, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4798      	blx	r3
    motorCmd[0] = cmd_msg.speed;  //FR
 80027b8:	6a3b      	ldr	r3, [r7, #32]
    motorCmd[1] = -cmd_msg.speed; //FL
 80027ba:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
    motorCmd[0] = cmd_msg.speed;  //FR
 80027be:	61e3      	str	r3, [r4, #28]
    motorCmd[1] = -cmd_msg.speed; //FL
 80027c0:	6222      	str	r2, [r4, #32]
    motorCmd[2] = cmd_msg.speed; //RL
 80027c2:	6263      	str	r3, [r4, #36]	; 0x24
    motorCmd[3] = -cmd_msg.speed;  //RR
 80027c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80027c6:	e79a      	b.n	80026fe <motor_cb(roberto_msgs::MotorState const&)+0x176>
 80027c8:	54442d18 	.word	0x54442d18
 80027cc:	400921fb 	.word	0x400921fb
 80027d0:	9999999a 	.word	0x9999999a
 80027d4:	3fa99999 	.word	0x3fa99999
 80027d8:	20000884 	.word	0x20000884
 80027dc:	20000028 	.word	0x20000028
 80027e0:	40768000 	.word	0x40768000
 80027e4:	41500000 	.word	0x41500000
 80027e8:	c1500000 	.word	0xc1500000
 80027ec:	43070000 	.word	0x43070000
 80027f0:	42b40000 	.word	0x42b40000
 80027f4:	42340000 	.word	0x42340000

080027f8 <USART1_IRQHandler>:

};


extern "C"{
  void USART1_IRQHandler(void){
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET){
 80027fa:	f240 5125 	movw	r1, #1317	; 0x525
 80027fe:	4827      	ldr	r0, [pc, #156]	; (800289c <USART1_IRQHandler+0xa4>)
 8002800:	f7ff f804 	bl	800180c <USART_GetITStatus>
 8002804:	b1c8      	cbz	r0, 800283a <USART1_IRQHandler+0x42>
      /* Advance buffer head. */
      uint16_t tempRX_Head = (RX_Head + 1) & (UART_BUFSIZE-1);
 8002806:	4d26      	ldr	r5, [pc, #152]	; (80028a0 <USART1_IRQHandler+0xa8>)

      /* Check for overflow. */
      uint16_t tempRX_Tail = RX_Tail;
      uint8_t data = (uint8_t)USART_ReceiveData(USART1);
 8002808:	4824      	ldr	r0, [pc, #144]	; (800289c <USART1_IRQHandler+0xa4>)
      uint16_t tempRX_Head = (RX_Head + 1) & (UART_BUFSIZE-1);
 800280a:	f8b5 4438 	ldrh.w	r4, [r5, #1080]	; 0x438
      uint16_t tempRX_Tail = RX_Tail;
 800280e:	f8b5 6436 	ldrh.w	r6, [r5, #1078]	; 0x436
      uint8_t data = (uint8_t)USART_ReceiveData(USART1);
 8002812:	f7fe ff82 	bl	800171a <USART_ReceiveData>
      uint16_t tempRX_Head = (RX_Head + 1) & (UART_BUFSIZE-1);
 8002816:	3401      	adds	r4, #1
 8002818:	f3c4 0409 	ubfx	r4, r4, #0, #10
      uint16_t tempRX_Tail = RX_Tail;
 800281c:	b2b6      	uxth	r6, r6
      uint8_t data = (uint8_t)USART_ReceiveData(USART1);
 800281e:	b2c7      	uxtb	r7, r0
      USART_ClearITPendingBit(USART1,USART_IT_RXNE);
 8002820:	f240 5125 	movw	r1, #1317	; 0x525
 8002824:	481d      	ldr	r0, [pc, #116]	; (800289c <USART1_IRQHandler+0xa4>)
 8002826:	f7ff f811 	bl	800184c <USART_ClearITPendingBit>
      if (tempRX_Head == tempRX_Tail) {
 800282a:	42b4      	cmp	r4, r6
 800282c:	d11a      	bne.n	8002864 <USART1_IRQHandler+0x6c>
        /* Disable the Receive interrupt */
        USART_ITConfig(USART1,USART_IT_RXNE,DISABLE);
 800282e:	2200      	movs	r2, #0
 8002830:	f240 5125 	movw	r1, #1317	; 0x525
 8002834:	4819      	ldr	r0, [pc, #100]	; (800289c <USART1_IRQHandler+0xa4>)
 8002836:	f7fe ff12 	bl	800165e <USART_ITConfig>
        RX[RX_Head] = data;
        RX_Head = tempRX_Head;
      }

    }
    if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET){
 800283a:	f240 7127 	movw	r1, #1831	; 0x727
 800283e:	4817      	ldr	r0, [pc, #92]	; (800289c <USART1_IRQHandler+0xa4>)
 8002840:	f7fe ffe4 	bl	800180c <USART_GetITStatus>
 8002844:	b348      	cbz	r0, 800289a <USART1_IRQHandler+0xa2>

      /* Check if all data is transmitted. */
      uint16_t tempTX_Tail = TX_Tail;
 8002846:	4c16      	ldr	r4, [pc, #88]	; (80028a0 <USART1_IRQHandler+0xa8>)
 8002848:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
      if (TX_Head == tempTX_Tail){
 800284a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      uint16_t tempTX_Tail = TX_Tail;
 800284c:	b292      	uxth	r2, r2
      if (TX_Head == tempTX_Tail){
 800284e:	b29b      	uxth	r3, r3
 8002850:	429a      	cmp	r2, r3
 8002852:	d110      	bne.n	8002876 <USART1_IRQHandler+0x7e>

        /* Advance buffer tail. */
        TX_Tail = (TX_Tail + 1) & (UART_BUFSIZE-1);
      }
    }
  }   
 8002854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        USART_ITConfig(USART1,USART_IT_TXE,DISABLE);
 8002858:	2200      	movs	r2, #0
 800285a:	f240 7127 	movw	r1, #1831	; 0x727
 800285e:	480f      	ldr	r0, [pc, #60]	; (800289c <USART1_IRQHandler+0xa4>)
 8002860:	f7fe befd 	b.w	800165e <USART_ITConfig>
        RX[RX_Head] = data;
 8002864:	f8b5 3438 	ldrh.w	r3, [r5, #1080]	; 0x438
 8002868:	b29b      	uxth	r3, r3
 800286a:	442b      	add	r3, r5
 800286c:	f883 743a 	strb.w	r7, [r3, #1082]	; 0x43a
        RX_Head = tempRX_Head;
 8002870:	f8a5 4438 	strh.w	r4, [r5, #1080]	; 0x438
 8002874:	e7e1      	b.n	800283a <USART1_IRQHandler+0x42>
        uint8_t data = TX[TX_Tail];
 8002876:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        USART_SendData(USART1, data);
 8002878:	4808      	ldr	r0, [pc, #32]	; (800289c <USART1_IRQHandler+0xa4>)
        uint8_t data = TX[TX_Tail];
 800287a:	b29b      	uxth	r3, r3
 800287c:	4423      	add	r3, r4
 800287e:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
        USART_SendData(USART1, data);
 8002882:	f7fe ff46 	bl	8001712 <USART_SendData>
        USART_ClearITPendingBit(USART1, USART_IT_TXE);
 8002886:	f240 7127 	movw	r1, #1831	; 0x727
 800288a:	4804      	ldr	r0, [pc, #16]	; (800289c <USART1_IRQHandler+0xa4>)
 800288c:	f7fe ffde 	bl	800184c <USART_ClearITPendingBit>
        TX_Tail = (TX_Tail + 1) & (UART_BUFSIZE-1);
 8002890:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002898:	86a3      	strh	r3, [r4, #52]	; 0x34
 800289a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289c:	40013800 	.word	0x40013800
 80028a0:	20000884 	.word	0x20000884

080028a4 <EXTI2_IRQHandler>:
  }
  //delete odom_msg.data;
  return 0;
}

extern "C" void EXTI2_IRQHandler(void){
 80028a4:	b508      	push	{r3, lr}
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
 80028a6:	2004      	movs	r0, #4
 80028a8:	f7fd fed0 	bl	800064c <EXTI_GetITStatus>
 80028ac:	b140      	cbz	r0, 80028c0 <EXTI2_IRQHandler+0x1c>
    shuttingDown = true;
 80028ae:	2201      	movs	r2, #1
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <EXTI2_IRQHandler+0x20>)
    EXTI_ClearITPendingBit(EXTI_Line2);
 80028b2:	2004      	movs	r0, #4
    shuttingDown = true;
 80028b4:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
  }
}
 80028b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    EXTI_ClearITPendingBit(EXTI_Line2);
 80028bc:	f7fd bed4 	b.w	8000668 <EXTI_ClearITPendingBit>
 80028c0:	bd08      	pop	{r3, pc}
 80028c2:	bf00      	nop
 80028c4:	20000884 	.word	0x20000884

080028c8 <HardFault_Handler>:
                        "MRS    R0, PSP \n"
                        "B      hard_fault_handler_c      \n"
                "_MSP:  \n"
                        "MRS    R0, MSP \n"
                        "B      hard_fault_handler_c      \n"
                ".syntax divided\n") ;
 80028c8:	2004      	movs	r0, #4
 80028ca:	4671      	mov	r1, lr
 80028cc:	4208      	tst	r0, r1
 80028ce:	d003      	beq.n	80028d8 <_MSP>
 80028d0:	f3ef 8009 	mrs	r0, PSP
 80028d4:	f000 b804 	b.w	80028e0 <hard_fault_handler_c>

080028d8 <_MSP>:
 80028d8:	f3ef 8008 	mrs	r0, MSP
 80028dc:	f000 b800 	b.w	80028e0 <hard_fault_handler_c>

080028e0 <hard_fault_handler_c>:
}


extern "C" void hard_fault_handler_c (unsigned int * hardfault_args)
{
 80028e0:	b508      	push	{r3, lr}
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, DISABLE);
 80028e2:	2100      	movs	r1, #0
 80028e4:	2007      	movs	r0, #7
 80028e6:	f7fe fd6f 	bl	80013c8 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, DISABLE);
 80028ea:	2100      	movs	r1, #0
 80028ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028f0:	f7fe fd5e 	bl	80013b0 <RCC_APB2PeriphClockCmd>
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <hard_fault_handler_c+0x28>)
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <hard_fault_handler_c+0x2c>)
 80028f8:	68ca      	ldr	r2, [r1, #12]
 80028fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028fe:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8002900:	60cb      	str	r3, [r1, #12]
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	e7fe      	b.n	8002906 <hard_fault_handler_c+0x26>
 8002908:	e000ed00 	.word	0xe000ed00
 800290c:	05fa0004 	.word	0x05fa0004

08002910 <assert_failed(unsigned char*, unsigned long)>:
  
  NVIC_SystemReset();
}


void assert_failed(uint8_t* file, uint32_t line){
 8002910:	e7fe      	b.n	8002910 <assert_failed(unsigned char*, unsigned long)>
 8002912:	bf00      	nop

08002914 <std_msgs::Time::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002914:	6843      	ldr	r3, [r0, #4]
 8002916:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002918:	6843      	ldr	r3, [r0, #4]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800291e:	88c3      	ldrh	r3, [r0, #6]
 8002920:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002922:	79c3      	ldrb	r3, [r0, #7]
 8002924:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002926:	6883      	ldr	r3, [r0, #8]
 8002928:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800292a:	6883      	ldr	r3, [r0, #8]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002930:	8943      	ldrh	r3, [r0, #10]
 8002932:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002934:	7ac3      	ldrb	r3, [r0, #11]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8002936:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002938:	71cb      	strb	r3, [r1, #7]
    }
 800293a:	4770      	bx	lr

0800293c <std_msgs::Time::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800293c:	780b      	ldrb	r3, [r1, #0]
 800293e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002940:	784a      	ldrb	r2, [r1, #1]
 8002942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002946:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002948:	788a      	ldrb	r2, [r1, #2]
 800294a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800294e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002950:	78ca      	ldrb	r2, [r1, #3]
 8002952:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002956:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002958:	790b      	ldrb	r3, [r1, #4]
 800295a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800295c:	794a      	ldrb	r2, [r1, #5]
 800295e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002962:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002964:	798a      	ldrb	r2, [r1, #6]
 8002966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800296a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800296c:	79ca      	ldrb	r2, [r1, #7]
 800296e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002972:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8002974:	2008      	movs	r0, #8
 8002976:	4770      	bx	lr

08002978 <std_msgs::Time::getType()>:

    const char * getType(){ return "std_msgs/Time"; };
 8002978:	4800      	ldr	r0, [pc, #0]	; (800297c <std_msgs::Time::getType()+0x4>)
 800297a:	4770      	bx	lr
 800297c:	0800b523 	.word	0x0800b523

08002980 <std_msgs::Time::getMD5()>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002980:	4800      	ldr	r0, [pc, #0]	; (8002984 <std_msgs::Time::getMD5()+0x4>)
 8002982:	4770      	bx	lr
 8002984:	0800b502 	.word	0x0800b502

08002988 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002988:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800298a:	780b      	ldrb	r3, [r1, #0]
 800298c:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800298e:	784a      	ldrb	r2, [r1, #1]
 8002990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002994:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 8002996:	f8d1 2002 	ldr.w	r2, [r1, #2]
 800299a:	1d8b      	adds	r3, r1, #6
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800299c:	1d94      	adds	r4, r2, #6
 800299e:	1a5d      	subs	r5, r3, r1
 80029a0:	42ac      	cmp	r4, r5
 80029a2:	d904      	bls.n	80029ae <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x26>
          inbuffer[k-1]=inbuffer[k];
 80029a4:	f813 5b01 	ldrb.w	r5, [r3], #1
 80029a8:	f803 5c02 	strb.w	r5, [r3, #-2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80029ac:	e7f7      	b.n	800299e <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x16>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80029ae:	2500      	movs	r5, #0
 80029b0:	188b      	adds	r3, r1, r2
 80029b2:	715d      	strb	r5, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 80029b4:	1d4b      	adds	r3, r1, #5
 80029b6:	6083      	str	r3, [r0, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 80029b8:	590b      	ldr	r3, [r1, r4]
      offset += 4;
 80029ba:	320a      	adds	r2, #10
 80029bc:	188c      	adds	r4, r1, r2
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029be:	4413      	add	r3, r2
 80029c0:	1a65      	subs	r5, r4, r1
 80029c2:	42ab      	cmp	r3, r5
 80029c4:	d904      	bls.n	80029d0 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x48>
          inbuffer[k-1]=inbuffer[k];
 80029c6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80029ca:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029ce:	e7f7      	b.n	80029c0 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x38>
      }
      inbuffer[offset+length_message_type-1]=0;
 80029d0:	2500      	movs	r5, #0
      this->message_type = (char *)(inbuffer + offset-1);
 80029d2:	3a01      	subs	r2, #1
      inbuffer[offset+length_message_type-1]=0;
 80029d4:	18cc      	adds	r4, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 80029d6:	440a      	add	r2, r1
      inbuffer[offset+length_message_type-1]=0;
 80029d8:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 80029dc:	60c2      	str	r2, [r0, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 80029de:	58ca      	ldr	r2, [r1, r3]
      offset += 4;
 80029e0:	3304      	adds	r3, #4
 80029e2:	18cc      	adds	r4, r1, r3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80029e4:	441a      	add	r2, r3
 80029e6:	1a65      	subs	r5, r4, r1
 80029e8:	42aa      	cmp	r2, r5
 80029ea:	d904      	bls.n	80029f6 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x6e>
          inbuffer[k-1]=inbuffer[k];
 80029ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80029f0:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80029f4:	e7f7      	b.n	80029e6 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x5e>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80029f6:	2500      	movs	r5, #0
      this->md5sum = (char *)(inbuffer + offset-1);
 80029f8:	3b01      	subs	r3, #1
      inbuffer[offset+length_md5sum-1]=0;
 80029fa:	188c      	adds	r4, r1, r2
      this->md5sum = (char *)(inbuffer + offset-1);
 80029fc:	440b      	add	r3, r1
      inbuffer[offset+length_md5sum-1]=0;
 80029fe:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002a02:	6103      	str	r3, [r0, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a04:	78a3      	ldrb	r3, [r4, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a06:	7865      	ldrb	r5, [r4, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a08:	5c89      	ldrb	r1, [r1, r2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002a10:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a12:	78e1      	ldrb	r1, [r4, #3]
 8002a14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->buffer_size = u_buffer_size.real;
 8002a18:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8002a1a:	1d10      	adds	r0, r2, #4
 8002a1c:	bd30      	pop	{r4, r5, pc}
	...

08002a20 <rosserial_msgs::TopicInfo::getType()>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002a20:	4800      	ldr	r0, [pc, #0]	; (8002a24 <rosserial_msgs::TopicInfo::getType()+0x4>)
 8002a22:	4770      	bx	lr
 8002a24:	0800b3fb 	.word	0x0800b3fb

08002a28 <rosserial_msgs::TopicInfo::getMD5()>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002a28:	4800      	ldr	r0, [pc, #0]	; (8002a2c <rosserial_msgs::TopicInfo::getMD5()+0x4>)
 8002a2a:	4770      	bx	lr
 8002a2c:	0800b3da 	.word	0x0800b3da

08002a30 <rosserial_msgs::Log::deserialize(unsigned char*)>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002a30:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002a32:	780b      	ldrb	r3, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer)
 8002a34:	4604      	mov	r4, r0
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002a36:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8002a38:	f8d1 3001 	ldr.w	r3, [r1, #1]
 8002a3c:	1d4a      	adds	r2, r1, #5
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a3e:	1d58      	adds	r0, r3, #5
 8002a40:	1a55      	subs	r5, r2, r1
 8002a42:	42a8      	cmp	r0, r5
 8002a44:	d904      	bls.n	8002a50 <rosserial_msgs::Log::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 8002a46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002a4a:	f802 5c02 	strb.w	r5, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a4e:	e7f7      	b.n	8002a40 <rosserial_msgs::Log::deserialize(unsigned char*)+0x10>
      }
      inbuffer[offset+length_msg-1]=0;
 8002a50:	2200      	movs	r2, #0
 8002a52:	440b      	add	r3, r1
 8002a54:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 8002a56:	3104      	adds	r1, #4
 8002a58:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 8002a5a:	bd30      	pop	{r4, r5, pc}

08002a5c <rosserial_msgs::Log::getType()>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002a5c:	4800      	ldr	r0, [pc, #0]	; (8002a60 <rosserial_msgs::Log::getType()+0x4>)
 8002a5e:	4770      	bx	lr
 8002a60:	0800b3c7 	.word	0x0800b3c7

08002a64 <rosserial_msgs::Log::getMD5()>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002a64:	4800      	ldr	r0, [pc, #0]	; (8002a68 <rosserial_msgs::Log::getMD5()+0x4>)
 8002a66:	4770      	bx	lr
 8002a68:	0800b3a6 	.word	0x0800b3a6

08002a6c <rosserial_msgs::RequestParamResponse::getType()>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8002a6c:	4800      	ldr	r0, [pc, #0]	; (8002a70 <rosserial_msgs::RequestParamResponse::getType()+0x4>)
 8002a6e:	4770      	bx	lr
 8002a70:	0800b320 	.word	0x0800b320

08002a74 <rosserial_msgs::RequestParamResponse::getMD5()>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a74:	4800      	ldr	r0, [pc, #0]	; (8002a78 <rosserial_msgs::RequestParamResponse::getMD5()+0x4>)
 8002a76:	4770      	bx	lr
 8002a78:	0800b385 	.word	0x0800b385

08002a7c <std_msgs::MultiArrayDimension::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
 8002a7c:	460b      	mov	r3, r1
    virtual int deserialize(unsigned char *inbuffer)
 8002a7e:	b530      	push	{r4, r5, lr}
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
 8002a80:	f853 4b04 	ldr.w	r4, [r3], #4
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002a84:	1d25      	adds	r5, r4, #4
 8002a86:	1a5a      	subs	r2, r3, r1
 8002a88:	4295      	cmp	r5, r2
 8002a8a:	d904      	bls.n	8002a96 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)+0x1a>
          inbuffer[k-1]=inbuffer[k];
 8002a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a90:	f803 2c02 	strb.w	r2, [r3, #-2]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002a94:	e7f7      	b.n	8002a86 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)+0xa>
      }
      inbuffer[offset+length_label-1]=0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	190a      	adds	r2, r1, r4
 8002a9a:	70d3      	strb	r3, [r2, #3]
      this->label = (char *)(inbuffer + offset-1);
 8002a9c:	1ccb      	adds	r3, r1, #3
 8002a9e:	6043      	str	r3, [r0, #4]
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002aa0:	5d4b      	ldrb	r3, [r1, r5]
 8002aa2:	6083      	str	r3, [r0, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002aa4:	7951      	ldrb	r1, [r2, #5]
 8002aa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aaa:	6083      	str	r3, [r0, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aac:	7991      	ldrb	r1, [r2, #6]
 8002aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ab2:	6083      	str	r3, [r0, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ab4:	79d1      	ldrb	r1, [r2, #7]
 8002ab6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002aba:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->size);
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002abc:	7a13      	ldrb	r3, [r2, #8]
 8002abe:	60c3      	str	r3, [r0, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ac0:	7a51      	ldrb	r1, [r2, #9]
 8002ac2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ac6:	60c3      	str	r3, [r0, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ac8:	7a91      	ldrb	r1, [r2, #10]
 8002aca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ace:	60c3      	str	r3, [r0, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ad0:	7ad2      	ldrb	r2, [r2, #11]
 8002ad2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ad6:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->stride);
     return offset;
    }
 8002ad8:	f104 000c 	add.w	r0, r4, #12
 8002adc:	bd30      	pop	{r4, r5, pc}
	...

08002ae0 <std_msgs::MultiArrayDimension::getType()>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002ae0:	4800      	ldr	r0, [pc, #0]	; (8002ae4 <std_msgs::MultiArrayDimension::getType()+0x4>)
 8002ae2:	4770      	bx	lr
 8002ae4:	0800b4e5 	.word	0x0800b4e5

08002ae8 <std_msgs::MultiArrayDimension::getMD5()>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002ae8:	4800      	ldr	r0, [pc, #0]	; (8002aec <std_msgs::MultiArrayDimension::getMD5()+0x4>)
 8002aea:	4770      	bx	lr
 8002aec:	0800b4c4 	.word	0x0800b4c4

08002af0 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const>:
      dim_length(0), dim(NULL),
      data_offset(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	4604      	mov	r4, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
 8002af4:	7903      	ldrb	r3, [r0, #4]
      *(outbuffer + offset++) = 0;
 8002af6:	2000      	movs	r0, #0
    virtual int serialize(unsigned char *outbuffer) const
 8002af8:	460d      	mov	r5, r1
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 8002afa:	2604      	movs	r6, #4
      *(outbuffer + offset++) = dim_length;
 8002afc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 8002afe:	7048      	strb	r0, [r1, #1]
      *(outbuffer + offset++) = 0;
 8002b00:	7088      	strb	r0, [r1, #2]
      *(outbuffer + offset++) = 0;
 8002b02:	70c8      	strb	r0, [r1, #3]
      for( uint8_t i = 0; i < dim_length; i++){
 8002b04:	7923      	ldrb	r3, [r4, #4]
 8002b06:	1c47      	adds	r7, r0, #1
 8002b08:	b2c0      	uxtb	r0, r0
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	eb05 0106 	add.w	r1, r5, r6
 8002b10:	da08      	bge.n	8002b24 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const+0x34>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002b12:	69a3      	ldr	r3, [r4, #24]
 8002b14:	0100      	lsls	r0, r0, #4
 8002b16:	581a      	ldr	r2, [r3, r0]
 8002b18:	4418      	add	r0, r3
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	4790      	blx	r2
 8002b1e:	4406      	add	r6, r0
      for( uint8_t i = 0; i < dim_length; i++){
 8002b20:	4638      	mov	r0, r7
 8002b22:	e7ef      	b.n	8002b04 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const+0x14>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002b24:	69e3      	ldr	r3, [r4, #28]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }
 8002b26:	1d30      	adds	r0, r6, #4
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002b28:	55ab      	strb	r3, [r5, r6]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002b2a:	69e3      	ldr	r3, [r4, #28]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002b30:	8be3      	ldrh	r3, [r4, #30]
 8002b32:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002b34:	7fe3      	ldrb	r3, [r4, #31]
 8002b36:	70cb      	strb	r3, [r1, #3]
    }
 8002b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b3c <std_msgs::MultiArrayLayout::getType()>:
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8002b3c:	4800      	ldr	r0, [pc, #0]	; (8002b40 <std_msgs::MultiArrayLayout::getType()+0x4>)
 8002b3e:	4770      	bx	lr
 8002b40:	0800b46e 	.word	0x0800b46e

08002b44 <std_msgs::MultiArrayLayout::getMD5()>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002b44:	4800      	ldr	r0, [pc, #0]	; (8002b48 <std_msgs::MultiArrayLayout::getMD5()+0x4>)
 8002b46:	4770      	bx	lr
 8002b48:	0800b44d 	.word	0x0800b44d

08002b4c <std_msgs::Float32MultiArray::serialize(unsigned char*) const>:
      layout(),
      data_length(0), data(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
 8002b50:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const
 8002b52:	460d      	mov	r5, r1
      offset += this->layout.serialize(outbuffer + offset);
 8002b54:	f7ff ffcc 	bl	8002af0 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const>
      *(outbuffer + offset++) = data_length;
      *(outbuffer + offset++) = 0;
 8002b58:	2200      	movs	r2, #0
      *(outbuffer + offset++) = data_length;
 8002b5a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002b5e:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset++) = 0;
 8002b60:	182b      	adds	r3, r5, r0
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 8002b62:	3004      	adds	r0, #4
      *(outbuffer + offset++) = 0;
 8002b64:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset++) = 0;
 8002b66:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset++) = 0;
 8002b68:	70da      	strb	r2, [r3, #3]
 8002b6a:	182b      	adds	r3, r5, r0
      for( uint8_t i = 0; i < data_length; i++){
 8002b6c:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 8002b70:	1c51      	adds	r1, r2, #1
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	42b2      	cmp	r2, r6
 8002b76:	eba3 0005 	sub.w	r0, r3, r5
 8002b7a:	f103 0304 	add.w	r3, r3, #4
 8002b7e:	da0f      	bge.n	8002ba0 <std_msgs::Float32MultiArray::serialize(unsigned char*) const+0x54>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002b80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002b82:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002b86:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002b88:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002b8c:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002b90:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002b92:	0e12      	lsrs	r2, r2, #24
 8002b94:	f803 2c01 	strb.w	r2, [r3, #-1]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002b98:	f803 0c02 	strb.w	r0, [r3, #-2]
      for( uint8_t i = 0; i < data_length; i++){
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	e7e5      	b.n	8002b6c <std_msgs::Float32MultiArray::serialize(unsigned char*) const+0x20>
      offset += sizeof(this->data[i]);
      }
      return offset;
    }
 8002ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ba4 <std_msgs::Float32MultiArray::getType()>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 8002ba4:	4800      	ldr	r0, [pc, #0]	; (8002ba8 <std_msgs::Float32MultiArray::getType()+0x4>)
 8002ba6:	4770      	bx	lr
 8002ba8:	0800b4a9 	.word	0x0800b4a9

08002bac <std_msgs::Float32MultiArray::getMD5()>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002bac:	4800      	ldr	r0, [pc, #0]	; (8002bb0 <std_msgs::Float32MultiArray::getMD5()+0x4>)
 8002bae:	4770      	bx	lr
 8002bb0:	0800b488 	.word	0x0800b488

08002bb4 <std_msgs::Header::deserialize(unsigned char*)>:
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
      offset += length_frame_id;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002bb8:	780a      	ldrb	r2, [r1, #0]
 8002bba:	f101 0410 	add.w	r4, r1, #16
 8002bbe:	6042      	str	r2, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bc0:	7848      	ldrb	r0, [r1, #1]
 8002bc2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002bc6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bc8:	7888      	ldrb	r0, [r1, #2]
 8002bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002bce:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bd0:	78c8      	ldrb	r0, [r1, #3]
 8002bd2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bd6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002bd8:	790a      	ldrb	r2, [r1, #4]
 8002bda:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bdc:	7948      	ldrb	r0, [r1, #5]
 8002bde:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002be2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002be4:	7988      	ldrb	r0, [r1, #6]
 8002be6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002bea:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bec:	79c8      	ldrb	r0, [r1, #7]
 8002bee:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bf2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002bf4:	7a0a      	ldrb	r2, [r1, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bf8:	7a48      	ldrb	r0, [r1, #9]
 8002bfa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002bfe:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c00:	7a88      	ldrb	r0, [r1, #10]
 8002c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002c06:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c08:	7ac8      	ldrb	r0, [r1, #11]
 8002c0a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002c0e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
 8002c10:	68ca      	ldr	r2, [r1, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002c12:	f102 0010 	add.w	r0, r2, #16
 8002c16:	1a65      	subs	r5, r4, r1
 8002c18:	42a8      	cmp	r0, r5
 8002c1a:	d904      	bls.n	8002c26 <std_msgs::Header::deserialize(unsigned char*)+0x72>
          inbuffer[k-1]=inbuffer[k];
 8002c1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002c20:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002c24:	e7f7      	b.n	8002c16 <std_msgs::Header::deserialize(unsigned char*)+0x62>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002c26:	2400      	movs	r4, #0
 8002c28:	440a      	add	r2, r1
 8002c2a:	73d4      	strb	r4, [r2, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002c2c:	310f      	adds	r1, #15
 8002c2e:	6119      	str	r1, [r3, #16]
      offset += length_frame_id;
     return offset;
    }
 8002c30:	bd30      	pop	{r4, r5, pc}
	...

08002c34 <std_msgs::Header::getType()>:

    const char * getType(){ return "std_msgs/Header"; };
 8002c34:	4800      	ldr	r0, [pc, #0]	; (8002c38 <std_msgs::Header::getType()+0x4>)
 8002c36:	4770      	bx	lr
 8002c38:	0800b552 	.word	0x0800b552

08002c3c <std_msgs::Header::getMD5()>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8002c3c:	4800      	ldr	r0, [pc, #0]	; (8002c40 <std_msgs::Header::getMD5()+0x4>)
 8002c3e:	4770      	bx	lr
 8002c40:	0800b531 	.word	0x0800b531

08002c44 <roberto_msgs::MotorState::getType()>:
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->mode);
     return offset;
    }

    const char * getType(){ return "roberto_msgs/MotorState"; };
 8002c44:	4800      	ldr	r0, [pc, #0]	; (8002c48 <roberto_msgs::MotorState::getType()+0x4>)
 8002c46:	4770      	bx	lr
 8002c48:	0800b36d 	.word	0x0800b36d

08002c4c <roberto_msgs::MotorState::getMD5()>:
    const char * getMD5(){ return "e8b5d1162b85151c49e02b8224796c0e"; };
 8002c4c:	4800      	ldr	r0, [pc, #0]	; (8002c50 <roberto_msgs::MotorState::getMD5()+0x4>)
 8002c4e:	4770      	bx	lr
 8002c50:	0800b34c 	.word	0x0800b34c

08002c54 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::connected()>:


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
      };
 8002c54:	f890 08f4 	ldrb.w	r0, [r0, #2292]	; 0x8f4
 8002c58:	4770      	bx	lr

08002c5a <ros::Subscriber<roberto_msgs::MotorState>::getEndpointType()>:
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 8002c5a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002c5c:	4770      	bx	lr
	...

08002c60 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8002c60:	4800      	ldr	r0, [pc, #0]	; (8002c64 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()+0x4>)
 8002c62:	4770      	bx	lr
 8002c64:	0800b36d 	.word	0x0800b36d

08002c68 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8002c68:	4800      	ldr	r0, [pc, #0]	; (8002c6c <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()+0x4>)
 8002c6a:	4770      	bx	lr
 8002c6c:	0800b34c 	.word	0x0800b34c

08002c70 <std_msgs::Header::serialize(unsigned char*) const>:
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002c70:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002c72:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002c74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002c76:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002c78:	4605      	mov	r5, r0
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002c7e:	88c3      	ldrh	r3, [r0, #6]
    virtual int serialize(unsigned char *outbuffer) const
 8002c80:	460c      	mov	r4, r1
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002c82:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002c84:	79c3      	ldrb	r3, [r0, #7]
 8002c86:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002c88:	6883      	ldr	r3, [r0, #8]
 8002c8a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002c8c:	6883      	ldr	r3, [r0, #8]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002c92:	8943      	ldrh	r3, [r0, #10]
 8002c94:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002c96:	7ac3      	ldrb	r3, [r0, #11]
 8002c98:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002c9a:	68c3      	ldr	r3, [r0, #12]
 8002c9c:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002c9e:	68c3      	ldr	r3, [r0, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002ca4:	89c3      	ldrh	r3, [r0, #14]
 8002ca6:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002ca8:	7bc3      	ldrb	r3, [r0, #15]
 8002caa:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002cac:	6900      	ldr	r0, [r0, #16]
 8002cae:	f007 ffc1 	bl	800ac34 <strlen>
 8002cb2:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 8002cb4:	60e0      	str	r0, [r4, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6929      	ldr	r1, [r5, #16]
 8002cba:	f104 0010 	add.w	r0, r4, #16
 8002cbe:	f007 fc43 	bl	800a548 <memcpy>
    }
 8002cc2:	f106 0010 	add.w	r0, r6, #16
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}

08002cc8 <std_msgs::MultiArrayDimension::serialize(unsigned char*) const>:
    virtual int serialize(unsigned char *outbuffer) const
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	4605      	mov	r5, r0
      uint32_t length_label = strlen(this->label);
 8002ccc:	6840      	ldr	r0, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002cce:	460c      	mov	r4, r1
      uint32_t length_label = strlen(this->label);
 8002cd0:	f007 ffb0 	bl	800ac34 <strlen>
 8002cd4:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, &length_label, sizeof(uint32_t));
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f840 6b04 	str.w	r6, [r0], #4
      memcpy(outbuffer + offset, this->label, length_label);
 8002cdc:	6869      	ldr	r1, [r5, #4]
 8002cde:	4632      	mov	r2, r6
 8002ce0:	f007 fc32 	bl	800a548 <memcpy>
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002ce4:	68ab      	ldr	r3, [r5, #8]
 8002ce6:	19a1      	adds	r1, r4, r6
 8002ce8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002cea:	68ab      	ldr	r3, [r5, #8]
    }
 8002cec:	f106 000c 	add.w	r0, r6, #12
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002cf4:	896b      	ldrh	r3, [r5, #10]
 8002cf6:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002cf8:	7aeb      	ldrb	r3, [r5, #11]
 8002cfa:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002cfc:	68eb      	ldr	r3, [r5, #12]
 8002cfe:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002d00:	68eb      	ldr	r3, [r5, #12]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002d06:	89eb      	ldrh	r3, [r5, #14]
 8002d08:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002d0a:	7beb      	ldrb	r3, [r5, #15]
 8002d0c:	72cb      	strb	r3, [r1, #11]
    }
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}

08002d10 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const>:
    virtual int serialize(unsigned char *outbuffer) const
 8002d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      *(outbuffer + offset++) = ints_length;
 8002d14:	7903      	ldrb	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002d16:	4607      	mov	r7, r0
      *(outbuffer + offset++) = ints_length;
 8002d18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 8002d1a:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
 8002d1c:	461a      	mov	r2, r3
    virtual int serialize(unsigned char *outbuffer) const
 8002d1e:	460c      	mov	r4, r1
      *(outbuffer + offset++) = 0;
 8002d20:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 8002d22:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 8002d24:	70cb      	strb	r3, [r1, #3]
 8002d26:	3104      	adds	r1, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8002d28:	793d      	ldrb	r5, [r7, #4]
 8002d2a:	1c50      	adds	r0, r2, #1
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	42aa      	cmp	r2, r5
 8002d30:	eba1 0304 	sub.w	r3, r1, r4
 8002d34:	f101 0104 	add.w	r1, r1, #4
 8002d38:	da0f      	bge.n	8002d5a <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x4a>
      u_intsi.real = this->ints[i];
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002d40:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002d42:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002d46:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002d4a:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002d4c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002d4e:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002d52:	f801 3c01 	strb.w	r3, [r1, #-1]
      for( uint8_t i = 0; i < ints_length; i++){
 8002d56:	4602      	mov	r2, r0
 8002d58:	e7e6      	b.n	8002d28 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x18>
      *(outbuffer + offset++) = floats_length;
 8002d5a:	7c3a      	ldrb	r2, [r7, #16]
      *(outbuffer + offset++) = 0;
 8002d5c:	18e1      	adds	r1, r4, r3
      *(outbuffer + offset++) = floats_length;
 8002d5e:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 8002d60:	2200      	movs	r2, #0
      *(outbuffer + offset++) = 0;
 8002d62:	3304      	adds	r3, #4
      *(outbuffer + offset++) = 0;
 8002d64:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 8002d66:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 8002d68:	70ca      	strb	r2, [r1, #3]
 8002d6a:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 8002d6c:	7c38      	ldrb	r0, [r7, #16]
 8002d6e:	1c51      	adds	r1, r2, #1
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4282      	cmp	r2, r0
 8002d74:	eba3 0604 	sub.w	r6, r3, r4
 8002d78:	f103 0304 	add.w	r3, r3, #4
 8002d7c:	da0f      	bge.n	8002d9e <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x8e>
      u_floatsi.real = this->floats[i];
 8002d7e:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002d80:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002d84:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002d86:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002d8a:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002d8e:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002d90:	0e12      	lsrs	r2, r2, #24
 8002d92:	f803 2c01 	strb.w	r2, [r3, #-1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002d96:	f803 0c02 	strb.w	r0, [r3, #-2]
      for( uint8_t i = 0; i < floats_length; i++){
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	e7e6      	b.n	8002d6c <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x5c>
      *(outbuffer + offset++) = strings_length;
 8002d9e:	7f3b      	ldrb	r3, [r7, #28]
      *(outbuffer + offset++) = 0;
 8002da0:	19a2      	adds	r2, r4, r6
      *(outbuffer + offset++) = strings_length;
 8002da2:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 8002da4:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
 8002da6:	3604      	adds	r6, #4
      *(outbuffer + offset++) = 0;
 8002da8:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 8002daa:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 8002dac:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 8002dae:	b2dd      	uxtb	r5, r3
 8002db0:	f103 0901 	add.w	r9, r3, #1
 8002db4:	7f3b      	ldrb	r3, [r7, #28]
 8002db6:	429d      	cmp	r5, r3
 8002db8:	da11      	bge.n	8002dde <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0xce>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002dc0:	f007 ff38 	bl	800ac34 <strlen>
 8002dc4:	4680      	mov	r8, r0
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 8002dc6:	51a0      	str	r0, [r4, r6]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 8002dca:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8002dd2:	19a0      	adds	r0, r4, r6
 8002dd4:	f007 fbb8 	bl	800a548 <memcpy>
      offset += length_stringsi;
 8002dd8:	4446      	add	r6, r8
      for( uint8_t i = 0; i < strings_length; i++){
 8002dda:	464b      	mov	r3, r9
 8002ddc:	e7e7      	b.n	8002dae <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x9e>
    }
 8002dde:	4630      	mov	r0, r6
 8002de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002de4 <rosserial_msgs::Log::serialize(unsigned char*) const>:
    virtual int serialize(unsigned char *outbuffer) const
 8002de4:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002de6:	7903      	ldrb	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002de8:	4606      	mov	r6, r0
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002dea:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
 8002dec:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8002dee:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 8002df0:	f007 ff20 	bl	800ac34 <strlen>
 8002df4:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8002df6:	f8c5 0001 	str.w	r0, [r5, #1]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68b1      	ldr	r1, [r6, #8]
 8002dfe:	1d68      	adds	r0, r5, #5
 8002e00:	f007 fba2 	bl	800a548 <memcpy>
    }
 8002e04:	1d60      	adds	r0, r4, #5
 8002e06:	bd70      	pop	{r4, r5, r6, pc}

08002e08 <rosserial_msgs::TopicInfo::serialize(unsigned char*) const>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002e08:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002e0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002e10:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8002e12:	4605      	mov	r5, r0
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002e18:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8002e1a:	460c      	mov	r4, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 8002e1c:	f007 ff0a 	bl	800ac34 <strlen>
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 8002e20:	f8c4 0002 	str.w	r0, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002e24:	4602      	mov	r2, r0
 8002e26:	68a9      	ldr	r1, [r5, #8]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002e28:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002e2a:	1da0      	adds	r0, r4, #6
 8002e2c:	f007 fb8c 	bl	800a548 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8002e30:	68e8      	ldr	r0, [r5, #12]
 8002e32:	f007 feff 	bl	800ac34 <strlen>
      offset += length_topic_name;
 8002e36:	f107 0806 	add.w	r8, r7, #6
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 8002e3a:	f844 0008 	str.w	r0, [r4, r8]
      offset += 4;
 8002e3e:	370a      	adds	r7, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002e40:	4602      	mov	r2, r0
 8002e42:	68e9      	ldr	r1, [r5, #12]
      uint32_t length_message_type = strlen(this->message_type);
 8002e44:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002e46:	19e0      	adds	r0, r4, r7
 8002e48:	f007 fb7e 	bl	800a548 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8002e4c:	6928      	ldr	r0, [r5, #16]
 8002e4e:	f007 fef1 	bl	800ac34 <strlen>
      offset += length_message_type;
 8002e52:	443e      	add	r6, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8002e54:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 8002e56:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8002e58:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6929      	ldr	r1, [r5, #16]
 8002e5e:	19a0      	adds	r0, r4, r6
 8002e60:	f007 fb72 	bl	800a548 <memcpy>
      u_buffer_size.real = this->buffer_size;
 8002e64:	696b      	ldr	r3, [r5, #20]
      offset += length_md5sum;
 8002e66:	443e      	add	r6, r7
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002e68:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002e6a:	0a1a      	lsrs	r2, r3, #8
 8002e6c:	4434      	add	r4, r6
 8002e6e:	7062      	strb	r2, [r4, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002e70:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002e72:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002e74:	70a2      	strb	r2, [r4, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002e76:	70e3      	strb	r3, [r4, #3]
    }
 8002e78:	1d30      	adds	r0, r6, #4
 8002e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e7e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>:
    virtual int deserialize(unsigned char *inbuffer)
 8002e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8002e80:	780e      	ldrb	r6, [r1, #0]
      if(ints_lengthT > ints_length)
 8002e82:	7903      	ldrb	r3, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer)
 8002e84:	4604      	mov	r4, r0
      if(ints_lengthT > ints_length)
 8002e86:	429e      	cmp	r6, r3
    virtual int deserialize(unsigned char *inbuffer)
 8002e88:	460d      	mov	r5, r1
      if(ints_lengthT > ints_length)
 8002e8a:	dd04      	ble.n	8002e96 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002e8c:	00b1      	lsls	r1, r6, #2
 8002e8e:	68c0      	ldr	r0, [r0, #12]
 8002e90:	f007 fc22 	bl	800a6d8 <realloc>
 8002e94:	60e0      	str	r0, [r4, #12]
      ints_length = ints_lengthT;
 8002e96:	2100      	movs	r1, #0
 8002e98:	7126      	strb	r6, [r4, #4]
 8002e9a:	1d2a      	adds	r2, r5, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8002e9c:	7923      	ldrb	r3, [r4, #4]
 8002e9e:	1c48      	adds	r0, r1, #1
 8002ea0:	b2c9      	uxtb	r1, r1
 8002ea2:	4299      	cmp	r1, r3
 8002ea4:	eba2 0605 	sub.w	r6, r2, r5
 8002ea8:	f102 0204 	add.w	r2, r2, #4
 8002eac:	da13      	bge.n	8002ed6 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x58>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eae:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eb2:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ebc:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ec0:	4333      	orrs	r3, r6
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ec2:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8002ec6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002eca:	68e6      	ldr	r6, [r4, #12]
      this->st_ints = u_st_ints.real;
 8002ecc:	60a3      	str	r3, [r4, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002ece:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	e7e2      	b.n	8002e9c <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x1e>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8002ed6:	5daf      	ldrb	r7, [r5, r6]
      if(floats_lengthT > floats_length)
 8002ed8:	7c23      	ldrb	r3, [r4, #16]
 8002eda:	429f      	cmp	r7, r3
 8002edc:	dd04      	ble.n	8002ee8 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x6a>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002ede:	00b9      	lsls	r1, r7, #2
 8002ee0:	69a0      	ldr	r0, [r4, #24]
 8002ee2:	f007 fbf9 	bl	800a6d8 <realloc>
 8002ee6:	61a0      	str	r0, [r4, #24]
      floats_length = floats_lengthT;
 8002ee8:	2200      	movs	r2, #0
      offset += 3;
 8002eea:	1d33      	adds	r3, r6, #4
      floats_length = floats_lengthT;
 8002eec:	7427      	strb	r7, [r4, #16]
 8002eee:	442b      	add	r3, r5
      for( uint8_t i = 0; i < floats_length; i++){
 8002ef0:	b2d1      	uxtb	r1, r2
 8002ef2:	1c50      	adds	r0, r2, #1
 8002ef4:	7c22      	ldrb	r2, [r4, #16]
 8002ef6:	1b5e      	subs	r6, r3, r5
 8002ef8:	4291      	cmp	r1, r2
 8002efa:	f103 0304 	add.w	r3, r3, #4
 8002efe:	da13      	bge.n	8002f28 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xaa>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f00:	f813 2c02 	ldrb.w	r2, [r3, #-2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f04:	f813 6c03 	ldrb.w	r6, [r3, #-3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f08:	0412      	lsls	r2, r2, #16
 8002f0a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f0e:	f813 6c04 	ldrb.w	r6, [r3, #-4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f12:	4332      	orrs	r2, r6
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f14:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8002f18:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002f1c:	69a6      	ldr	r6, [r4, #24]
      this->st_floats = u_st_floats.real;
 8002f1e:	6162      	str	r2, [r4, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002f20:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 8002f24:	4602      	mov	r2, r0
 8002f26:	e7e3      	b.n	8002ef0 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x72>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8002f28:	5daf      	ldrb	r7, [r5, r6]
      if(strings_lengthT > strings_length)
 8002f2a:	7f23      	ldrb	r3, [r4, #28]
 8002f2c:	429f      	cmp	r7, r3
 8002f2e:	dd04      	ble.n	8002f3a <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xbc>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002f30:	00b9      	lsls	r1, r7, #2
 8002f32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f34:	f007 fbd0 	bl	800a6d8 <realloc>
 8002f38:	6260      	str	r0, [r4, #36]	; 0x24
      strings_length = strings_lengthT;
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	7727      	strb	r7, [r4, #28]
      inbuffer[offset+length_st_strings-1]=0;
 8002f3e:	460f      	mov	r7, r1
      offset += 3;
 8002f40:	1d30      	adds	r0, r6, #4
      for( uint8_t i = 0; i < strings_length; i++){
 8002f42:	7f23      	ldrb	r3, [r4, #28]
 8002f44:	b2ce      	uxtb	r6, r1
 8002f46:	429e      	cmp	r6, r3
 8002f48:	da19      	bge.n	8002f7e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x100>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8002f4a:	f855 e000 	ldr.w	lr, [r5, r0]
      offset += 4;
 8002f4e:	1d03      	adds	r3, r0, #4
 8002f50:	18ea      	adds	r2, r5, r3
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f52:	eb0e 0003 	add.w	r0, lr, r3
 8002f56:	eba2 0e05 	sub.w	lr, r2, r5
 8002f5a:	4570      	cmp	r0, lr
 8002f5c:	d904      	bls.n	8002f68 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xea>
          inbuffer[k-1]=inbuffer[k];
 8002f5e:	f812 eb01 	ldrb.w	lr, [r2], #1
 8002f62:	f802 ec02 	strb.w	lr, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f66:	e7f6      	b.n	8002f56 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xd8>
      inbuffer[offset+length_st_strings-1]=0;
 8002f68:	182a      	adds	r2, r5, r0
 8002f6a:	f802 7c01 	strb.w	r7, [r2, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f6e:	3b01      	subs	r3, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f70:	6a62      	ldr	r2, [r4, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f72:	442b      	add	r3, r5
 8002f74:	6223      	str	r3, [r4, #32]
 8002f76:	3101      	adds	r1, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f78:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 8002f7c:	e7e1      	b.n	8002f42 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xc4>
    }
 8002f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f80 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)>:
    virtual int deserialize(unsigned char *inbuffer)
 8002f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      uint8_t dim_lengthT = *(inbuffer + offset++);
 8002f84:	780d      	ldrb	r5, [r1, #0]
      if(dim_lengthT > dim_length)
 8002f86:	7903      	ldrb	r3, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer)
 8002f88:	4604      	mov	r4, r0
      if(dim_lengthT > dim_length)
 8002f8a:	429d      	cmp	r5, r3
    virtual int deserialize(unsigned char *inbuffer)
 8002f8c:	460f      	mov	r7, r1
      if(dim_lengthT > dim_length)
 8002f8e:	dd04      	ble.n	8002f9a <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x1a>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002f90:	0129      	lsls	r1, r5, #4
 8002f92:	6980      	ldr	r0, [r0, #24]
 8002f94:	f007 fba0 	bl	800a6d8 <realloc>
 8002f98:	61a0      	str	r0, [r4, #24]
      dim_length = dim_lengthT;
 8002f9a:	2300      	movs	r3, #0
      offset += 3;
 8002f9c:	2604      	movs	r6, #4
      dim_length = dim_lengthT;
 8002f9e:	7125      	strb	r5, [r4, #4]
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002fa0:	f104 0808 	add.w	r8, r4, #8
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002fa4:	f104 0a18 	add.w	sl, r4, #24
      for( uint8_t i = 0; i < dim_length; i++){
 8002fa8:	b2dd      	uxtb	r5, r3
 8002faa:	f103 0901 	add.w	r9, r3, #1
 8002fae:	7923      	ldrb	r3, [r4, #4]
 8002fb0:	19b9      	adds	r1, r7, r6
 8002fb2:	429d      	cmp	r5, r3
 8002fb4:	da0f      	bge.n	8002fd6 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x56>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	f7ff fd60 	bl	8002a7c <std_msgs::MultiArrayDimension::deserialize(unsigned char*)>
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	69a3      	ldr	r3, [r4, #24]
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002fc0:	4406      	add	r6, r0
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002fc2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8002fc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8002fca:	4552      	cmp	r2, sl
 8002fcc:	f843 1b04 	str.w	r1, [r3], #4
 8002fd0:	d1f9      	bne.n	8002fc6 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x46>
      for( uint8_t i = 0; i < dim_length; i++){
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	e7e8      	b.n	8002fa8 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x28>
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002fd6:	5dbb      	ldrb	r3, [r7, r6]
    }
 8002fd8:	1d30      	adds	r0, r6, #4
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002fda:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fdc:	784a      	ldrb	r2, [r1, #1]
 8002fde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002fe2:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fe4:	788a      	ldrb	r2, [r1, #2]
 8002fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fea:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fec:	78ca      	ldrb	r2, [r1, #3]
 8002fee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ff2:	61e3      	str	r3, [r4, #28]
    }
 8002ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ff8 <std_msgs::Float32MultiArray::deserialize(unsigned char*)>:
    virtual int deserialize(unsigned char *inbuffer)
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	4604      	mov	r4, r0
      offset += this->layout.deserialize(inbuffer + offset);
 8002ffc:	3004      	adds	r0, #4
    virtual int deserialize(unsigned char *inbuffer)
 8002ffe:	460d      	mov	r5, r1
      offset += this->layout.deserialize(inbuffer + offset);
 8003000:	f7ff ffbe 	bl	8002f80 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)>
      if(data_lengthT > data_length)
 8003004:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      uint8_t data_lengthT = *(inbuffer + offset++);
 8003008:	5c2f      	ldrb	r7, [r5, r0]
      offset += this->layout.deserialize(inbuffer + offset);
 800300a:	4606      	mov	r6, r0
      if(data_lengthT > data_length)
 800300c:	429f      	cmp	r7, r3
 800300e:	dd04      	ble.n	800301a <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x22>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8003010:	00b9      	lsls	r1, r7, #2
 8003012:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003014:	f007 fb60 	bl	800a6d8 <realloc>
 8003018:	62e0      	str	r0, [r4, #44]	; 0x2c
      data_length = data_lengthT;
 800301a:	2200      	movs	r2, #0
      offset += 3;
 800301c:	1d33      	adds	r3, r6, #4
      data_length = data_lengthT;
 800301e:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8003022:	442b      	add	r3, r5
      for( uint8_t i = 0; i < data_length; i++){
 8003024:	b2d1      	uxtb	r1, r2
 8003026:	1c56      	adds	r6, r2, #1
 8003028:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800302c:	1b58      	subs	r0, r3, r5
 800302e:	4291      	cmp	r1, r2
 8003030:	f103 0304 	add.w	r3, r3, #4
 8003034:	da13      	bge.n	800305e <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x66>
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003036:	f813 2c02 	ldrb.w	r2, [r3, #-2]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800303a:	f813 0c03 	ldrb.w	r0, [r3, #-3]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800303e:	0412      	lsls	r2, r2, #16
 8003040:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003044:	f813 0c04 	ldrb.w	r0, [r3, #-4]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003048:	4302      	orrs	r2, r0
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800304a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800304e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003052:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      this->st_data = u_st_data.real;
 8003054:	62a2      	str	r2, [r4, #40]	; 0x28
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003056:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
      for( uint8_t i = 0; i < data_length; i++){
 800305a:	4632      	mov	r2, r6
 800305c:	e7e2      	b.n	8003024 <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x2c>
    }
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003060 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)>:
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 8003060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      {
        if(id >= 100 && !configured_)
 8003064:	2963      	cmp	r1, #99	; 0x63
      virtual int publish(int id, const Msg * msg)
 8003066:	b085      	sub	sp, #20
 8003068:	4604      	mov	r4, r0
 800306a:	460d      	mov	r5, r1
        if(id >= 100 && !configured_)
 800306c:	dd03      	ble.n	8003076 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x16>
 800306e:	f890 68f4 	ldrb.w	r6, [r0, #2292]	; 0x8f4
 8003072:	2e00      	cmp	r6, #0
 8003074:	d074      	beq.n	8003160 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x100>
          return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	f204 411f 	addw	r1, r4, #1055	; 0x41f
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4610      	mov	r0, r2
 8003080:	4798      	blx	r3

        /* setup the header */
        message_out[0] = 0xff;
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
        message_out[1] = PROTOCOL_VER;
 8003088:	22fe      	movs	r2, #254	; 0xfe
        uint16_t l = msg->serialize(message_out+7);
 800308a:	b283      	uxth	r3, r0
        message_out[1] = PROTOCOL_VER;
 800308c:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 8003090:	b2c2      	uxtb	r2, r0
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
 8003092:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003096:	f884 041b 	strb.w	r0, [r4, #1051]	; 0x41b
        message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800309a:	4410      	add	r0, r2
 800309c:	43c0      	mvns	r0, r0
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800309e:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 80030a2:	2105      	movs	r1, #5
        int chk = 0;
 80030a4:	2200      	movs	r2, #0
        message_out[5] = (uint8_t) ((int16_t)id&255);
 80030a6:	f884 541d 	strb.w	r5, [r4, #1053]	; 0x41d
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 80030aa:	f345 2507 	sbfx	r5, r5, #8, #8
        message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 80030ae:	f884 041c 	strb.w	r0, [r4, #1052]	; 0x41c
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 80030b2:	f884 541e 	strb.w	r5, [r4, #1054]	; 0x41e
        for(int i =5; i<l+7; i++)
 80030b6:	1d98      	adds	r0, r3, #6
 80030b8:	f204 451d 	addw	r5, r4, #1053	; 0x41d
 80030bc:	4281      	cmp	r1, r0
 80030be:	dc04      	bgt.n	80030ca <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x6a>
          chk += message_out[i];
 80030c0:	f815 6b01 	ldrb.w	r6, [r5], #1
        for(int i =5; i<l+7; i++)
 80030c4:	3101      	adds	r1, #1
          chk += message_out[i];
 80030c6:	4432      	add	r2, r6
        for(int i =5; i<l+7; i++)
 80030c8:	e7f8      	b.n	80030bc <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x5c>
        l += 7;
        message_out[l++] = 255 - (chk%256);
 80030ca:	43d2      	mvns	r2, r2
 80030cc:	f103 0708 	add.w	r7, r3, #8
        l += 7;
 80030d0:	3307      	adds	r3, #7
        message_out[l++] = 255 - (chk%256);
 80030d2:	b2bf      	uxth	r7, r7
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4423      	add	r3, r4

        if( l <= OUTPUT_SIZE ){
 80030d8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
        message_out[l++] = 255 - (chk%256);
 80030dc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        if( l <= OUTPUT_SIZE ){
 80030e0:	463e      	mov	r6, r7
 80030e2:	d82e      	bhi.n	8003142 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xe2>
        return -1;
      }
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
 80030e4:	f04f 0800 	mov.w	r8, #0
    uint16_t tempHead = (TX_Head + 1) & (UART_BUFSIZE-1);
 80030e8:	4d1f      	ldr	r5, [pc, #124]	; (8003168 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x108>)
    	USART_ITConfig(USART1,USART_IT_TXE,ENABLE);
 80030ea:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003174 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x114>
          hardware_.write(message_out, l);
 80030ee:	f504 6483 	add.w	r4, r4, #1048	; 0x418
 80030f2:	4547      	cmp	r7, r8
 80030f4:	dd34      	ble.n	8003160 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x100>
    uint16_t tempHead = (TX_Head + 1) & (UART_BUFSIZE-1);
 80030f6:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    uint16_t tempTail = TX_Tail;
 80030f8:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    uint16_t tempHead = (TX_Head + 1) & (UART_BUFSIZE-1);
 80030fa:	3301      	adds	r3, #1
    uint16_t tempTail = TX_Tail;
 80030fc:	b292      	uxth	r2, r2
        while( !com->TXBuffer_FreeSpace() );
 80030fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003102:	4293      	cmp	r3, r2
 8003104:	d0f7      	beq.n	80030f6 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x96>
    uint16_t tempHead = (TX_Head + 1) & (UART_BUFSIZE-1);
 8003106:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    uint16_t tempTail = TX_Tail;
 8003108:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    uint16_t tempHead = (TX_Head + 1) & (UART_BUFSIZE-1);
 800310a:	3301      	adds	r3, #1
    uint16_t tempTail = TX_Tail;
 800310c:	b292      	uxth	r2, r2
    if(isFree)
 800310e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003112:	4293      	cmp	r3, r2
 8003114:	d012      	beq.n	800313c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xdc>
    	tempTX_Head = TX_Head;
 8003116:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
        com->putch(data[i]);
 8003118:	f814 1008 	ldrb.w	r1, [r4, r8]
 800311c:	b29b      	uxth	r3, r3
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800311e:	b672      	cpsid	i
    	TX[tempTX_Head]= data;
 8003120:	18ea      	adds	r2, r5, r3
    	TX_Head = (tempTX_Head + 1) & (UART_BUFSIZE-1);
 8003122:	3301      	adds	r3, #1
 8003124:	f3c3 0309 	ubfx	r3, r3, #0, #10
    	TX[tempTX_Head]= data;
 8003128:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    	TX_Head = (tempTX_Head + 1) & (UART_BUFSIZE-1);
 800312c:	866b      	strh	r3, [r5, #50]	; 0x32
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800312e:	b662      	cpsie	i
    	USART_ITConfig(USART1,USART_IT_TXE,ENABLE);
 8003130:	2201      	movs	r2, #1
 8003132:	f240 7127 	movw	r1, #1831	; 0x727
 8003136:	4648      	mov	r0, r9
 8003138:	f7fe fa91 	bl	800165e <USART_ITConfig>
      for(int i=0; i<length; i++){
 800313c:	f108 0801 	add.w	r8, r8, #1
 8003140:	e7d7      	b.n	80030f2 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x92>
      msg("")
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x10c>)
    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003144:	aa01      	add	r2, sp, #4
 8003146:	9301      	str	r3, [sp, #4]
        l.level= byte;
 8003148:	2303      	movs	r3, #3
 800314a:	f88d 3008 	strb.w	r3, [sp, #8]
        l.msg = (char*)msg;
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x110>)
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003150:	2107      	movs	r1, #7
        l.msg = (char*)msg;
 8003152:	9303      	str	r3, [sp, #12]
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	4620      	mov	r0, r4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4798      	blx	r3
          return -1;
 800315c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
      }
 8003160:	4630      	mov	r0, r6
 8003162:	b005      	add	sp, #20
 8003164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003168:	20000884 	.word	0x20000884
 800316c:	0800b254 	.word	0x0800b254
 8003170:	0800b414 	.word	0x0800b414
 8003174:	40013800 	.word	0x40013800

08003178 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8003178:	b538      	push	{r3, r4, r5, lr}
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800317a:	f3c1 54c7 	ubfx	r4, r1, #23, #8
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800317e:	4605      	mov	r5, r0
    int32_t exp = ((*val >> 23) & 255);
 8003180:	460a      	mov	r2, r1
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8003182:	4608      	mov	r0, r1
    if (exp != 0)
 8003184:	b10c      	cbz	r4, 800318a <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x12>
    {
      exp += 1023 - 127;
 8003186:	f504 7460 	add.w	r4, r4, #896	; 0x380
    }

    int32_t sig = *val;
    *(outbuffer++) = 0;
 800318a:	2100      	movs	r1, #0
 800318c:	7029      	strb	r1, [r5, #0]
    *(outbuffer++) = 0;
 800318e:	7069      	strb	r1, [r5, #1]
    *(outbuffer++) = 0;
 8003190:	70a9      	strb	r1, [r5, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	70e9      	strb	r1, [r5, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8003196:	10d1      	asrs	r1, r2, #3
 8003198:	7129      	strb	r1, [r5, #4]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800319a:	12d1      	asrs	r1, r2, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800319c:	f3c2 42c3 	ubfx	r2, r2, #19, #4
 80031a0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    *(outbuffer++) = (sig >> 11) & 0xff;
 80031a4:	7169      	strb	r1, [r5, #5]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80031a6:	71aa      	strb	r2, [r5, #6]
    *(outbuffer++) = (exp >> 4) & 0x7F;

    // Mark negative bit as necessary.
    if (f < 0)
 80031a8:	2100      	movs	r1, #0
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80031aa:	f3c4 1407 	ubfx	r4, r4, #4, #8
    if (f < 0)
 80031ae:	f005 ff01 	bl	8008fb4 <__aeabi_fcmplt>
 80031b2:	b910      	cbnz	r0, 80031ba <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x42>
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80031b4:	71ec      	strb	r4, [r5, #7]
    {
      *(outbuffer - 1) |= 0x80;
    }

    return 8;
  }
 80031b6:	2008      	movs	r0, #8
 80031b8:	bd38      	pop	{r3, r4, r5, pc}
      *(outbuffer - 1) |= 0x80;
 80031ba:	f064 037f 	orn	r3, r4, #127	; 0x7f
 80031be:	71eb      	strb	r3, [r5, #7]
 80031c0:	e7f9      	b.n	80031b6 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x3e>

080031c2 <roberto_msgs::MotorState::serialize(unsigned char*) const>:
    virtual int serialize(unsigned char *outbuffer) const
 80031c2:	b570      	push	{r4, r5, r6, lr}
 80031c4:	4605      	mov	r5, r0
      offset += this->header.serialize(outbuffer + offset);
 80031c6:	3004      	adds	r0, #4
    virtual int serialize(unsigned char *outbuffer) const
 80031c8:	460e      	mov	r6, r1
      offset += this->header.serialize(outbuffer + offset);
 80031ca:	f7ff fd51 	bl	8002c70 <std_msgs::Header::serialize(unsigned char*) const>
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 80031ce:	69a9      	ldr	r1, [r5, #24]
      offset += this->header.serialize(outbuffer + offset);
 80031d0:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 80031d2:	1830      	adds	r0, r6, r0
 80031d4:	f7ff ffd0 	bl	8003178 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 80031d8:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_velocity);
 80031da:	69e9      	ldr	r1, [r5, #28]
 80031dc:	1930      	adds	r0, r6, r4
 80031de:	f7ff ffcb 	bl	8003178 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 80031e2:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 80031e4:	6a29      	ldr	r1, [r5, #32]
 80031e6:	1930      	adds	r0, r6, r4
 80031e8:	f7ff ffc6 	bl	8003178 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 80031ec:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->acceleration);
 80031ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80031f0:	1930      	adds	r0, r6, r4
 80031f2:	f7ff ffc1 	bl	8003178 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
 80031f6:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
      offset += serializeAvrFloat64(outbuffer + offset, this->acceleration);
 80031fa:	4420      	add	r0, r4
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
 80031fc:	5433      	strb	r3, [r6, r0]
    }
 80031fe:	3001      	adds	r0, #1
 8003200:	bd70      	pop	{r4, r5, r6, pc}

08003202 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8003202:	b510      	push	{r4, lr}
 8003204:	78c3      	ldrb	r3, [r0, #3]
 8003206:	095b      	lsrs	r3, r3, #5
  {
    uint32_t* val = (uint32_t*)f;
    inbuffer += 3;

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8003208:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800320a:	7902      	ldrb	r2, [r0, #4]
 800320c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003210:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8003212:	7942      	ldrb	r2, [r0, #5]
 8003214:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 8003218:	600a      	str	r2, [r1, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 800321a:	7983      	ldrb	r3, [r0, #6]
 800321c:	04db      	lsls	r3, r3, #19
 800321e:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8003226:	79c2      	ldrb	r2, [r0, #7]
 8003228:	7984      	ldrb	r4, [r0, #6]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	f402 62fe 	and.w	r2, r2, #2032	; 0x7f0
    if (exp != 0)
 8003230:	ea52 1214 	orrs.w	r2, r2, r4, lsr #4
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8003234:	bf1e      	ittt	ne
 8003236:	f5a2 7260 	subne.w	r2, r2, #896	; 0x380
 800323a:	ea43 53c2 	orrne.w	r3, r3, r2, lsl #23
 800323e:	600b      	strne	r3, [r1, #0]
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8003240:	79c3      	ldrb	r3, [r0, #7]
 8003242:	680a      	ldr	r2, [r1, #0]
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    return 8;
  }
 800324e:	2008      	movs	r0, #8
 8003250:	bd10      	pop	{r4, pc}

08003252 <roberto_msgs::MotorState::deserialize(unsigned char*)>:
    virtual int deserialize(unsigned char *inbuffer)
 8003252:	b570      	push	{r4, r5, r6, lr}
 8003254:	4605      	mov	r5, r0
      offset += this->header.deserialize(inbuffer + offset);
 8003256:	3004      	adds	r0, #4
    virtual int deserialize(unsigned char *inbuffer)
 8003258:	460e      	mov	r6, r1
      offset += this->header.deserialize(inbuffer + offset);
 800325a:	f7ff fcab 	bl	8002bb4 <std_msgs::Header::deserialize(unsigned char*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800325e:	f105 0118 	add.w	r1, r5, #24
      offset += this->header.deserialize(inbuffer + offset);
 8003262:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 8003264:	1830      	adds	r0, r6, r0
 8003266:	f7ff ffcc 	bl	8003202 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800326a:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
 800326c:	f105 011c 	add.w	r1, r5, #28
 8003270:	1930      	adds	r0, r6, r4
 8003272:	f7ff ffc6 	bl	8003202 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 8003276:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 8003278:	f105 0120 	add.w	r1, r5, #32
 800327c:	1930      	adds	r0, r6, r4
 800327e:	f7ff ffc0 	bl	8003202 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 8003282:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
 8003284:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003288:	1930      	adds	r0, r6, r4
 800328a:	f7ff ffba 	bl	8003202 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800328e:	4420      	add	r0, r4
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 8003290:	5c33      	ldrb	r3, [r6, r0]
    }
 8003292:	3001      	adds	r0, #1
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 8003294:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    }
 8003298:	bd70      	pop	{r4, r5, r6, pc}

0800329a <ros::Subscriber<roberto_msgs::MotorState>::callback(unsigned char*)>:
      virtual void callback(unsigned char* data){
 800329a:	b570      	push	{r4, r5, r6, lr}
 800329c:	4605      	mov	r5, r0
        msg.deserialize(data);
 800329e:	f100 040c 	add.w	r4, r0, #12
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7ff ffd5 	bl	8003252 <roberto_msgs::MotorState::deserialize(unsigned char*)>
        this->cb_(msg);
 80032a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80032aa:	4620      	mov	r0, r4
      }
 80032ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        this->cb_(msg);
 80032b0:	4718      	bx	r3

080032b2 <ros::Publisher::publish(ros::Msg const*)>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 80032b2:	68c3      	ldr	r3, [r0, #12]
 80032b4:	b410      	push	{r4}
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	6814      	ldr	r4, [r2, #0]
 80032ba:	460a      	mov	r2, r1
 80032bc:	6881      	ldr	r1, [r0, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	4623      	mov	r3, r4
 80032c2:	bc10      	pop	{r4}
 80032c4:	4718      	bx	r3
	...

080032c8 <UsartWithBuffer::UsartWithBuffer(int)>:
  UsartWithBuffer( int _baud = 115200) {
 80032c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    RX_Tail = 0;
 80032cc:	2400      	movs	r4, #0
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <UsartWithBuffer::UsartWithBuffer(int)+0xb4>)
  UsartWithBuffer( int _baud = 115200) {
 80032d0:	b086      	sub	sp, #24
 80032d2:	4607      	mov	r7, r0
 80032d4:	4688      	mov	r8, r1
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80032d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032da:	2101      	movs	r1, #1
    RX_Tail = 0;
 80032dc:	f8a3 4436 	strh.w	r4, [r3, #1078]	; 0x436
    RX_Head = 0;
 80032e0:	f8a3 4438 	strh.w	r4, [r3, #1080]	; 0x438
    TX_Tail = 0;
 80032e4:	869c      	strh	r4, [r3, #52]	; 0x34
    TX_Head = 0;
 80032e6:	865c      	strh	r4, [r3, #50]	; 0x32
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80032e8:	f7fe f862 	bl	80013b0 <RCC_APB2PeriphClockCmd>
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 80032ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80032f0:	2603      	movs	r6, #3
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 80032f2:	f8ad 3004 	strh.w	r3, [sp, #4]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 80032f6:	2318      	movs	r3, #24
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80032f8:	4d21      	ldr	r5, [pc, #132]	; (8003380 <UsartWithBuffer::UsartWithBuffer(int)+0xb8>)
 80032fa:	a901      	add	r1, sp, #4
 80032fc:	4628      	mov	r0, r5
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 80032fe:	f88d 3007 	strb.w	r3, [sp, #7]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8003302:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8003306:	f7fd fc8a 	bl	8000c1e <GPIO_Init>
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 800330a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330e:	f8ad 3004 	strh.w	r3, [sp, #4]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003312:	2304      	movs	r3, #4
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8003314:	4628      	mov	r0, r5
 8003316:	eb0d 0103 	add.w	r1, sp, r3
    USART_Cmd(USART1, ENABLE);  
 800331a:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800331e:	f88d 3007 	strb.w	r3, [sp, #7]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8003322:	f88d 6006 	strb.w	r6, [sp, #6]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8003326:	f7fd fc7a 	bl	8000c1e <GPIO_Init>
    USART_Cmd(USART1, ENABLE);  
 800332a:	4628      	mov	r0, r5
 800332c:	2101      	movs	r1, #1
 800332e:	f7fe f98a 	bl	8001646 <USART_Cmd>
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003332:	230c      	movs	r3, #12
    USART_Init(USART1, &usart1_init_struct);
 8003334:	a902      	add	r1, sp, #8
 8003336:	4628      	mov	r0, r5
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003338:	f8ad 3012 	strh.w	r3, [sp, #18]
    usart1_init_struct.USART_BaudRate = _baud;   
 800333c:	f8cd 8008 	str.w	r8, [sp, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 8003340:	f8ad 400c 	strh.w	r4, [sp, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;   
 8003344:	f8ad 400e 	strh.w	r4, [sp, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8003348:	f8ad 4010 	strh.w	r4, [sp, #16]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800334c:	f8ad 4014 	strh.w	r4, [sp, #20]
    USART_Init(USART1, &usart1_init_struct);
 8003350:	f7fe f902 	bl	8001558 <USART_Init>
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8003354:	4622      	mov	r2, r4
 8003356:	4628      	mov	r0, r5
 8003358:	f240 7127 	movw	r1, #1831	; 0x727
 800335c:	f7fe f97f 	bl	800165e <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003360:	4628      	mov	r0, r5
 8003362:	2201      	movs	r2, #1
 8003364:	f240 5125 	movw	r1, #1317	; 0x525
 8003368:	f7fe f979 	bl	800165e <USART_ITConfig>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800336c:	2220      	movs	r2, #32
  }
 800336e:	4638      	mov	r0, r7
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <UsartWithBuffer::UsartWithBuffer(int)+0xbc>)
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	b006      	add	sp, #24
 8003376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800337a:	bf00      	nop
 800337c:	20000884 	.word	0x20000884
 8003380:	40010800 	.word	0x40010800
 8003384:	e000e100 	.word	0xe000e100

08003388 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::requestSyncTime()>:
      void requestSyncTime()
 8003388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      data()
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::requestSyncTime()+0x24>)
        publish(TopicInfo::ID_TIME, &t);
 800338c:	aa01      	add	r2, sp, #4
 800338e:	9301      	str	r3, [sp, #4]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8003390:	2300      	movs	r3, #0
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	6803      	ldr	r3, [r0, #0]
 8003398:	210a      	movs	r1, #10
 800339a:	681b      	ldr	r3, [r3, #0]
      void requestSyncTime()
 800339c:	4604      	mov	r4, r0
        publish(TopicInfo::ID_TIME, &t);
 800339e:	4798      	blx	r3
      }
    }

    unsigned long time(){return millis();}
 80033a0:	f7fd f898 	bl	80004d4 <millis>
        rt_time = hardware_.time();
 80033a4:	60e0      	str	r0, [r4, #12]
      }
 80033a6:	b004      	add	sp, #16
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop
 80033ac:	0800b224 	.word	0x0800b224

080033b0 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()>:
      buffer_size(0)
 80033b0:	2200      	movs	r2, #0
      void negotiateTopics()
 80033b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b6:	4605      	mov	r5, r0
            ti.buffer_size = OUTPUT_SIZE;
 80033b8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()+0xb4>)
      void negotiateTopics()
 80033be:	b086      	sub	sp, #24
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()+0xb8>)
 80033c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80033c8:	9302      	str	r3, [sp, #8]
 80033ca:	9303      	str	r3, [sp, #12]
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	9205      	str	r2, [sp, #20]
 80033d0:	f600 0418 	addw	r4, r0, #2072	; 0x818
 80033d4:	f600 067c 	addw	r6, r0, #2172	; 0x87c
          if(publishers[i] != 0) // non-empty slot
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	b1bb      	cbz	r3, 800340c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()+0x5c>
            ti.topic_id = publishers[i]->id_;
 80033dc:	689a      	ldr	r2, [r3, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 80033de:	6858      	ldr	r0, [r3, #4]
            ti.topic_id = publishers[i]->id_;
 80033e0:	f8ad 2004 	strh.w	r2, [sp, #4]
            ti.topic_name = (char *) publishers[i]->topic_;
 80033e4:	681a      	ldr	r2, [r3, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 80033e6:	6803      	ldr	r3, [r0, #0]
            ti.topic_name = (char *) publishers[i]->topic_;
 80033e8:	9202      	str	r2, [sp, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4798      	blx	r3
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80033ee:	6823      	ldr	r3, [r4, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 80033f0:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80033f2:	6858      	ldr	r0, [r3, #4]
 80033f4:	6803      	ldr	r3, [r0, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4798      	blx	r3
            publish( publishers[i]->getEndpointType(), &ti );
 80033fa:	6821      	ldr	r1, [r4, #0]
 80033fc:	682b      	ldr	r3, [r5, #0]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80033fe:	9004      	str	r0, [sp, #16]
            ti.buffer_size = OUTPUT_SIZE;
 8003400:	9705      	str	r7, [sp, #20]
            publish( publishers[i]->getEndpointType(), &ti );
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	466a      	mov	r2, sp
 8003406:	6909      	ldr	r1, [r1, #16]
 8003408:	4628      	mov	r0, r5
 800340a:	4798      	blx	r3
 800340c:	3404      	adds	r4, #4
        for(i = 0; i < MAX_PUBLISHERS; i++)
 800340e:	42b4      	cmp	r4, r6
 8003410:	d1e2      	bne.n	80033d8 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()+0x28>
            ti.buffer_size = INPUT_SIZE;
 8003412:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003416:	f505 660e 	add.w	r6, r5, #2272	; 0x8e0
          if(subscribers[i] != 0) // non-empty slot
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	b1c8      	cbz	r0, 8003452 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()+0xa2>
            ti.topic_id = subscribers[i]->id_;
 800341e:	6843      	ldr	r3, [r0, #4]
 8003420:	f8ad 3004 	strh.w	r3, [sp, #4]
            ti.topic_name = (char *) subscribers[i]->topic_;
 8003424:	6883      	ldr	r3, [r0, #8]
 8003426:	9302      	str	r3, [sp, #8]
            ti.message_type = (char *) subscribers[i]->getMsgType();
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4798      	blx	r3
 800342e:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	6803      	ldr	r3, [r0, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4798      	blx	r3
            publish( subscribers[i]->getEndpointType(), &ti );
 8003438:	682b      	ldr	r3, [r5, #0]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800343a:	9004      	str	r0, [sp, #16]
            publish( subscribers[i]->getEndpointType(), &ti );
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	f8d3 8000 	ldr.w	r8, [r3]
 8003442:	6803      	ldr	r3, [r0, #0]
            ti.buffer_size = INPUT_SIZE;
 8003444:	9705      	str	r7, [sp, #20]
            publish( subscribers[i]->getEndpointType(), &ti );
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4798      	blx	r3
 800344a:	466a      	mov	r2, sp
 800344c:	4601      	mov	r1, r0
 800344e:	4628      	mov	r0, r5
 8003450:	47c0      	blx	r8
 8003452:	3404      	adds	r4, #4
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8003454:	42a6      	cmp	r6, r4
 8003456:	d1e0      	bne.n	800341a <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()+0x6a>
        configured_ = true;
 8003458:	2301      	movs	r3, #1
 800345a:	f885 38f4 	strb.w	r3, [r5, #2292]	; 0x8f4
      }
 800345e:	b006      	add	sp, #24
 8003460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003464:	0800b23c 	.word	0x0800b23c
 8003468:	0800b44c 	.word	0x0800b44c

0800346c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)>:
      void syncTime(uint8_t * data)
 800346c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)+0x74>)
 8003470:	460d      	mov	r5, r1
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	9302      	str	r3, [sp, #8]
 800347a:	9303      	str	r3, [sp, #12]
 800347c:	f7fd f82a 	bl	80004d4 <millis>
        t.deserialize(data);
 8003480:	4629      	mov	r1, r5
        t.data.sec += offset/1000;
 8003482:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
        uint32_t offset = hardware_.time() - rt_time;
 8003486:	68e2      	ldr	r2, [r4, #12]
 8003488:	1a86      	subs	r6, r0, r2
        t.deserialize(data);
 800348a:	a801      	add	r0, sp, #4
 800348c:	f7ff fa56 	bl	800293c <std_msgs::Time::deserialize(unsigned char*)>
        t.data.sec += offset/1000;
 8003490:	fbb6 f2f5 	udiv	r2, r6, r5
 8003494:	9b02      	ldr	r3, [sp, #8]
 8003496:	4413      	add	r3, r2
        t.data.nsec += (offset%1000)*1000000UL;
 8003498:	fb05 6212 	mls	r2, r5, r2, r6
        t.data.sec += offset/1000;
 800349c:	9302      	str	r3, [sp, #8]
        t.data.nsec += (offset%1000)*1000000UL;
 800349e:	4e11      	ldr	r6, [pc, #68]	; (80034e4 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)+0x78>)
 80034a0:	9b03      	ldr	r3, [sp, #12]
 80034a2:	fb06 3202 	mla	r2, r6, r2, r3
 80034a6:	9203      	str	r2, [sp, #12]
 80034a8:	f7fd f814 	bl	80004d4 <millis>
        sec_offset = new_now.sec - ms/1000 - 1;
 80034ac:	fbb0 f3f5 	udiv	r3, r0, r5
 80034b0:	9a02      	ldr	r2, [sp, #8]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 80034b2:	9903      	ldr	r1, [sp, #12]
        sec_offset = new_now.sec - ms/1000 - 1;
 80034b4:	3a01      	subs	r2, #1
 80034b6:	1ad2      	subs	r2, r2, r3
 80034b8:	6122      	str	r2, [r4, #16]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 80034ba:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)+0x7c>)
 80034bc:	fb05 0313 	mls	r3, r5, r3, r0
 80034c0:	440a      	add	r2, r1
 80034c2:	4621      	mov	r1, r4
 80034c4:	fb06 2313 	mls	r3, r6, r3, r2
        normalizeSecNSec(sec_offset, nsec_offset);
 80034c8:	f104 0010 	add.w	r0, r4, #16
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 80034cc:	f841 3f14 	str.w	r3, [r1, #20]!
        normalizeSecNSec(sec_offset, nsec_offset);
 80034d0:	f001 fa14 	bl	80048fc <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 80034d4:	f7fc fffe 	bl	80004d4 <millis>
        last_sync_receive_time = hardware_.time();
 80034d8:	f8c4 08fc 	str.w	r0, [r4, #2300]	; 0x8fc
      }
 80034dc:	b004      	add	sp, #16
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	0800b224 	.word	0x0800b224
 80034e4:	000f4240 	.word	0x000f4240
 80034e8:	3b9aca00 	.word	0x3b9aca00

080034ec <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()>:
      virtual int spinOnce(){
 80034ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	f7fc ffef 	bl	80004d4 <millis>
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 80034f6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80034fa:	f8d4 38fc 	ldr.w	r3, [r4, #2300]	; 0x8fc
 80034fe:	4605      	mov	r5, r0
 8003500:	1ac3      	subs	r3, r0, r3
 8003502:	4293      	cmp	r3, r2
            configured_ = false;
 8003504:	bf84      	itt	hi
 8003506:	2300      	movhi	r3, #0
 8003508:	f884 38f4 	strbhi.w	r3, [r4, #2292]	; 0x8f4
        if ( mode_ != MODE_FIRST_FF){
 800350c:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
 8003510:	b133      	cbz	r3, 8003520 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x34>
          if (c_time > last_msg_timeout_time){
 8003512:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003516:	4283      	cmp	r3, r0
            mode_ = MODE_FIRST_FF;
 8003518:	bf3c      	itt	cc
 800351a:	2300      	movcc	r3, #0
 800351c:	f8c4 38e0 	strcc.w	r3, [r4, #2272]	; 0x8e0
            mode_ = MODE_FIRST_FF;
 8003520:	2700      	movs	r7, #0
    uint16_t tempHead = RX_Head;
 8003522:	4e7a      	ldr	r6, [pc, #488]	; (800370c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x220>)
                  subscribers[topic_-100]->callback( message_in );
 8003524:	f104 0818 	add.w	r8, r4, #24
 8003528:	f8b6 2438 	ldrh.w	r2, [r6, #1080]	; 0x438
    uint16_t tempTail = RX_Tail;
 800352c:	f8b6 3436 	ldrh.w	r3, [r6, #1078]	; 0x436
    uint16_t tempHead = RX_Head;
 8003530:	b292      	uxth	r2, r2
    uint16_t tempTail = RX_Tail;
 8003532:	b29b      	uxth	r3, r3
      if(com->dataAvailable()){
 8003534:	429a      	cmp	r2, r3
 8003536:	f000 80e3 	beq.w	8003700 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x214>
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800353a:	b672      	cpsid	i
    ans = (RX[RX_Tail]);
 800353c:	f8b6 3436 	ldrh.w	r3, [r6, #1078]	; 0x436
 8003540:	b29b      	uxth	r3, r3
 8003542:	4433      	add	r3, r6
 8003544:	f893 243a 	ldrb.w	r2, [r3, #1082]	; 0x43a
    RX_Tail = (RX_Tail + 1) & (UART_BUFSIZE-1);
 8003548:	f8b6 3436 	ldrh.w	r3, [r6, #1078]	; 0x436
    ans = (RX[RX_Tail]);
 800354c:	b2d2      	uxtb	r2, r2
    RX_Tail = (RX_Tail + 1) & (UART_BUFSIZE-1);
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003554:	f8a6 3436 	strh.w	r3, [r6, #1078]	; 0x436
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8003558:	b662      	cpsie	i
          checksum_ += data;
 800355a:	f8d4 38f0 	ldr.w	r3, [r4, #2288]	; 0x8f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800355e:	f8d4 98e0 	ldr.w	r9, [r4, #2272]	; 0x8e0
          checksum_ += data;
 8003562:	4413      	add	r3, r2
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8003564:	f1b9 0f07 	cmp.w	r9, #7
          checksum_ += data;
 8003568:	f8c4 38f0 	str.w	r3, [r4, #2288]	; 0x8f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800356c:	d111      	bne.n	8003592 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xa6>
            message_in[index_++] = data;
 800356e:	f8d4 38ec 	ldr.w	r3, [r4, #2284]	; 0x8ec
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	4423      	add	r3, r4
 8003576:	f8c4 18ec 	str.w	r1, [r4, #2284]	; 0x8ec
 800357a:	761a      	strb	r2, [r3, #24]
            bytes_--;
 800357c:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 8003580:	3b01      	subs	r3, #1
 8003582:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ce      	bne.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
              mode_ = MODE_MSG_CHECKSUM;
 800358a:	2308      	movs	r3, #8
              mode_++;
 800358c:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8003590:	e7ca      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
          }else if( mode_ == MODE_FIRST_FF ){
 8003592:	f1b9 0f00 	cmp.w	r9, #0
 8003596:	d114      	bne.n	80035c2 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xd6>
            if(data == 0xff){
 8003598:	2aff      	cmp	r2, #255	; 0xff
 800359a:	d107      	bne.n	80035ac <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xc0>
              mode_++;
 800359c:	2301      	movs	r3, #1
 800359e:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 80035a2:	f105 0314 	add.w	r3, r5, #20
 80035a6:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80035aa:	e7bd      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
    unsigned long time(){return millis();}
 80035ac:	f7fc ff92 	bl	80004d4 <millis>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 80035b0:	1b40      	subs	r0, r0, r5
 80035b2:	2805      	cmp	r0, #5
 80035b4:	d9b8      	bls.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
              configured_=false;
 80035b6:	f884 98f4 	strb.w	r9, [r4, #2292]	; 0x8f4
              return -2;
 80035ba:	f06f 0001 	mvn.w	r0, #1
 80035be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          }else if( mode_ == MODE_PROTOCOL_VER ){
 80035c2:	f1b9 0f01 	cmp.w	r9, #1
 80035c6:	d10d      	bne.n	80035e4 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xf8>
            if(data == PROTOCOL_VER){
 80035c8:	2afe      	cmp	r2, #254	; 0xfe
 80035ca:	d101      	bne.n	80035d0 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xe4>
              mode_++;
 80035cc:	2302      	movs	r3, #2
 80035ce:	e7dd      	b.n	800358c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xa0>
              if (configured_ == false)
 80035d0:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
              mode_ = MODE_FIRST_FF;
 80035d4:	f8c4 78e0 	str.w	r7, [r4, #2272]	; 0x8e0
              if (configured_ == false)
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1a5      	bne.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
 80035dc:	4620      	mov	r0, r4
 80035de:	f7ff fed3 	bl	8003388 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::requestSyncTime()>
 80035e2:	e7a1      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 80035e4:	f1b9 0f02 	cmp.w	r9, #2
 80035e8:	d109      	bne.n	80035fe <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x112>
            mode_++;
 80035ea:	2303      	movs	r3, #3
            bytes_ = data;
 80035ec:	f8c4 28e4 	str.w	r2, [r4, #2276]	; 0x8e4
            index_ = 0;
 80035f0:	f8c4 78ec 	str.w	r7, [r4, #2284]	; 0x8ec
            mode_++;
 80035f4:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
            checksum_ = data;               /* first byte included in checksum */
 80035f8:	f8c4 28f0 	str.w	r2, [r4, #2288]	; 0x8f0
 80035fc:	e794      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 80035fe:	f1b9 0f03 	cmp.w	r9, #3
 8003602:	d107      	bne.n	8003614 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x128>
            bytes_ += data<<8;
 8003604:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 8003608:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800360c:	f8c4 28e4 	str.w	r2, [r4, #2276]	; 0x8e4
	    mode_++;
 8003610:	2304      	movs	r3, #4
 8003612:	e7bb      	b.n	800358c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xa0>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 8003614:	f1b9 0f04 	cmp.w	r9, #4
 8003618:	d10b      	bne.n	8003632 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x146>
            if( (checksum_%256) == 255)
 800361a:	425a      	negs	r2, r3
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	b2db      	uxtb	r3, r3
 8003620:	bf58      	it	pl
 8003622:	4253      	negpl	r3, r2
 8003624:	2bff      	cmp	r3, #255	; 0xff
 8003626:	d101      	bne.n	800362c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x140>
	      mode_++;
 8003628:	2305      	movs	r3, #5
 800362a:	e7af      	b.n	800358c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0xa0>
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800362c:	f8c4 78e0 	str.w	r7, [r4, #2272]	; 0x8e0
 8003630:	e77a      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8003632:	f1b9 0f05 	cmp.w	r9, #5
 8003636:	d103      	bne.n	8003640 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x154>
            topic_ = data;
 8003638:	f8c4 28e8 	str.w	r2, [r4, #2280]	; 0x8e8
            mode_++;
 800363c:	2306      	movs	r3, #6
 800363e:	e7d9      	b.n	80035f4 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x108>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8003640:	f1b9 0f06 	cmp.w	r9, #6
 8003644:	d10b      	bne.n	800365e <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x172>
            topic_ += data<<8;
 8003646:	f8d4 38e8 	ldr.w	r3, [r4, #2280]	; 0x8e8
 800364a:	eb03 2202 	add.w	r2, r3, r2, lsl #8
            mode_ = MODE_MESSAGE;
 800364e:	2307      	movs	r3, #7
            topic_ += data<<8;
 8003650:	f8c4 28e8 	str.w	r2, [r4, #2280]	; 0x8e8
            mode_ = MODE_MESSAGE;
 8003654:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
            if(bytes_ == 0)
 8003658:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 800365c:	e793      	b.n	8003586 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x9a>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 800365e:	f1b9 0f08 	cmp.w	r9, #8
 8003662:	f47f af61 	bne.w	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
            if( (checksum_%256) == 255){
 8003666:	425a      	negs	r2, r3
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	bf58      	it	pl
 800366e:	4253      	negpl	r3, r2
 8003670:	2bff      	cmp	r3, #255	; 0xff
            mode_ = MODE_FIRST_FF;
 8003672:	f8c4 78e0 	str.w	r7, [r4, #2272]	; 0x8e0
            if( (checksum_%256) == 255){
 8003676:	f47f af57 	bne.w	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 800367a:	f8d4 38e8 	ldr.w	r3, [r4, #2280]	; 0x8e8
 800367e:	b96b      	cbnz	r3, 800369c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x1b0>
                requestSyncTime();
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff fe81 	bl	8003388 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::requestSyncTime()>
                negotiateTopics();
 8003686:	4620      	mov	r0, r4
 8003688:	f7ff fe92 	bl	80033b0 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::negotiateTopics()>
                last_sync_time = c_time;
 800368c:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
                last_sync_receive_time = c_time;
 8003690:	f8c4 58fc 	str.w	r5, [r4, #2300]	; 0x8fc
                return -1;
 8003694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              }else if(topic_ == TopicInfo::ID_TIME){
 800369c:	2b0a      	cmp	r3, #10
 800369e:	d104      	bne.n	80036aa <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x1be>
                syncTime(message_in);
 80036a0:	4641      	mov	r1, r8
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff fee2 	bl	800346c <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)>
 80036a8:	e73e      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d108      	bne.n	80036c0 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x1d4>
                  req_param_resp.deserialize(message_in);
 80036ae:	4641      	mov	r1, r8
 80036b0:	f604 1008 	addw	r0, r4, #2312	; 0x908
 80036b4:	f7ff fbe3 	bl	8002e7e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>
                  param_recieved= true;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f884 3904 	strb.w	r3, [r4, #2308]	; 0x904
 80036be:	e733      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 80036c0:	2b0b      	cmp	r3, #11
 80036c2:	d102      	bne.n	80036ca <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x1de>
                  configured_ = false;
 80036c4:	f884 78f4 	strb.w	r7, [r4, #2292]	; 0x8f4
 80036c8:	e72e      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
                if(subscribers[topic_-100])
 80036ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80036ce:	f8d3 06ec 	ldr.w	r0, [r3, #1772]	; 0x6ec
 80036d2:	2800      	cmp	r0, #0
 80036d4:	f43f af28 	beq.w	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
                  subscribers[topic_-100]->callback( message_in );
 80036d8:	6803      	ldr	r3, [r0, #0]
 80036da:	4641      	mov	r1, r8
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4798      	blx	r3
 80036e0:	e722      	b.n	8003528 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x3c>
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 80036e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036e6:	f8d4 38f8 	ldr.w	r3, [r4, #2296]	; 0x8f8
 80036ea:	1aeb      	subs	r3, r5, r3
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d904      	bls.n	80036fa <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x20e>
          requestSyncTime();
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff fe49 	bl	8003388 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::requestSyncTime()>
          last_sync_time = c_time;
 80036f6:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
        return 0;
 80036fa:	2000      	movs	r0, #0
 80036fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8003700:	f894 08f4 	ldrb.w	r0, [r4, #2292]	; 0x8f4
 8003704:	2800      	cmp	r0, #0
 8003706:	d1ec      	bne.n	80036e2 <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()+0x1f6>
      }
 8003708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800370c:	20000884 	.word	0x20000884

08003710 <main>:
int main(){
 8003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003714:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
  RCC_Configuration();
 8003718:	f7fc feec 	bl	80004f4 <RCC_Configuration>
  SysTick_Init();
 800371c:	f7fc fe98 	bl	8000450 <SysTick_Init>
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8003720:	2101      	movs	r1, #1
 8003722:	48c2      	ldr	r0, [pc, #776]	; (8003a2c <main+0x31c>)
 8003724:	f7fd fb0e 	bl	8000d44 <GPIO_PinRemapConfig>
  I2C1_Init();
 8003728:	f7fc fe58 	bl	80003dc <I2C1_Init>
  DEBUG_Init();
 800372c:	f7fc fe01 	bl	8000332 <DEBUG_Init>
  SHUTDOWN_Init();
 8003730:	f7fc fe26 	bl	8000380 <SHUTDOWN_Init>
  LED_Init();
 8003734:	f7fc fdba 	bl	80002ac <LED_Init>
        mode_ = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	f241 121c 	movw	r2, #4380	; 0x111c
 800373e:	4cbc      	ldr	r4, [pc, #752]	; (8003a30 <main+0x320>)
 8003740:	50a3      	str	r3, [r4, r2]
        bytes_ = 0;
 8003742:	f504 5289 	add.w	r2, r4, #4384	; 0x1120
 8003746:	6013      	str	r3, [r2, #0]
        index_ = 0;
 8003748:	f241 1228 	movw	r2, #4392	; 0x1128
 800374c:	50a3      	str	r3, [r4, r2]
        topic_ = 0;
 800374e:	f241 1224 	movw	r2, #4388	; 0x1124
 8003752:	50a3      	str	r3, [r4, r2]
 8003754:	f604 023c 	addw	r2, r4, #2108	; 0x83c
 8003758:	f602 0178 	addw	r1, r2, #2168	; 0x878
          if(subscribers[i] == 0){ // empty slot
 800375c:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8003760:	2800      	cmp	r0, #0
 8003762:	f040 838f 	bne.w	8003e84 <main+0x774>
            subscribers[i] = (Subscriber_*) &s;
 8003766:	48b3      	ldr	r0, [pc, #716]	; (8003a34 <main+0x324>)
 8003768:	f203 211e 	addw	r1, r3, #542	; 0x21e
 800376c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003770:	f100 0574 	add.w	r5, r0, #116	; 0x74
            s.id_ = i+100;
 8003774:	3364      	adds	r3, #100	; 0x64
            subscribers[i] = (Subscriber_*) &s;
 8003776:	f8c1 5840 	str.w	r5, [r1, #2112]	; 0x840
            s.id_ = i+100;
 800377a:	6783      	str	r3, [r0, #120]	; 0x78
 800377c:	f602 0114 	addw	r1, r2, #2068	; 0x814
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8003780:	4608      	mov	r0, r1
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 8003782:	2300      	movs	r3, #0
          if(publishers[i] == 0){ // empty slot
 8003784:	f850 5f04 	ldr.w	r5, [r0, #4]!
 8003788:	2d00      	cmp	r5, #0
 800378a:	f040 8380 	bne.w	8003e8e <main+0x77e>
            publishers[i] = &p;
 800378e:	48a9      	ldr	r0, [pc, #676]	; (8003a34 <main+0x324>)
 8003790:	f203 2506 	addw	r5, r3, #518	; 0x206
 8003794:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003798:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800379c:	337d      	adds	r3, #125	; 0x7d
            publishers[i] = &p;
 800379e:	f8c5 683c 	str.w	r6, [r5, #2108]	; 0x83c
            p.id_ = i+100+MAX_SUBSCRIBERS;
 80037a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
            p.nh_ = this;
 80037a6:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 80037aa:	2300      	movs	r3, #0
          if(publishers[i] == 0){ // empty slot
 80037ac:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80037b0:	2800      	cmp	r0, #0
 80037b2:	f040 8371 	bne.w	8003e98 <main+0x788>
            publishers[i] = &p;
 80037b6:	499f      	ldr	r1, [pc, #636]	; (8003a34 <main+0x324>)
 80037b8:	f203 2006 	addw	r0, r3, #518	; 0x206
 80037bc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80037c0:	f101 05c8 	add.w	r5, r1, #200	; 0xc8
            p.id_ = i+100+MAX_SUBSCRIBERS;
 80037c4:	337d      	adds	r3, #125	; 0x7d
            publishers[i] = &p;
 80037c6:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
            p.id_ = i+100+MAX_SUBSCRIBERS;
 80037ca:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
            p.nh_ = this;
 80037ce:	f8c1 20d4 	str.w	r2, [r1, #212]	; 0xd4
  shuttingDown = false;
 80037d2:	f04f 0300 	mov.w	r3, #0
  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 80037d6:	2704      	movs	r7, #4
  shuttingDown = false;
 80037d8:	f884 383a 	strb.w	r3, [r4, #2106]	; 0x83a
    L = 0.17;
 80037dc:	4b96      	ldr	r3, [pc, #600]	; (8003a38 <main+0x328>)
  delay(1000);
 80037de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    L = 0.17;
 80037e2:	60e3      	str	r3, [r4, #12]
    d = 0.045;
 80037e4:	4b95      	ldr	r3, [pc, #596]	; (8003a3c <main+0x32c>)
  SL.m_ServoLimitMin = 7925;
 80037e6:	f641 66f5 	movw	r6, #7925	; 0x1ef5
    d = 0.045;
 80037ea:	6123      	str	r3, [r4, #16]
  delay(1000);
 80037ec:	f7fc fe56 	bl	800049c <delay>
  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 80037f0:	4b93      	ldr	r3, [pc, #588]	; (8003a40 <main+0x330>)
 80037f2:	4a94      	ldr	r2, [pc, #592]	; (8003a44 <main+0x334>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	9700      	str	r7, [sp, #0]
 80037f8:	a81c      	add	r0, sp, #112	; 0x70
 80037fa:	f001 f820 	bl	800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SL.m_ServoPin = GPIO_Pin_9;
 80037fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003802:	9322      	str	r3, [sp, #136]	; 0x88
  SL.m_ServoLimitMax = 1425;
 8003804:	f240 5391 	movw	r3, #1425	; 0x591
 8003808:	9320      	str	r3, [sp, #128]	; 0x80
  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800380a:	2303      	movs	r3, #3
  SL.m_ServoPort = GPIOB;
 800380c:	4d8e      	ldr	r5, [pc, #568]	; (8003a48 <main+0x338>)
  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4a8e      	ldr	r2, [pc, #568]	; (8003a4c <main+0x33c>)
 8003812:	4b8b      	ldr	r3, [pc, #556]	; (8003a40 <main+0x330>)
 8003814:	2101      	movs	r1, #1
 8003816:	a836      	add	r0, sp, #216	; 0xd8
  SL.m_ServoPort = GPIOB;
 8003818:	9523      	str	r5, [sp, #140]	; 0x8c
  SL.m_ServoLimitMin = 7925;
 800381a:	9621      	str	r6, [sp, #132]	; 0x84
  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800381c:	f001 f80f 	bl	800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SR.m_ServoLimitMin = 1825;
 8003820:	f240 7321 	movw	r3, #1825	; 0x721
 8003824:	933b      	str	r3, [sp, #236]	; 0xec
  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 8003826:	2301      	movs	r3, #1
  SR.m_ServoPin = GPIO_Pin_8;
 8003828:	f44f 7880 	mov.w	r8, #256	; 0x100
  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4a88      	ldr	r2, [pc, #544]	; (8003a50 <main+0x340>)
 8003830:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <main+0x344>)
 8003832:	2102      	movs	r1, #2
 8003834:	a850      	add	r0, sp, #320	; 0x140
  SR.m_ServoPin = GPIO_Pin_8;
 8003836:	f8cd 80f0 	str.w	r8, [sp, #240]	; 0xf0
  SR.m_ServoPort = GPIOB;
 800383a:	953d      	str	r5, [sp, #244]	; 0xf4
  SR.m_ServoLimitMax = 7925;
 800383c:	963a      	str	r6, [sp, #232]	; 0xe8
  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800383e:	f000 fffe 	bl	800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
              GPIO_Pin_8, GPIOA);
 8003842:	2301      	movs	r3, #1
 8003844:	9303      	str	r3, [sp, #12]
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	4e83      	ldr	r6, [pc, #524]	; (8003a58 <main+0x348>)
 800384c:	4a83      	ldr	r2, [pc, #524]	; (8003a5c <main+0x34c>)
 800384e:	9606      	str	r6, [sp, #24]
 8003850:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003854:	f8cd 8014 	str.w	r8, [sp, #20]
 8003858:	9604      	str	r6, [sp, #16]
 800385a:	9202      	str	r2, [sp, #8]
 800385c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003864:	a850      	add	r0, sp, #320	; 0x140
 8003866:	f000 fff0 	bl	800484a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FR.encoderAddr = (0x10 | 0x08);
 800386a:	f04f 0318 	mov.w	r3, #24
  FR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800386e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8003a7c <main+0x36c>
 8003872:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8003a80 <main+0x370>
  FR.wheelRadius = wheelRadius;
 8003876:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8003a84 <main+0x374>
  FR.encoderAddr = (0x10 | 0x08);
 800387a:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
  FR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800387e:	4a78      	ldr	r2, [pc, #480]	; (8003a60 <main+0x350>)
 8003880:	4b78      	ldr	r3, [pc, #480]	; (8003a64 <main+0x354>)
 8003882:	4979      	ldr	r1, [pc, #484]	; (8003a68 <main+0x358>)
 8003884:	a850      	add	r0, sp, #320	; 0x140
 8003886:	f8cd 9004 	str.w	r9, [sp, #4]
 800388a:	f8cd a000 	str.w	sl, [sp]
 800388e:	f000 ffee 	bl	800486e <motorSettings::setRegulator(float, float, float, float, float)>
  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 8003892:	4b76      	ldr	r3, [pc, #472]	; (8003a6c <main+0x35c>)
 8003894:	4a76      	ldr	r2, [pc, #472]	; (8003a70 <main+0x360>)
 8003896:	2102      	movs	r1, #2
 8003898:	9700      	str	r7, [sp, #0]
 800389a:	a86a      	add	r0, sp, #424	; 0x1a8
  FR.wheelRadius = wheelRadius;
 800389c:	f8cd 81a4 	str.w	r8, [sp, #420]	; 0x1a4
  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 80038a0:	f000 ffcd 	bl	800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
              GPIO_Pin_1, GPIOB);
 80038a4:	2302      	movs	r3, #2
 80038a6:	f04f 0b10 	mov.w	fp, #16
 80038aa:	9305      	str	r3, [sp, #20]
 80038ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b0:	e88d 0840 	stmia.w	sp, {r6, fp}
 80038b4:	462a      	mov	r2, r5
 80038b6:	9506      	str	r5, [sp, #24]
 80038b8:	9504      	str	r5, [sp, #16]
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	9602      	str	r6, [sp, #8]
 80038be:	2320      	movs	r3, #32
 80038c0:	4639      	mov	r1, r7
 80038c2:	a86a      	add	r0, sp, #424	; 0x1a8
 80038c4:	f000 ffc1 	bl	800484a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FL.setRegulator(FF,KP,KI,KD,integralSaturation);
 80038c8:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <main+0x354>)
 80038ca:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <main+0x350>)
 80038cc:	4966      	ldr	r1, [pc, #408]	; (8003a68 <main+0x358>)
 80038ce:	a86a      	add	r0, sp, #424	; 0x1a8
 80038d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80038d4:	f8cd a000 	str.w	sl, [sp]
  FL.encoderAddr = (0x10);
 80038d8:	f8ad b1f0 	strh.w	fp, [sp, #496]	; 0x1f0
  FL.setRegulator(FF,KP,KI,KD,integralSaturation);
 80038dc:	f000 ffc7 	bl	800486e <motorSettings::setRegulator(float, float, float, float, float)>
  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 80038e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038e4:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <main+0x364>)
 80038e6:	2102      	movs	r1, #2
 80038e8:	9700      	str	r7, [sp, #0]
 80038ea:	a884      	add	r0, sp, #528	; 0x210
  FL.wheelRadius = wheelRadius;
 80038ec:	f8cd 820c 	str.w	r8, [sp, #524]	; 0x20c
  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 80038f0:	f000 ffa5 	bl	800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
    GPIO_Pin_3, GPIOA);
 80038f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038f8:	f04f 0b08 	mov.w	fp, #8
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003902:	462a      	mov	r2, r5
 8003904:	9606      	str	r6, [sp, #24]
 8003906:	9504      	str	r5, [sp, #16]
 8003908:	9502      	str	r5, [sp, #8]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	9500      	str	r5, [sp, #0]
 800390e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003916:	a884      	add	r0, sp, #528	; 0x210
 8003918:	f8cd b014 	str.w	fp, [sp, #20]
 800391c:	f000 ff95 	bl	800484a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RL.encoderAddr = (0x10 | 0x04);
 8003920:	2314      	movs	r3, #20
  RL.setRegulator(FF,KP,KI,KD,integralSaturation);
 8003922:	4a4f      	ldr	r2, [pc, #316]	; (8003a60 <main+0x350>)
  RL.encoderAddr = (0x10 | 0x04);
 8003924:	f8ad 3258 	strh.w	r3, [sp, #600]	; 0x258
  RL.setRegulator(FF,KP,KI,KD,integralSaturation);
 8003928:	494f      	ldr	r1, [pc, #316]	; (8003a68 <main+0x358>)
 800392a:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <main+0x354>)
 800392c:	a884      	add	r0, sp, #528	; 0x210
 800392e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003932:	f8cd a000 	str.w	sl, [sp]
 8003936:	f000 ff9a 	bl	800486e <motorSettings::setRegulator(float, float, float, float, float)>
  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 800393a:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <main+0x344>)
 800393c:	4a4e      	ldr	r2, [pc, #312]	; (8003a78 <main+0x368>)
 800393e:	2102      	movs	r1, #2
 8003940:	9700      	str	r7, [sp, #0]
 8003942:	a89e      	add	r0, sp, #632	; 0x278
  RL.wheelRadius = wheelRadius;
 8003944:	f8cd 8274 	str.w	r8, [sp, #628]	; 0x274
  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 8003948:	f000 ff79 	bl	800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
              GPIO_Pin_11, GPIOA);
 800394c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003950:	9305      	str	r3, [sp, #20]
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	462a      	mov	r2, r5
 8003958:	9606      	str	r6, [sp, #24]
 800395a:	9504      	str	r5, [sp, #16]
 800395c:	9602      	str	r6, [sp, #8]
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	9600      	str	r6, [sp, #0]
 8003962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800396a:	a89e      	add	r0, sp, #632	; 0x278
 800396c:	f8cd b00c 	str.w	fp, [sp, #12]
 8003970:	f000 ff6b 	bl	800484a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 8003974:	231c      	movs	r3, #28
  RR.setRegulator(FF,KP,KI,KD,integralSaturation);
 8003976:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <main+0x350>)
 8003978:	493b      	ldr	r1, [pc, #236]	; (8003a68 <main+0x358>)
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 800397a:	f8ad 32c0 	strh.w	r3, [sp, #704]	; 0x2c0
  RR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800397e:	a89e      	add	r0, sp, #632	; 0x278
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <main+0x354>)
 8003982:	f8cd 9004 	str.w	r9, [sp, #4]
 8003986:	f8cd a000 	str.w	sl, [sp]
 800398a:	f000 ff70 	bl	800486e <motorSettings::setRegulator(float, float, float, float, float)>
  servo_left = motor::createMotor(&SL);
 800398e:	a81c      	add	r0, sp, #112	; 0x70
  RR.wheelRadius = wheelRadius;
 8003990:	f8cd 82dc 	str.w	r8, [sp, #732]	; 0x2dc
  servo_left = motor::createMotor(&SL);
 8003994:	f000 fbbe 	bl	8004114 <motor::createMotor(motorSettings*)>
  if(!servo_left->motorInit()){
 8003998:	6803      	ldr	r3, [r0, #0]
  servo_left = motor::createMotor(&SL);
 800399a:	6160      	str	r0, [r4, #20]
  if(!servo_left->motorInit()){
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4798      	blx	r3
  servo_right = motor::createMotor(&SR);
 80039a0:	a836      	add	r0, sp, #216	; 0xd8
 80039a2:	f000 fbb7 	bl	8004114 <motor::createMotor(motorSettings*)>
  if(!servo_right->motorInit()){
 80039a6:	6803      	ldr	r3, [r0, #0]
  servo_right = motor::createMotor(&SR);
 80039a8:	61a0      	str	r0, [r4, #24]
  if(!servo_right->motorInit()){
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4798      	blx	r3
  front_left = motor::createMotor(&FL);
 80039ae:	a86a      	add	r0, sp, #424	; 0x1a8
 80039b0:	f000 fbb0 	bl	8004114 <motor::createMotor(motorSettings*)>
 80039b4:	4d1f      	ldr	r5, [pc, #124]	; (8003a34 <main+0x324>)
  if(!front_left->motorInit()){
 80039b6:	6803      	ldr	r3, [r0, #0]
  front_left = motor::createMotor(&FL);
 80039b8:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
  if(!front_left->motorInit()){
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4798      	blx	r3
  front_right = motor::createMotor(&FR);
 80039c0:	a850      	add	r0, sp, #320	; 0x140
 80039c2:	f000 fba7 	bl	8004114 <motor::createMotor(motorSettings*)>
  if(!front_right->motorInit()){
 80039c6:	6803      	ldr	r3, [r0, #0]
  front_right = motor::createMotor(&FR);
 80039c8:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
  if(!front_right->motorInit()){
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4798      	blx	r3
  rear_left = motor::createMotor(&RL);
 80039d0:	a884      	add	r0, sp, #528	; 0x210
 80039d2:	f000 fb9f 	bl	8004114 <motor::createMotor(motorSettings*)>
  if(!rear_left->motorInit()){
 80039d6:	6803      	ldr	r3, [r0, #0]
  rear_left = motor::createMotor(&RL);
 80039d8:	f8c5 00e4 	str.w	r0, [r5, #228]	; 0xe4
  if(!rear_left->motorInit()){
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4798      	blx	r3
  rear_right = motor::createMotor(&RR);
 80039e0:	a89e      	add	r0, sp, #632	; 0x278
 80039e2:	f000 fb97 	bl	8004114 <motor::createMotor(motorSettings*)>
  if(!rear_right->motorInit()){
 80039e6:	6803      	ldr	r3, [r0, #0]
  rear_right = motor::createMotor(&RR);
 80039e8:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
  if(!rear_right->motorInit()){
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4798      	blx	r3
  odom_msg.data = new float[3];
 80039f0:	200c      	movs	r0, #12
 80039f2:	f000 ff4b 	bl	800488c <operator new[](unsigned int)>
  odom_msg.layout.dim_length = 1;
 80039f6:	f04f 0301 	mov.w	r3, #1
 80039fa:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
  odom_msg.layout.dim = &odomDim;
 80039fe:	f505 738e 	add.w	r3, r5, #284	; 0x11c
 8003a02:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
  odom_msg.layout.dim[0].size = 3;
 8003a06:	2303      	movs	r3, #3
  odom_msg.data = new float[3];
 8003a08:	f8c5 0118 	str.w	r0, [r5, #280]	; 0x118
  debug_msg.data = new float[6];
 8003a0c:	2018      	movs	r0, #24
  odom_msg.layout.dim[0].size = 3;
 8003a0e:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
  odom_msg.layout.dim[0].stride = 3;
 8003a12:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  odom_msg.data_length = 3;
 8003a16:	f885 3110 	strb.w	r3, [r5, #272]	; 0x110
  debug_msg.data = new float[6];
 8003a1a:	f000 ff37 	bl	800488c <operator new[](unsigned int)>
  debug_msg.layout.dim_length = 1;
 8003a1e:	f04f 0301 	mov.w	r3, #1
 8003a22:	f885 3134 	strb.w	r3, [r5, #308]	; 0x134
  debug_msg.layout.dim = &debugDim;
 8003a26:	f505 73ae 	add.w	r3, r5, #348	; 0x15c
 8003a2a:	e02d      	b.n	8003a88 <main+0x378>
 8003a2c:	00300200 	.word	0x00300200
 8003a30:	20000884 	.word	0x20000884
 8003a34:	2000197c 	.word	0x2000197c
 8003a38:	3e2e147b 	.word	0x3e2e147b
 8003a3c:	3d3851ec 	.word	0x3d3851ec
 8003a40:	40000800 	.word	0x40000800
 8003a44:	0800b562 	.word	0x0800b562
 8003a48:	40010c00 	.word	0x40010c00
 8003a4c:	0800b56d 	.word	0x0800b56d
 8003a50:	0800b579 	.word	0x0800b579
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40010800 	.word	0x40010800
 8003a5c:	40011000 	.word	0x40011000
 8003a60:	45bb8000 	.word	0x45bb8000
 8003a64:	457a0000 	.word	0x457a0000
 8003a68:	44c80000 	.word	0x44c80000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	0800b585 	.word	0x0800b585
 8003a74:	0800b590 	.word	0x0800b590
 8003a78:	0800b59a 	.word	0x0800b59a
 8003a7c:	41200000 	.word	0x41200000
 8003a80:	42200000 	.word	0x42200000
 8003a84:	3d23d70a 	.word	0x3d23d70a
 8003a88:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
  debug_msg.layout.dim[0].size = 6;
 8003a8c:	2306      	movs	r3, #6
  debug_msg.data = new float[6];
 8003a8e:	f8c5 0158 	str.w	r0, [r5, #344]	; 0x158
  servo_left->setReference(135);
 8003a92:	6960      	ldr	r0, [r4, #20]
  debug_msg.data_length = 6;
 8003a94:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
  debug_msg.layout.dim[0].size = 6;
 8003a98:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
  debug_msg.layout.dim[0].stride = 6;
 8003a9c:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
  servo_left->setReference(135);
 8003aa0:	6803      	ldr	r3, [r0, #0]
 8003aa2:	499d      	ldr	r1, [pc, #628]	; (8003d18 <main+0x608>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4798      	blx	r3
  servo_right->setReference(135);
 8003aa8:	69a0      	ldr	r0, [r4, #24]
 8003aaa:	499b      	ldr	r1, [pc, #620]	; (8003d18 <main+0x608>)
 8003aac:	6803      	ldr	r3, [r0, #0]
 8003aae:	4c9b      	ldr	r4, [pc, #620]	; (8003d1c <main+0x60c>)
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4798      	blx	r3
  front_right->setReference(0);
 8003ab4:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6803      	ldr	r3, [r0, #0]
      servo_right->update(dt_s, connected, true);
 8003abc:	4e98      	ldr	r6, [pc, #608]	; (8003d20 <main+0x610>)
  front_right->setReference(0);
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4798      	blx	r3
  front_left->setReference(0);
 8003ac2:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6803      	ldr	r3, [r0, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4798      	blx	r3
  rear_right->setReference(0);
 8003ace:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	4798      	blx	r3
  rear_left->setReference(0);
 8003ada:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6803      	ldr	r3, [r0, #0]
 8003ae2:	2500      	movs	r5, #0
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4798      	blx	r3
    start_time = millis();
 8003ae8:	f7fc fcf4 	bl	80004d4 <millis>
    if(cnt < 50)
 8003aec:	2d31      	cmp	r5, #49	; 0x31
    start_time = millis();
 8003aee:	4607      	mov	r7, r0
      servo_left->update(dt_s, connected, true);
 8003af0:	bfd4      	ite	le
 8003af2:	6960      	ldrle	r0, [r4, #20]
      servo_right->update(dt_s, connected, true);
 8003af4:	69a0      	ldrgt	r0, [r4, #24]
 8003af6:	2200      	movs	r2, #0
 8003af8:	6803      	ldr	r3, [r0, #0]
 8003afa:	4631      	mov	r1, r6
 8003afc:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003b00:	2301      	movs	r3, #1
 8003b02:	47c0      	blx	r8
    while( millis() - start_time < dt);
 8003b04:	f7fc fce6 	bl	80004d4 <millis>
 8003b08:	1bc0      	subs	r0, r0, r7
 8003b0a:	2813      	cmp	r0, #19
 8003b0c:	d9fa      	bls.n	8003b04 <main+0x3f4>
    cnt++;
 8003b0e:	3501      	adds	r5, #1
  while(cnt < 100){
 8003b10:	2d64      	cmp	r5, #100	; 0x64
 8003b12:	d1e9      	bne.n	8003ae8 <main+0x3d8>
  led_set(255);
 8003b14:	20ff      	movs	r0, #255	; 0xff
 8003b16:	f7fc fc01 	bl	800031c <led_set>
  float l = sqrt(pow((L/2),2)*2);
 8003b1a:	68e0      	ldr	r0, [r4, #12]
 8003b1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b20:	f005 f8aa 	bl	8008c78 <__aeabi_fmul>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8003b24:	f004 fc1e 	bl	8008364 <__aeabi_f2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	f004 fc6e 	bl	800840c <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	f004 fab8 	bl	80080a8 <__adddf3>
 8003b38:	f002 f8da 	bl	8005cf0 <sqrt>
 8003b3c:	f004 ff3e 	bl	80089bc <__aeabi_d2f>
  float alpha[4] = {-M_PI/4, M_PI/4, 3*M_PI/4, -3*M_PI/4};
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <main+0x614>)
 8003b42:	ad10      	add	r5, sp, #64	; 0x40
  float l = sqrt(pow((L/2),2)*2);
 8003b44:	900c      	str	r0, [sp, #48]	; 0x30
  float alpha[4] = {-M_PI/4, M_PI/4, 3*M_PI/4, -3*M_PI/4};
 8003b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  initialized = true;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	7023      	strb	r3, [r4, #0]
  cnt = 0;
 8003b50:	2400      	movs	r4, #0
        return configured_;
 8003b52:	4d72      	ldr	r5, [pc, #456]	; (8003d1c <main+0x60c>)
    start_time = millis();
 8003b54:	f7fc fcbe 	bl	80004d4 <millis>
    if(cnt++%50 == 0)
 8003b58:	2232      	movs	r2, #50	; 0x32
 8003b5a:	1c63      	adds	r3, r4, #1
 8003b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8003b5e:	fb94 f3f2 	sdiv	r3, r4, r2
 8003b62:	fb02 4413 	mls	r4, r2, r3, r4
    start_time = millis();
 8003b66:	9009      	str	r0, [sp, #36]	; 0x24
    if(cnt++%50 == 0)
 8003b68:	b90c      	cbnz	r4, 8003b6e <main+0x45e>
      debug_toggle();
 8003b6a:	f7fc fbf5 	bl	8000358 <debug_toggle>
 8003b6e:	4b6e      	ldr	r3, [pc, #440]	; (8003d28 <main+0x618>)
    float sl = servo_left->update(dt_s, connected, true);
 8003b70:	6968      	ldr	r0, [r5, #20]
 8003b72:	781e      	ldrb	r6, [r3, #0]
 8003b74:	6803      	ldr	r3, [r0, #0]
 8003b76:	4632      	mov	r2, r6
 8003b78:	69dc      	ldr	r4, [r3, #28]
 8003b7a:	4969      	ldr	r1, [pc, #420]	; (8003d20 <main+0x610>)
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	47a0      	blx	r4
 8003b80:	4683      	mov	fp, r0
    float sr = servo_right->update(dt_s, connected, true);
 8003b82:	69a8      	ldr	r0, [r5, #24]
 8003b84:	4632      	mov	r2, r6
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	4965      	ldr	r1, [pc, #404]	; (8003d20 <main+0x610>)
 8003b8a:	69dc      	ldr	r4, [r3, #28]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	47a0      	blx	r4
    debug_msg.data[0] = (float)sl;
 8003b90:	4c66      	ldr	r4, [pc, #408]	; (8003d2c <main+0x61c>)
    float sr = servo_right->update(dt_s, connected, true);
 8003b92:	4681      	mov	r9, r0
    debug_msg.data[0] = (float)sl;
 8003b94:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8003b98:	f8c3 b000 	str.w	fp, [r3]
    debug_msg.data[1] = (float)sr;
 8003b9c:	6058      	str	r0, [r3, #4]
    if((waitForServos && ((int)sr == (int)servo_right->getReference() && (int)sl == (int)servo_left->getReference())) || lastMsg + CMDMSGTIMEOUT > start_time){
 8003b9e:	7a2b      	ldrb	r3, [r5, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 817e 	bne.w	8003ea2 <main+0x792>
 8003ba6:	686b      	ldr	r3, [r5, #4]
 8003ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003baa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	f0c0 8195 	bcc.w	8003ede <main+0x7ce>
      front_right->setReference(0);
 8003bb4:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6803      	ldr	r3, [r0, #0]
      enable = false;
 8003bbc:	2700      	movs	r7, #0
      front_right->setReference(0);
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	4798      	blx	r3
      front_left->setReference(0);
 8003bc2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	6803      	ldr	r3, [r0, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4798      	blx	r3
      rear_left->setReference(0);
 8003bce:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4798      	blx	r3
      rear_right->setReference(0);
 8003bda:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8003bde:	2100      	movs	r1, #0
 8003be0:	6803      	ldr	r3, [r0, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4798      	blx	r3
    float fr = front_right->update(dt_s, connected, enable);
 8003be6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8003bea:	4632      	mov	r2, r6
 8003bec:	6803      	ldr	r3, [r0, #0]
 8003bee:	494c      	ldr	r1, [pc, #304]	; (8003d20 <main+0x610>)
 8003bf0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	47c0      	blx	r8
 8003bf8:	4682      	mov	sl, r0
    float fl = front_left->update(dt_s, connected, enable);
 8003bfa:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8003bfe:	4632      	mov	r2, r6
 8003c00:	6803      	ldr	r3, [r0, #0]
 8003c02:	4947      	ldr	r1, [pc, #284]	; (8003d20 <main+0x610>)
 8003c04:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003c08:	463b      	mov	r3, r7
 8003c0a:	47c0      	blx	r8
 8003c0c:	900a      	str	r0, [sp, #40]	; 0x28
    float rl = rear_left->update(dt_s, connected, enable);
 8003c0e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8003c12:	4632      	mov	r2, r6
 8003c14:	6803      	ldr	r3, [r0, #0]
 8003c16:	4942      	ldr	r1, [pc, #264]	; (8003d20 <main+0x610>)
 8003c18:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	47c0      	blx	r8
 8003c20:	4680      	mov	r8, r0
    float rr = rear_right->update(dt_s, connected, enable);
 8003c22:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8003c26:	4632      	mov	r2, r6
 8003c28:	6803      	ldr	r3, [r0, #0]
 8003c2a:	493d      	ldr	r1, [pc, #244]	; (8003d20 <main+0x610>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	469e      	mov	lr, r3
 8003c30:	463b      	mov	r3, r7
 8003c32:	4676      	mov	r6, lr
 8003c34:	47b0      	blx	r6
    debug_msg.data[2] = fr;
 8003c36:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    debug_msg.data[3] = fl;
 8003c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    debug_msg.data[4] = rl;
 8003c3c:	f8c3 8010 	str.w	r8, [r3, #16]
    debug_msg.data[5] = rr;
 8003c40:	6158      	str	r0, [r3, #20]
    debug_msg.data[2] = fr;
 8003c42:	f8c3 a008 	str.w	sl, [r3, #8]
    debug_msg.data[3] = fl;
 8003c46:	60da      	str	r2, [r3, #12]
    float speeds[4] = {fr, fl, rl, rr};
 8003c48:	9017      	str	r0, [sp, #92]	; 0x5c
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};
 8003c4a:	4939      	ldr	r1, [pc, #228]	; (8003d30 <main+0x620>)
 8003c4c:	4648      	mov	r0, r9
    float speeds[4] = {fr, fl, rl, rr};
 8003c4e:	9215      	str	r2, [sp, #84]	; 0x54
 8003c50:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 8003c54:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};
 8003c58:	f004 ff04 	bl	8008a64 <__aeabi_fsub>
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	9018      	str	r0, [sp, #96]	; 0x60
 8003c60:	4833      	ldr	r0, [pc, #204]	; (8003d30 <main+0x620>)
 8003c62:	f004 feff 	bl	8008a64 <__aeabi_fsub>
 8003c66:	4932      	ldr	r1, [pc, #200]	; (8003d30 <main+0x620>)
 8003c68:	9019      	str	r0, [sp, #100]	; 0x64
 8003c6a:	4658      	mov	r0, fp
 8003c6c:	f004 fefc 	bl	8008a68 <__addsf3>
 8003c70:	492f      	ldr	r1, [pc, #188]	; (8003d30 <main+0x620>)
 8003c72:	901a      	str	r0, [sp, #104]	; 0x68
 8003c74:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 8003c78:	f004 fef4 	bl	8008a64 <__aeabi_fsub>
    float theta_dot = 0;
 8003c7c:	2300      	movs	r3, #0
    for(i = 0; i < 4; i++){
 8003c7e:	2400      	movs	r4, #0
    float x_dot = 0;
 8003c80:	4698      	mov	r8, r3
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};
 8003c82:	901b      	str	r0, [sp, #108]	; 0x6c
    float theta_dot = 0;
 8003c84:	930b      	str	r3, [sp, #44]	; 0x2c
    float y_dot = 0;
 8003c86:	930a      	str	r3, [sp, #40]	; 0x28
      angles[i] = angles[i]*M_PI/180;
 8003c88:	ae18      	add	r6, sp, #96	; 0x60
 8003c8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c8e:	f004 fb69 	bl	8008364 <__aeabi_f2d>
 8003c92:	a31f      	add	r3, pc, #124	; (adr r3, 8003d10 <main+0x600>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f004 fbb8 	bl	800840c <__aeabi_dmul>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <main+0x624>)
 8003ca0:	f004 fcde 	bl	8008660 <__aeabi_ddiv>
 8003ca4:	f004 fe8a 	bl	80089bc <__aeabi_d2f>
      float wheelAngle = alpha[i]+angles[i];
 8003ca8:	ab10      	add	r3, sp, #64	; 0x40
 8003caa:	f853 a024 	ldr.w	sl, [r3, r4, lsl #2]
      angles[i] = angles[i]*M_PI/180;
 8003cae:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
      float wheelAngle = alpha[i]+angles[i];
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	f004 fed8 	bl	8008a68 <__addsf3>
 8003cb8:	4607      	mov	r7, r0
  { return __builtin_cosf(__x); }
 8003cba:	f001 ff9b 	bl	8005bf4 <cosf>
      x_dot += cos(wheelAngle)*speeds[i];
 8003cbe:	ab14      	add	r3, sp, #80	; 0x50
 8003cc0:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
 8003cc4:	4601      	mov	r1, r0
 8003cc6:	4648      	mov	r0, r9
 8003cc8:	f004 ffd6 	bl	8008c78 <__aeabi_fmul>
 8003ccc:	4601      	mov	r1, r0
 8003cce:	4640      	mov	r0, r8
 8003cd0:	f004 feca 	bl	8008a68 <__addsf3>
 8003cd4:	4680      	mov	r8, r0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	f001 ffcc 	bl	8005c74 <sinf>
      y_dot -= sin(wheelAngle)*speeds[i];
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4648      	mov	r0, r9
 8003ce0:	f004 ffca 	bl	8008c78 <__aeabi_fmul>
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ce8:	f004 febc 	bl	8008a64 <__aeabi_fsub>
      if(i==2 || i==3){
 8003cec:	1ea3      	subs	r3, r4, #2
 8003cee:	2b01      	cmp	r3, #1
      y_dot -= sin(wheelAngle)*speeds[i];
 8003cf0:	900a      	str	r0, [sp, #40]	; 0x28
      if(i==2 || i==3){
 8003cf2:	f200 8113 	bhi.w	8003f1c <main+0x80c>
        motorAngle += M_PI;
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f004 fb34 	bl	8008364 <__aeabi_f2d>
 8003cfc:	a304      	add	r3, pc, #16	; (adr r3, 8003d10 <main+0x600>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f004 f9d1 	bl	80080a8 <__adddf3>
 8003d06:	f004 fe59 	bl	80089bc <__aeabi_d2f>
 8003d0a:	4683      	mov	fp, r0
 8003d0c:	e014      	b.n	8003d38 <main+0x628>
 8003d0e:	bf00      	nop
 8003d10:	54442d18 	.word	0x54442d18
 8003d14:	400921fb 	.word	0x400921fb
 8003d18:	43070000 	.word	0x43070000
 8003d1c:	20000884 	.word	0x20000884
 8003d20:	3ca3d70b 	.word	0x3ca3d70b
 8003d24:	0800b33c 	.word	0x0800b33c
 8003d28:	200019b4 	.word	0x200019b4
 8003d2c:	2000197c 	.word	0x2000197c
 8003d30:	42b40000 	.word	0x42b40000
 8003d34:	40668000 	.word	0x40668000
 8003d38:	4650      	mov	r0, sl
 8003d3a:	f001 ff9b 	bl	8005c74 <sinf>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	4658      	mov	r0, fp
 8003d42:	f001 ff97 	bl	8005c74 <sinf>
      float deltaX = -(l*sin(alpha[i]) + d*sin(motorAngle));
 8003d46:	692b      	ldr	r3, [r5, #16]
 8003d48:	4631      	mov	r1, r6
 8003d4a:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8003d50:	f004 ff92 	bl	8008c78 <__aeabi_fmul>
 8003d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d56:	4606      	mov	r6, r0
 8003d58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f004 ff8c 	bl	8008c78 <__aeabi_fmul>
 8003d60:	4601      	mov	r1, r0
 8003d62:	4630      	mov	r0, r6
 8003d64:	f004 fe80 	bl	8008a68 <__addsf3>
 8003d68:	4606      	mov	r6, r0
  { return __builtin_cosf(__x); }
 8003d6a:	4650      	mov	r0, sl
 8003d6c:	f001 ff42 	bl	8005bf4 <cosf>
 8003d70:	4682      	mov	sl, r0
 8003d72:	4658      	mov	r0, fp
 8003d74:	f001 ff3e 	bl	8005bf4 <cosf>
      float deltaY = l*cos(alpha[i]) + d*cos(motorAngle);
 8003d78:	4651      	mov	r1, sl
 8003d7a:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d7e:	f004 ff7b 	bl	8008c78 <__aeabi_fmul>
 8003d82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d84:	4682      	mov	sl, r0
 8003d86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 ff75 	bl	8008c78 <__aeabi_fmul>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	4650      	mov	r0, sl
 8003d92:	f004 fe69 	bl	8008a68 <__addsf3>
      float deltaNorm = sqrt(deltaX*deltaX + deltaY*deltaY);
 8003d96:	4631      	mov	r1, r6
      float deltaY = l*cos(alpha[i]) + d*cos(motorAngle);
 8003d98:	4683      	mov	fp, r0
      float deltaNorm = sqrt(deltaX*deltaX + deltaY*deltaY);
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f004 ff6c 	bl	8008c78 <__aeabi_fmul>
 8003da0:	4659      	mov	r1, fp
 8003da2:	4682      	mov	sl, r0
 8003da4:	4658      	mov	r0, fp
 8003da6:	f004 ff67 	bl	8008c78 <__aeabi_fmul>
 8003daa:	4601      	mov	r1, r0
 8003dac:	4650      	mov	r0, sl
 8003dae:	f004 fe5b 	bl	8008a68 <__addsf3>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8003db2:	f001 fffb 	bl	8005dac <sqrtf>
 8003db6:	4682      	mov	sl, r0
      float wAngle = wheelAngle+M_PI/2;
 8003db8:	4638      	mov	r0, r7
 8003dba:	f004 fad3 	bl	8008364 <__aeabi_f2d>
 8003dbe:	a35c      	add	r3, pc, #368	; (adr r3, 8003f30 <main+0x820>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f004 f970 	bl	80080a8 <__adddf3>
 8003dc8:	f004 fdf8 	bl	80089bc <__aeabi_d2f>
 8003dcc:	900d      	str	r0, [sp, #52]	; 0x34
  { return __builtin_cosf(__x); }
 8003dce:	f001 ff11 	bl	8005bf4 <cosf>
  { return __builtin_sinf(__x); }
 8003dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  { return __builtin_cosf(__x); }
 8003dd4:	4607      	mov	r7, r0
  { return __builtin_sinf(__x); }
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 ff4c 	bl	8005c74 <sinf>
      float deltaXNorm = deltaX/deltaNorm;
 8003ddc:	4651      	mov	r1, sl
 8003dde:	900d      	str	r0, [sp, #52]	; 0x34
      float deltaX = -(l*sin(alpha[i]) + d*sin(motorAngle));
 8003de0:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
      float deltaXNorm = deltaX/deltaNorm;
 8003de4:	f004 fffc 	bl	8008de0 <__aeabi_fdiv>
      theta_dot += (((deltaXNorm*wX + deltaYNorm*wY)*wX)/deltaNorm)*speeds[i];
 8003de8:	4639      	mov	r1, r7
 8003dea:	f004 ff45 	bl	8008c78 <__aeabi_fmul>
      float deltaYNorm = deltaY/deltaNorm;
 8003dee:	4651      	mov	r1, sl
      theta_dot += (((deltaXNorm*wX + deltaYNorm*wY)*wX)/deltaNorm)*speeds[i];
 8003df0:	4606      	mov	r6, r0
      float deltaYNorm = deltaY/deltaNorm;
 8003df2:	4658      	mov	r0, fp
 8003df4:	f004 fff4 	bl	8008de0 <__aeabi_fdiv>
      theta_dot += (((deltaXNorm*wX + deltaYNorm*wY)*wX)/deltaNorm)*speeds[i];
 8003df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    for(i = 0; i < 4; i++){
 8003dfa:	3401      	adds	r4, #1
      theta_dot += (((deltaXNorm*wX + deltaYNorm*wY)*wX)/deltaNorm)*speeds[i];
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f004 ff3b 	bl	8008c78 <__aeabi_fmul>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4630      	mov	r0, r6
 8003e06:	f004 fe2f 	bl	8008a68 <__addsf3>
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	f004 ff34 	bl	8008c78 <__aeabi_fmul>
 8003e10:	4651      	mov	r1, sl
 8003e12:	f004 ffe5 	bl	8008de0 <__aeabi_fdiv>
 8003e16:	4649      	mov	r1, r9
 8003e18:	f004 ff2e 	bl	8008c78 <__aeabi_fmul>
 8003e1c:	4601      	mov	r1, r0
 8003e1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e20:	f004 fe22 	bl	8008a68 <__addsf3>
    for(i = 0; i < 4; i++){
 8003e24:	2c04      	cmp	r4, #4
      theta_dot += (((deltaXNorm*wX + deltaYNorm*wY)*wX)/deltaNorm)*speeds[i];
 8003e26:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < 4; i++){
 8003e28:	f47f af2e 	bne.w	8003c88 <main+0x578>
    x_dot /= 4;
 8003e2c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8003e30:	4640      	mov	r0, r8
 8003e32:	f004 ff21 	bl	8008c78 <__aeabi_fmul>
    odom_msg.data[0] = x_dot;
 8003e36:	4e40      	ldr	r6, [pc, #256]	; (8003f38 <main+0x828>)
    y_dot /= 4;
 8003e38:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    odom_msg.data[0] = x_dot;
 8003e3c:	f8d6 4118 	ldr.w	r4, [r6, #280]	; 0x118
 8003e40:	6020      	str	r0, [r4, #0]
    y_dot /= 4;
 8003e42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e44:	f004 ff18 	bl	8008c78 <__aeabi_fmul>
    theta_dot /= 4;
 8003e48:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    odom_msg.data[1] = y_dot;
 8003e4c:	6060      	str	r0, [r4, #4]
    theta_dot /= 4;
 8003e4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e50:	f004 ff12 	bl	8008c78 <__aeabi_fmul>
    odom_pub.publish(&odom_msg);
 8003e54:	f106 01ec 	add.w	r1, r6, #236	; 0xec
    odom_msg.data[2] = theta_dot;
 8003e58:	60a0      	str	r0, [r4, #8]
    odom_pub.publish(&odom_msg);
 8003e5a:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 8003e5e:	f7ff fa28 	bl	80032b2 <ros::Publisher::publish(ros::Msg const*)>
    debug_pub.publish(&debug_msg);
 8003e62:	f506 7196 	add.w	r1, r6, #300	; 0x12c
 8003e66:	f106 00c8 	add.w	r0, r6, #200	; 0xc8
 8003e6a:	f7ff fa22 	bl	80032b2 <ros::Publisher::publish(ros::Msg const*)>
    nh.spinOnce();
 8003e6e:	4833      	ldr	r0, [pc, #204]	; (8003f3c <main+0x82c>)
 8003e70:	f7ff fb3c 	bl	80034ec <ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>::spinOnce()>
    elapsed = millis() - start_time;
 8003e74:	f7fc fb2e 	bl	80004d4 <millis>
 8003e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7a:	1ac0      	subs	r0, r0, r3
    if(elapsed > dt){
 8003e7c:	2814      	cmp	r0, #20
 8003e7e:	d94f      	bls.n	8003f20 <main+0x810>
    if(cnt++%50 == 0)
 8003e80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  }
 8003e82:	e667      	b.n	8003b54 <main+0x444>
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8003e84:	3301      	adds	r3, #1
 8003e86:	2b19      	cmp	r3, #25
 8003e88:	f47f ac68 	bne.w	800375c <main+0x4c>
 8003e8c:	e476      	b.n	800377c <main+0x6c>
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 8003e8e:	3301      	adds	r3, #1
 8003e90:	2b19      	cmp	r3, #25
 8003e92:	f47f ac77 	bne.w	8003784 <main+0x74>
 8003e96:	e488      	b.n	80037aa <main+0x9a>
 8003e98:	3301      	adds	r3, #1
 8003e9a:	2b19      	cmp	r3, #25
 8003e9c:	f47f ac86 	bne.w	80037ac <main+0x9c>
 8003ea0:	e497      	b.n	80037d2 <main+0xc2>
    if((waitForServos && ((int)sr == (int)servo_right->getReference() && (int)sl == (int)servo_left->getReference())) || lastMsg + CMDMSGTIMEOUT > start_time){
 8003ea2:	69a8      	ldr	r0, [r5, #24]
 8003ea4:	6803      	ldr	r3, [r0, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	4798      	blx	r3
 8003eaa:	4680      	mov	r8, r0
 8003eac:	4648      	mov	r0, r9
 8003eae:	f005 f8bf 	bl	8009030 <__aeabi_f2iz>
 8003eb2:	4607      	mov	r7, r0
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f005 f8bb 	bl	8009030 <__aeabi_f2iz>
 8003eba:	4287      	cmp	r7, r0
 8003ebc:	f47f ae73 	bne.w	8003ba6 <main+0x496>
 8003ec0:	6968      	ldr	r0, [r5, #20]
 8003ec2:	6803      	ldr	r3, [r0, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4798      	blx	r3
 8003ec8:	4680      	mov	r8, r0
 8003eca:	4658      	mov	r0, fp
 8003ecc:	f005 f8b0 	bl	8009030 <__aeabi_f2iz>
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	f005 f8ac 	bl	8009030 <__aeabi_f2iz>
 8003ed8:	4287      	cmp	r7, r0
 8003eda:	f47f ae64 	bne.w	8003ba6 <main+0x496>
      waitForServos = false;
 8003ede:	2300      	movs	r3, #0
      front_right->setReference(motorCmd[0]);
 8003ee0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
      waitForServos = false;
 8003ee4:	722b      	strb	r3, [r5, #8]
      front_right->setReference(motorCmd[0]);
 8003ee6:	6803      	ldr	r3, [r0, #0]
 8003ee8:	69e9      	ldr	r1, [r5, #28]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4798      	blx	r3
      front_left->setReference(motorCmd[1]);
 8003eee:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8003ef2:	6a29      	ldr	r1, [r5, #32]
 8003ef4:	6803      	ldr	r3, [r0, #0]
    bool enable = true;
 8003ef6:	2701      	movs	r7, #1
      front_left->setReference(motorCmd[1]);
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4798      	blx	r3
      rear_left->setReference(motorCmd[2]);
 8003efc:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8003f00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4798      	blx	r3
      rear_right->setReference(motorCmd[3]);
 8003f08:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8003f0c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003f0e:	6803      	ldr	r3, [r0, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4798      	blx	r3
      delay(2);
 8003f14:	2002      	movs	r0, #2
 8003f16:	f7fc fac1 	bl	800049c <delay>
 8003f1a:	e664      	b.n	8003be6 <main+0x4d6>
      float motorAngle = wheelAngle;
 8003f1c:	46bb      	mov	fp, r7
 8003f1e:	e70b      	b.n	8003d38 <main+0x628>
      while( (millis() - start_time) < dt){}
 8003f20:	f7fc fad8 	bl	80004d4 <millis>
 8003f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f26:	1ac0      	subs	r0, r0, r3
 8003f28:	2813      	cmp	r0, #19
 8003f2a:	e7a8      	b.n	8003e7e <main+0x76e>
 8003f2c:	f3af 8000 	nop.w
 8003f30:	54442d18 	.word	0x54442d18
 8003f34:	3ff921fb 	.word	0x3ff921fb
 8003f38:	2000197c 	.word	0x2000197c
 8003f3c:	200010c0 	.word	0x200010c0

08003f40 <_GLOBAL__sub_I_RX>:
  while (1){
    //debug_toggle();
    //delay(100);
    //nh.spinOnce();
  }
}
 8003f40:	b570      	push	{r4, r5, r6, lr}
      NodeHandle_() : configured_(false) {
 8003f42:	4b65      	ldr	r3, [pc, #404]	; (80040d8 <_GLOBAL__sub_I_RX+0x198>)
 8003f44:	4c65      	ldr	r4, [pc, #404]	; (80040dc <_GLOBAL__sub_I_RX+0x19c>)
      com = new SERIAL_CLASS(115200);
 8003f46:	2001      	movs	r0, #1
 8003f48:	f8c4 383c 	str.w	r3, [r4, #2108]	; 0x83c
 8003f4c:	f000 fc9a 	bl	8004884 <operator new(unsigned int)>
 8003f50:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003f54:	4605      	mov	r5, r0
 8003f56:	f7ff f9b7 	bl	80032c8 <UsartWithBuffer::UsartWithBuffer(int)>
      baud_ = 115200;
 8003f5a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003f5e:	f241 1230 	movw	r2, #4400	; 0x1130
 8003f62:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
 8003f66:	2300      	movs	r3, #0
 8003f68:	54a3      	strb	r3, [r4, r2]
      strings_length(0), strings(NULL)
 8003f6a:	f241 1244 	movw	r2, #4420	; 0x1144
 8003f6e:	495c      	ldr	r1, [pc, #368]	; (80040e0 <_GLOBAL__sub_I_RX+0x1a0>)
      com = new SERIAL_CLASS(115200);
 8003f70:	f8c4 5840 	str.w	r5, [r4, #2112]	; 0x840
 8003f74:	50a1      	str	r1, [r4, r2]
 8003f76:	f241 1248 	movw	r2, #4424	; 0x1148
 8003f7a:	54a3      	strb	r3, [r4, r2]
 8003f7c:	f241 1250 	movw	r2, #4432	; 0x1150
 8003f80:	50a3      	str	r3, [r4, r2]
 8003f82:	f241 1254 	movw	r2, #4436	; 0x1154
 8003f86:	54a3      	strb	r3, [r4, r2]
 8003f88:	f241 125c 	movw	r2, #4444	; 0x115c
 8003f8c:	f241 1168 	movw	r1, #4456	; 0x1168
 8003f90:	50a3      	str	r3, [r4, r2]
 8003f92:	f504 528b 	add.w	r2, r4, #4448	; 0x1160
 8003f96:	7013      	strb	r3, [r2, #0]
	   publishers[i] = 0;
 8003f98:	f604 023c 	addw	r2, r4, #2108	; 0x83c
 8003f9c:	5063      	str	r3, [r4, r1]
 8003f9e:	461c      	mov	r4, r3
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	18d0      	adds	r0, r2, r3
 8003fa4:	3304      	adds	r3, #4
        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
	   publishers[i] = 0;
 8003fa8:	f8c0 4818 	str.w	r4, [r0, #2072]	; 0x818
        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8003fac:	d1f9      	bne.n	8003fa2 <_GLOBAL__sub_I_RX+0x62>
 8003fae:	2300      	movs	r3, #0
	   subscribers[i] = 0;
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	18ca      	adds	r2, r1, r3
 8003fb4:	3304      	adds	r3, #4
        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
	   subscribers[i] = 0;
 8003fb8:	f8c2 087c 	str.w	r0, [r2, #2172]	; 0x87c
        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003fbc:	d1f9      	bne.n	8003fb2 <_GLOBAL__sub_I_RX+0x72>
 8003fbe:	2300      	movs	r3, #0
	   message_in[i] = 0;
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	18ca      	adds	r2, r1, r3
        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
	   message_in[i] = 0;
 8003fca:	7610      	strb	r0, [r2, #24]
        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8003fcc:	d1f9      	bne.n	8003fc2 <_GLOBAL__sub_I_RX+0x82>
 8003fce:	2300      	movs	r3, #0
	   message_out[i] = 0;
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	18c8      	adds	r0, r1, r3
        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
	   message_out[i] = 0;
 8003fda:	f880 2418 	strb.w	r2, [r0, #1048]	; 0x418
        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8003fde:	d1f8      	bne.n	8003fd2 <_GLOBAL__sub_I_RX+0x92>
      stride(0)
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <_GLOBAL__sub_I_RX+0x1a4>)
        endpoint_(endpoint)
 8003fe2:	4941      	ldr	r1, [pc, #260]	; (80040e8 <_GLOBAL__sub_I_RX+0x1a8>)
 8003fe4:	4c41      	ldr	r4, [pc, #260]	; (80040ec <_GLOBAL__sub_I_RX+0x1ac>)
 8003fe6:	6759      	str	r1, [r3, #116]	; 0x74
      mode(0)
 8003fe8:	4941      	ldr	r1, [pc, #260]	; (80040f0 <_GLOBAL__sub_I_RX+0x1b0>)
 8003fea:	4d42      	ldr	r5, [pc, #264]	; (80040f4 <_GLOBAL__sub_I_RX+0x1b4>)
 8003fec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
      frame_id("")
 8003ff0:	4941      	ldr	r1, [pc, #260]	; (80040f8 <_GLOBAL__sub_I_RX+0x1b8>)
      data_length(0), data(NULL)
 8003ff2:	4842      	ldr	r0, [pc, #264]	; (80040fc <_GLOBAL__sub_I_RX+0x1bc>)
 8003ff4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8003ffe:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8004002:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8004006:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 800400a:	493d      	ldr	r1, [pc, #244]	; (8004100 <_GLOBAL__sub_I_RX+0x1c0>)
        endpoint_(endpoint) {};
 800400c:	4e3d      	ldr	r6, [pc, #244]	; (8004104 <_GLOBAL__sub_I_RX+0x1c4>)
 800400e:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8004012:	2101      	movs	r1, #1
 8004014:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
        topic_ = topic_name;
 8004018:	493b      	ldr	r1, [pc, #236]	; (8004108 <_GLOBAL__sub_I_RX+0x1c8>)
 800401a:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
 800401e:	67d9      	str	r1, [r3, #124]	; 0x7c
      data_offset(0)
 8004020:	493a      	ldr	r1, [pc, #232]	; (800410c <_GLOBAL__sub_I_RX+0x1cc>)
 8004022:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8004026:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
 800402a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 800402e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8004032:	f8c3 515c 	str.w	r5, [r3, #348]	; 0x15c
 8004036:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
 800403a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800403e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8004042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800404a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800404e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 8004052:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8004056:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
 800405a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 800405e:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
 8004062:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
 8004066:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800406a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800406e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8004072:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8004076:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 800407a:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 800407e:	4924      	ldr	r1, [pc, #144]	; (8004110 <_GLOBAL__sub_I_RX+0x1d0>)
 8004080:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8
 8004084:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8004088:	f503 7696 	add.w	r6, r3, #300	; 0x12c
 800408c:	f103 01ec 	add.w	r1, r3, #236	; 0xec
 8004090:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004094:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004098:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800409c:	f8c3 60cc 	str.w	r6, [r3, #204]	; 0xcc
 80040a0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80040a4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
 80040a8:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
 80040ac:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
 80040b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80040b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80040b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80040bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80040c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80040c4:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
 80040c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 fbe0 	bl	8004894 <operator delete(void*)>
 80040d4:	f000 fcc8 	bl	8004a68 <__cxa_end_cleanup>
 80040d8:	0800b2fc 	.word	0x0800b2fc
 80040dc:	20000884 	.word	0x20000884
 80040e0:	0800b26c 	.word	0x0800b26c
 80040e4:	2000197c 	.word	0x2000197c
 80040e8:	0800b310 	.word	0x0800b310
 80040ec:	0800b44c 	.word	0x0800b44c
 80040f0:	0800b2e4 	.word	0x0800b2e4
 80040f4:	0800b284 	.word	0x0800b284
 80040f8:	0800b2cc 	.word	0x0800b2cc
 80040fc:	0800b2b4 	.word	0x0800b2b4
 8004100:	08002589 	.word	0x08002589
 8004104:	0800b5ad 	.word	0x0800b5ad
 8004108:	0800b5a5 	.word	0x0800b5a5
 800410c:	0800b29c 	.word	0x0800b29c
 8004110:	0800b5b3 	.word	0x0800b5b3

08004114 <motor::createMotor(motorSettings*)>:
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 8004114:	b538      	push	{r3, r4, r5, lr}
    switch (settings->m_motorType) {
 8004116:	6803      	ldr	r3, [r0, #0]
motor *motor::createMotor(motorSettings *settings){
 8004118:	4605      	mov	r5, r0
    switch (settings->m_motorType) {
 800411a:	2b01      	cmp	r3, #1
 800411c:	d003      	beq.n	8004126 <motor::createMotor(motorSettings*)+0x12>
 800411e:	2b02      	cmp	r3, #2
 8004120:	d009      	beq.n	8004136 <motor::createMotor(motorSettings*)+0x22>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);

	    default:
	        return 0;
 8004122:	2000      	movs	r0, #0
 8004124:	bd38      	pop	{r3, r4, r5, pc}
	        return new servo(settings);
 8004126:	204c      	movs	r0, #76	; 0x4c
 8004128:	f000 fbac 	bl	8004884 <operator new(unsigned int)>
 800412c:	4629      	mov	r1, r5
 800412e:	4604      	mov	r4, r0
 8004130:	f000 f8de 	bl	80042f0 <servo::servo(motorSettings*)>
 8004134:	e006      	b.n	8004144 <motor::createMotor(motorSettings*)+0x30>
	        return new DCMotor(settings);
 8004136:	2030      	movs	r0, #48	; 0x30
 8004138:	f000 fba4 	bl	8004884 <operator new(unsigned int)>
 800413c:	4629      	mov	r1, r5
 800413e:	4604      	mov	r4, r0
 8004140:	f000 fa1a 	bl	8004578 <DCMotor::DCMotor(motorSettings*)>
	        return new servo(settings);
 8004144:	4620      	mov	r0, r4
 8004146:	bd38      	pop	{r3, r4, r5, pc}
	        return new DCMotor(settings);
 8004148:	4620      	mov	r0, r4
 800414a:	f000 fba3 	bl	8004894 <operator delete(void*)>
 800414e:	f000 fc8b 	bl	8004a68 <__cxa_end_cleanup>
 8004152:	e7f9      	b.n	8004148 <motor::createMotor(motorSettings*)+0x34>

08004154 <motor::motor(motorSettings*)>:
    }
}


motor::motor(motorSettings *settings){
 8004154:	4a01      	ldr	r2, [pc, #4]	; (800415c <motor::motor(motorSettings*)+0x8>)
    m_settings = settings;
 8004156:	6041      	str	r1, [r0, #4]
motor::motor(motorSettings *settings){
 8004158:	6002      	str	r2, [r0, #0]
}
 800415a:	4770      	bx	lr
 800415c:	0800b5c4 	.word	0x0800b5c4

08004160 <motor::~motor()>:

motor::~motor()
{
 8004160:	4770      	bx	lr

08004162 <motor::~motor()>:
motor::~motor()
 8004162:	b510      	push	{r4, lr}
 8004164:	4604      	mov	r4, r0
 8004166:	f000 fb95 	bl	8004894 <operator delete(void*)>
 800416a:	4620      	mov	r0, r4
 800416c:	bd10      	pop	{r4, pc}
 800416e:	bf00      	nop

08004170 <servo::setReference(float)>:
	std::copy(u_, u_ + 3, u);

	return true;
}

void servo::setReference(float setPoint){
 8004170:	b510      	push	{r4, lr}
 8004172:	4604      	mov	r4, r0
	pos = (int) setPoint;
 8004174:	4608      	mov	r0, r1
 8004176:	f004 ff5b 	bl	8009030 <__aeabi_f2iz>
 800417a:	60a0      	str	r0, [r4, #8]
 800417c:	bd10      	pop	{r4, pc}

0800417e <servo::getReference()>:
	//pos = (int)setPoint > 90? 90 : ( (int)setPoint < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : (int)setPoint);
}

float servo::getReference(){
 800417e:	b508      	push	{r3, lr}
	return (float)pos;
 8004180:	6880      	ldr	r0, [r0, #8]
 8004182:	f004 fd25 	bl	8008bd0 <__aeabi_i2f>
}
 8004186:	bd08      	pop	{r3, pc}

08004188 <servo::motorName()>:
const char* servo::motorName(){
	return m_settings->m_motorName;
 8004188:	6843      	ldr	r3, [r0, #4]
}
 800418a:	6858      	ldr	r0, [r3, #4]
 800418c:	4770      	bx	lr

0800418e <servo::~servo()>:
servo::~servo()
 800418e:	b510      	push	{r4, lr}
 8004190:	4604      	mov	r4, r0
 8004192:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <servo::~servo()+0x12>)
 8004194:	6003      	str	r3, [r0, #0]
 8004196:	f7ff ffe3 	bl	8004160 <motor::~motor()>
}
 800419a:	4620      	mov	r0, r4
 800419c:	bd10      	pop	{r4, pc}
 800419e:	bf00      	nop
 80041a0:	0800b5fc 	.word	0x0800b5fc

080041a4 <servo::~servo()>:
servo::~servo()
 80041a4:	b510      	push	{r4, lr}
 80041a6:	4604      	mov	r4, r0
}
 80041a8:	f7ff fff1 	bl	800418e <servo::~servo()>
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fb71 	bl	8004894 <operator delete(void*)>
 80041b2:	4620      	mov	r0, r4
 80041b4:	bd10      	pop	{r4, pc}

080041b6 <servo::motorInit()>:
{
 80041b6:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80041b8:	6843      	ldr	r3, [r0, #4]
{
 80041ba:	b094      	sub	sp, #80	; 0x50
	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80041bc:	699a      	ldr	r2, [r3, #24]
{
 80041be:	4604      	mov	r4, r0
	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80041c0:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80041c4:	2218      	movs	r2, #24
 80041c6:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80041ca:	2203      	movs	r2, #3
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80041cc:	69d8      	ldr	r0, [r3, #28]
 80041ce:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80041d0:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80041d4:	f7fc fd23 	bl	8000c1e <GPIO_Init>
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
 80041d8:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80041dc:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 80041e0:	2317      	movs	r3, #23
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80041e2:	2500      	movs	r5, #0
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 80041e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	a901      	add	r1, sp, #4
 80041ec:	6898      	ldr	r0, [r3, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80041ee:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80041f2:	f8ad 5006 	strh.w	r5, [sp, #6]
	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80041f6:	f7fd fc87 	bl	8001b08 <TIM_TimeBaseInit>
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80041fa:	a810      	add	r0, sp, #64	; 0x40
 80041fc:	f7fd fdde 	bl	8001dbc <TIM_OCStructInit>
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004200:	2360      	movs	r3, #96	; 0x60
 8004202:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8004206:	2301      	movs	r3, #1
 8004208:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
	switch(m_settings->m_TimerChannel){
 800420c:	6863      	ldr	r3, [r4, #4]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 800420e:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
	switch(m_settings->m_TimerChannel){
 8004212:	68da      	ldr	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004214:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
	switch(m_settings->m_TimerChannel){
 8004218:	3a01      	subs	r2, #1
 800421a:	2a03      	cmp	r2, #3
 800421c:	d864      	bhi.n	80042e8 <servo::motorInit()+0x132>
 800421e:	e8df f002 	tbb	[pc, r2]
 8004222:	4502      	.short	0x4502
 8004224:	594f      	.short	0x594f
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004226:	6898      	ldr	r0, [r3, #8]
 8004228:	a910      	add	r1, sp, #64	; 0x40
 800422a:	f7fd fcb7 	bl	8001b9c <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	2108      	movs	r1, #8
 8004232:	6898      	ldr	r0, [r3, #8]
 8004234:	f7fd fedb 	bl	8001fee <TIM_OC1PreloadConfig>
	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	2101      	movs	r1, #1
 800423c:	6898      	ldr	r0, [r3, #8]
 800423e:	f7fd fea6 	bl	8001f8e <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	2101      	movs	r1, #1
 8004246:	6898      	ldr	r0, [r3, #8]
 8004248:	f7fd fddf 	bl	8001e0a <TIM_CtrlPWMOutputs>
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 800424c:	6863      	ldr	r3, [r4, #4]
	float b_[] = {0.0201,    0.0402,    0.0201};
 800424e:	4e27      	ldr	r6, [pc, #156]	; (80042ec <servo::motorInit()+0x136>)
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 8004250:	6898      	ldr	r0, [r3, #8]
 8004252:	2101      	movs	r1, #1
 8004254:	f7fd fdcd 	bl	8001df2 <TIM_Cmd>
	float b_[] = {0.0201,    0.0402,    0.0201};
 8004258:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800425c:	ad04      	add	r5, sp, #16
	float a_[] = {1.0000,   -1.561,    0.6414};
 800425e:	ab07      	add	r3, sp, #28
 8004260:	360c      	adds	r6, #12
	float b_[] = {0.0201,    0.0402,    0.0201};
 8004262:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	float a_[] = {1.0000,   -1.561,    0.6414};
 8004266:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800426a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float y_[] = {0, 0, 0};
 800426e:	2200      	movs	r2, #0
 8004270:	920a      	str	r2, [sp, #40]	; 0x28
 8004272:	920b      	str	r2, [sp, #44]	; 0x2c
	float u_[] = {0, 0, 0};
 8004274:	920d      	str	r2, [sp, #52]	; 0x34
 8004276:	920e      	str	r2, [sp, #56]	; 0x38
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004278:	462a      	mov	r2, r5
 800427a:	ca03      	ldmia	r2!, {r0, r1}
 800427c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800427e:	6810      	ldr	r0, [r2, #0]
 8004280:	6321      	str	r1, [r4, #48]	; 0x30
 8004282:	6360      	str	r0, [r4, #52]	; 0x34
 8004284:	cb03      	ldmia	r3!, {r0, r1}
 8004286:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	ab0a      	add	r3, sp, #40	; 0x28
 800428c:	6421      	str	r1, [r4, #64]	; 0x40
 800428e:	6460      	str	r0, [r4, #68]	; 0x44
 8004290:	cb03      	ldmia	r3!, {r0, r1}
 8004292:	61e0      	str	r0, [r4, #28]
 8004294:	2000      	movs	r0, #0
 8004296:	ab0d      	add	r3, sp, #52	; 0x34
 8004298:	6221      	str	r1, [r4, #32]
 800429a:	6260      	str	r0, [r4, #36]	; 0x24
 800429c:	cb03      	ldmia	r3!, {r0, r1}
 800429e:	60e0      	str	r0, [r4, #12]
 80042a0:	2000      	movs	r0, #0
 80042a2:	6160      	str	r0, [r4, #20]
	return true;
 80042a4:	2001      	movs	r0, #1
 80042a6:	6121      	str	r1, [r4, #16]
}
 80042a8:	b014      	add	sp, #80	; 0x50
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80042ac:	a910      	add	r1, sp, #64	; 0x40
 80042ae:	6898      	ldr	r0, [r3, #8]
 80042b0:	f7fd fcb8 	bl	8001c24 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	2108      	movs	r1, #8
 80042b8:	6898      	ldr	r0, [r3, #8]
 80042ba:	f7fd fea0 	bl	8001ffe <TIM_OC2PreloadConfig>
 80042be:	e7bb      	b.n	8004238 <servo::motorInit()+0x82>
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80042c0:	a910      	add	r1, sp, #64	; 0x40
 80042c2:	6898      	ldr	r0, [r3, #8]
 80042c4:	f7fd fcee 	bl	8001ca4 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	2108      	movs	r1, #8
 80042cc:	6898      	ldr	r0, [r3, #8]
 80042ce:	f7fd fea0 	bl	8002012 <TIM_OC3PreloadConfig>
 80042d2:	e7b1      	b.n	8004238 <servo::motorInit()+0x82>
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80042d4:	a910      	add	r1, sp, #64	; 0x40
 80042d6:	6898      	ldr	r0, [r3, #8]
 80042d8:	f7fd fd22 	bl	8001d20 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	2108      	movs	r1, #8
 80042e0:	6898      	ldr	r0, [r3, #8]
 80042e2:	f7fd fe9e 	bl	8002022 <TIM_OC4PreloadConfig>
 80042e6:	e7a7      	b.n	8004238 <servo::motorInit()+0x82>
			return false;
 80042e8:	2000      	movs	r0, #0
 80042ea:	e7dd      	b.n	80042a8 <servo::motorInit()+0xf2>
 80042ec:	0800b61c 	.word	0x0800b61c

080042f0 <servo::servo(motorSettings*)>:
servo::servo(motorSettings *settings) : motor(settings)
 80042f0:	b510      	push	{r4, lr}
 80042f2:	4604      	mov	r4, r0
 80042f4:	f7ff ff2e 	bl	8004154 <motor::motor(motorSettings*)>
 80042f8:	4b01      	ldr	r3, [pc, #4]	; (8004300 <servo::servo(motorSettings*)+0x10>)
}
 80042fa:	4620      	mov	r0, r4
servo::servo(motorSettings *settings) : motor(settings)
 80042fc:	6023      	str	r3, [r4, #0]
}
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	0800b5fc 	.word	0x0800b5fc

08004304 <servo::filterUpdate(float)>:
	}
	__enable_irq();
	return (float)spDeg;//std::make_tuple(y0, 0, sp, 0);
}

float servo::filterUpdate(float sp){
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i = 2; i > 0; i--){
		u[i] = u[i-1]; 
	}
	u[0] = sp; 
 8004306:	4605      	mov	r5, r0
float servo::filterUpdate(float sp){
 8004308:	4604      	mov	r4, r0
	
	float Y = 0;
 800430a:	2600      	movs	r6, #0
	for(i = 0; i<3; i++){
 800430c:	2700      	movs	r7, #0
		u[i] = u[i-1]; 
 800430e:	6903      	ldr	r3, [r0, #16]
 8004310:	6143      	str	r3, [r0, #20]
 8004312:	68c3      	ldr	r3, [r0, #12]
 8004314:	6103      	str	r3, [r0, #16]
	u[0] = sp; 
 8004316:	f845 1f0c 	str.w	r1, [r5, #12]!
 800431a:	462b      	mov	r3, r5
		Y += b[i]*u[i];
 800431c:	6829      	ldr	r1, [r5, #0]
 800431e:	6a18      	ldr	r0, [r3, #32]
 8004320:	f004 fcaa 	bl	8008c78 <__aeabi_fmul>
 8004324:	4601      	mov	r1, r0
 8004326:	4630      	mov	r0, r6
 8004328:	f004 fb9e 	bl	8008a68 <__addsf3>
		if(i < 2)
 800432c:	2f02      	cmp	r7, #2
		Y += b[i]*u[i];
 800432e:	f105 0504 	add.w	r5, r5, #4
 8004332:	4606      	mov	r6, r0
		if(i < 2)
 8004334:	d008      	beq.n	8004348 <servo::filterUpdate(float)+0x44>
			Y -= a[i+1]*y[i];
 8004336:	68e9      	ldr	r1, [r5, #12]
 8004338:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800433a:	f004 fc9d 	bl	8008c78 <__aeabi_fmul>
 800433e:	4601      	mov	r1, r0
 8004340:	4630      	mov	r0, r6
 8004342:	f004 fb8f 	bl	8008a64 <__aeabi_fsub>
 8004346:	4606      	mov	r6, r0
	for(i = 0; i<3; i++){
 8004348:	3701      	adds	r7, #1
 800434a:	2f03      	cmp	r7, #3
 800434c:	d1e5      	bne.n	800431a <servo::filterUpdate(float)+0x16>
	}
	//Y /= a[0];

	for(i = 2; i > 0; i--){
		y[i] = y[i-1]; 
 800434e:	6a23      	ldr	r3, [r4, #32]
	}
	y[0] = Y;
	return Y;
 8004350:	4630      	mov	r0, r6
		y[i] = y[i-1]; 
 8004352:	6263      	str	r3, [r4, #36]	; 0x24
 8004354:	69e3      	ldr	r3, [r4, #28]
	y[0] = Y;
 8004356:	61e6      	str	r6, [r4, #28]
		y[i] = y[i-1]; 
 8004358:	6223      	str	r3, [r4, #32]
 800435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800435c <servo::update(float, bool, bool)>:
float servo::update(float dt, bool connected, bool enable){
 800435c:	b510      	push	{r4, lr}
 800435e:	4604      	mov	r4, r0
	int spDeg = (int)filterUpdate(pos);
 8004360:	6880      	ldr	r0, [r0, #8]
 8004362:	f004 fc35 	bl	8008bd0 <__aeabi_i2f>
 8004366:	4601      	mov	r1, r0
 8004368:	4620      	mov	r0, r4
 800436a:	f7ff ffcb 	bl	8004304 <servo::filterUpdate(float)>
 800436e:	f004 fe5f 	bl	8009030 <__aeabi_f2iz>
	int sp = spDeg * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;	
 8004372:	6861      	ldr	r1, [r4, #4]
 8004374:	694c      	ldr	r4, [r1, #20]
 8004376:	690a      	ldr	r2, [r1, #16]
 8004378:	1b13      	subs	r3, r2, r4
 800437a:	22b4      	movs	r2, #180	; 0xb4
 800437c:	4343      	muls	r3, r0
 800437e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004382:	4423      	add	r3, r4
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8004384:	b672      	cpsid	i
	switch(m_settings->m_TimerChannel){
 8004386:	68ca      	ldr	r2, [r1, #12]
 8004388:	3a01      	subs	r2, #1
 800438a:	2a03      	cmp	r2, #3
 800438c:	d806      	bhi.n	800439c <servo::update(float, bool, bool)+0x40>
 800438e:	e8df f002 	tbb	[pc, r2]
 8004392:	0902      	.short	0x0902
 8004394:	110d      	.short	0x110d
			(m_settings->m_Timer)->CCR1 = sp;
 8004396:	688a      	ldr	r2, [r1, #8]
 8004398:	b29b      	uxth	r3, r3
 800439a:	8693      	strh	r3, [r2, #52]	; 0x34
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800439c:	b662      	cpsie	i
	return (float)spDeg;//std::make_tuple(y0, 0, sp, 0);
 800439e:	f004 fc17 	bl	8008bd0 <__aeabi_i2f>
}
 80043a2:	bd10      	pop	{r4, pc}
			(m_settings->m_Timer)->CCR2 = sp;
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8713      	strh	r3, [r2, #56]	; 0x38
			break;
 80043aa:	e7f7      	b.n	800439c <servo::update(float, bool, bool)+0x40>
			(m_settings->m_Timer)->CCR3 = sp;
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8793      	strh	r3, [r2, #60]	; 0x3c
			break;
 80043b2:	e7f3      	b.n	800439c <servo::update(float, bool, bool)+0x40>
			(m_settings->m_Timer)->CCR4 = sp;
 80043b4:	688a      	ldr	r2, [r1, #8]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
			break;
 80043bc:	e7ee      	b.n	800439c <servo::update(float, bool, bool)+0x40>
 80043be:	bf00      	nop

080043c0 <servo::motorType()>:
    virtual float getReference();
    virtual const char* motorName();
    //virtual std::tuple<float, int, int, int> update(float dt, bool connected);
    virtual float update(float dt, bool connected, bool enable);

    virtual int motorType() { return MOTOR_TYPE_SERVO; }
 80043c0:	2001      	movs	r0, #1
 80043c2:	4770      	bx	lr

080043c4 <DCMotor::setReference(float)>:

	return true;
}

void DCMotor::setReference(float setPoint){
	speed = setPoint;
 80043c4:	6081      	str	r1, [r0, #8]
 80043c6:	4770      	bx	lr

080043c8 <DCMotor::getReference()>:
	return true;
}

float DCMotor::getReference(){
	return speed;
}
 80043c8:	6880      	ldr	r0, [r0, #8]
 80043ca:	4770      	bx	lr

080043cc <DCMotor::motorName()>:

const char* DCMotor::motorName(){
	return m_settings->m_motorName;
 80043cc:	6843      	ldr	r3, [r0, #4]
}
 80043ce:	6858      	ldr	r0, [r3, #4]
 80043d0:	4770      	bx	lr

080043d2 <DCMotor::~DCMotor()>:
DCMotor::~DCMotor()
 80043d2:	b510      	push	{r4, lr}
 80043d4:	4604      	mov	r4, r0
 80043d6:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <DCMotor::~DCMotor()+0x12>)
 80043d8:	6003      	str	r3, [r0, #0]
 80043da:	f7ff fec1 	bl	8004160 <motor::~motor()>
}
 80043de:	4620      	mov	r0, r4
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	0800b650 	.word	0x0800b650

080043e8 <DCMotor::~DCMotor()>:
DCMotor::~DCMotor()
 80043e8:	b510      	push	{r4, lr}
 80043ea:	4604      	mov	r4, r0
}
 80043ec:	f7ff fff1 	bl	80043d2 <DCMotor::~DCMotor()>
 80043f0:	4620      	mov	r0, r4
 80043f2:	f000 fa4f 	bl	8004894 <operator delete(void*)>
 80043f6:	4620      	mov	r0, r4
 80043f8:	bd10      	pop	{r4, pc}

080043fa <DCMotor::motorInit()>:
{
 80043fa:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80043fc:	2503      	movs	r5, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80043fe:	2610      	movs	r6, #16
{
 8004400:	4604      	mov	r4, r0
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004402:	6843      	ldr	r3, [r0, #4]
{
 8004404:	b088      	sub	sp, #32
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004406:	6a1a      	ldr	r2, [r3, #32]
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 8004408:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800440a:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 800440c:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004410:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004414:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 8004418:	f7fc fc01 	bl	8000c1e <GPIO_Init>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800441c:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8004420:	2614      	movs	r6, #20
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004422:	6863      	ldr	r3, [r4, #4]
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 8004424:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 8004428:	6b58      	ldr	r0, [r3, #52]	; 0x34
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 800442a:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800442e:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 8004432:	f7fc fbf4 	bl	8000c1e <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 8004436:	6863      	ldr	r3, [r4, #4]
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 8004438:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 800443a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 800443c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 800443e:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004442:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8004446:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 800444a:	f7fc fbe8 	bl	8000c1e <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 800444e:	6863      	ldr	r3, [r4, #4]
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004450:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 8004452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004454:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 8004456:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800445a:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800445e:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004462:	f7fc fbdc 	bl	8000c1e <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 8004466:	6863      	ldr	r3, [r4, #4]
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004468:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 800446a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 800446c:	6c58      	ldr	r0, [r3, #68]	; 0x44
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 800446e:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004472:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004474:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004478:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 800447c:	f7fc fbcf 	bl	8000c1e <GPIO_Init>
	if(m_settings->m_Timer == TIM1)
 8004480:	6863      	ldr	r3, [r4, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8004482:	2500      	movs	r5, #0
	if(m_settings->m_Timer == TIM1)
 8004484:	6898      	ldr	r0, [r3, #8]
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <DCMotor::motorInit()+0x17a>)
	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 8004488:	a901      	add	r1, sp, #4
	if(m_settings->m_Timer == TIM1)
 800448a:	4298      	cmp	r0, r3
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 800448c:	bf0c      	ite	eq
 800448e:	f247 037e 	movweq	r3, #28798	; 0x707e
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 8004492:	f643 033f 	movwne	r3, #14399	; 0x383f
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8004496:	f8ad 5004 	strh.w	r5, [sp, #4]
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 800449a:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 800449e:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80044a2:	f8ad 5006 	strh.w	r5, [sp, #6]
	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80044a6:	f7fd fb2f 	bl	8001b08 <TIM_TimeBaseInit>
	TIM_OCStructInit(&TIM_OCInitStructure);
 80044aa:	a804      	add	r0, sp, #16
 80044ac:	f7fd fc86 	bl	8001dbc <TIM_OCStructInit>
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80044b0:	2360      	movs	r3, #96	; 0x60
 80044b2:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f8ad 3012 	strh.w	r3, [sp, #18]
	switch(m_settings->m_TimerChannel){
 80044bc:	6863      	ldr	r3, [r4, #4]
	TIM_OCInitStructure.TIM_Pulse = 0x00;
 80044be:	f8ad 5016 	strh.w	r5, [sp, #22]
	switch(m_settings->m_TimerChannel){
 80044c2:	68da      	ldr	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80044c4:	f8ad 5018 	strh.w	r5, [sp, #24]
	switch(m_settings->m_TimerChannel){
 80044c8:	3a01      	subs	r2, #1
 80044ca:	2a03      	cmp	r2, #3
 80044cc:	d84f      	bhi.n	800456e <DCMotor::motorInit()+0x174>
 80044ce:	e8df f002 	tbb	[pc, r2]
 80044d2:	3002      	.short	0x3002
 80044d4:	443a      	.short	0x443a
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80044d6:	6898      	ldr	r0, [r3, #8]
 80044d8:	a904      	add	r1, sp, #16
 80044da:	f7fd fb5f 	bl	8001b9c <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	2108      	movs	r1, #8
 80044e2:	6898      	ldr	r0, [r3, #8]
 80044e4:	f7fd fd83 	bl	8001fee <TIM_OC1PreloadConfig>
	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	2101      	movs	r1, #1
 80044ec:	6898      	ldr	r0, [r3, #8]
 80044ee:	f7fd fd4e 	bl	8001f8e <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	2101      	movs	r1, #1
 80044f6:	6898      	ldr	r0, [r3, #8]
 80044f8:	f7fd fc87 	bl	8001e0a <TIM_CtrlPWMOutputs>
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	2101      	movs	r1, #1
 8004500:	6898      	ldr	r0, [r3, #8]
 8004502:	f7fd fc76 	bl	8001df2 <TIM_Cmd>
	initEncoder(m_settings->encoderAddr);
 8004506:	6863      	ldr	r3, [r4, #4]
	return true;
 8004508:	2001      	movs	r0, #1

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 800450a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800450e:	7322      	strb	r2, [r4, #12]
	integral = 0;
 8004510:	2200      	movs	r2, #0
 8004512:	62e2      	str	r2, [r4, #44]	; 0x2c
	error = 0;
 8004514:	62a2      	str	r2, [r4, #40]	; 0x28
	wheelRadius = m_settings->wheelRadius;
 8004516:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004518:	6122      	str	r2, [r4, #16]
	FF = m_settings->FF;
 800451a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800451c:	6162      	str	r2, [r4, #20]
	KP = m_settings->KP;
 800451e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004520:	61a2      	str	r2, [r4, #24]
	KI = m_settings->KI;
 8004522:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004524:	61e2      	str	r2, [r4, #28]
	KD = m_settings->KD;
 8004526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	integralSaturation = m_settings->integralSaturation;
 8004528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	KD = m_settings->KD;
 800452a:	6222      	str	r2, [r4, #32]
	integralSaturation = m_settings->integralSaturation;
 800452c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800452e:	b008      	add	sp, #32
 8004530:	bd70      	pop	{r4, r5, r6, pc}
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004532:	a904      	add	r1, sp, #16
 8004534:	6898      	ldr	r0, [r3, #8]
 8004536:	f7fd fb75 	bl	8001c24 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	2108      	movs	r1, #8
 800453e:	6898      	ldr	r0, [r3, #8]
 8004540:	f7fd fd5d 	bl	8001ffe <TIM_OC2PreloadConfig>
 8004544:	e7d0      	b.n	80044e8 <DCMotor::motorInit()+0xee>
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004546:	a904      	add	r1, sp, #16
 8004548:	6898      	ldr	r0, [r3, #8]
 800454a:	f7fd fbab 	bl	8001ca4 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	2108      	movs	r1, #8
 8004552:	6898      	ldr	r0, [r3, #8]
 8004554:	f7fd fd5d 	bl	8002012 <TIM_OC3PreloadConfig>
 8004558:	e7c6      	b.n	80044e8 <DCMotor::motorInit()+0xee>
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800455a:	a904      	add	r1, sp, #16
 800455c:	6898      	ldr	r0, [r3, #8]
 800455e:	f7fd fbdf 	bl	8001d20 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	2108      	movs	r1, #8
 8004566:	6898      	ldr	r0, [r3, #8]
 8004568:	f7fd fd5b 	bl	8002022 <TIM_OC4PreloadConfig>
 800456c:	e7bc      	b.n	80044e8 <DCMotor::motorInit()+0xee>
			return false;
 800456e:	2000      	movs	r0, #0
 8004570:	e7dd      	b.n	800452e <DCMotor::motorInit()+0x134>
 8004572:	bf00      	nop
 8004574:	40012c00 	.word	0x40012c00

08004578 <DCMotor::DCMotor(motorSettings*)>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	f7ff fdea 	bl	8004154 <motor::motor(motorSettings*)>
 8004580:	4b01      	ldr	r3, [pc, #4]	; (8004588 <DCMotor::DCMotor(motorSettings*)+0x10>)
}
 8004582:	4620      	mov	r0, r4
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 8004584:	6023      	str	r3, [r4, #0]
}
 8004586:	bd10      	pop	{r4, pc}
 8004588:	0800b650 	.word	0x0800b650

0800458c <DCMotor::setSpeed(int, bool)>:
bool DCMotor::setSpeed(int s, bool enable){
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4605      	mov	r5, r0
	if(!enable){
 8004590:	4614      	mov	r4, r2
 8004592:	6843      	ldr	r3, [r0, #4]
 8004594:	b94a      	cbnz	r2, 80045aa <DCMotor::setSpeed(int, bool)+0x1e>
				GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 8004596:	8c19      	ldrh	r1, [r3, #32]
 8004598:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800459a:	f7fc fbae 	bl	8000cfa <GPIO_ResetBits>
				GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 800459e:	686b      	ldr	r3, [r5, #4]
 80045a0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80045a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045a4:	f7fc fba7 	bl	8000cf6 <GPIO_SetBits>
 80045a8:	e01d      	b.n	80045e6 <DCMotor::setSpeed(int, bool)+0x5a>
 80045aa:	f643 043f 	movw	r4, #14399	; 0x383f
 80045ae:	42a1      	cmp	r1, r4
 80045b0:	bfa8      	it	ge
 80045b2:	4621      	movge	r1, r4
 80045b4:	4c23      	ldr	r4, [pc, #140]	; (8004644 <DCMotor::setSpeed(int, bool)+0xb8>)
			GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 80045b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80045b8:	428c      	cmp	r4, r1
 80045ba:	bfb8      	it	lt
 80045bc:	460c      	movlt	r4, r1
 80045be:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80045c0:	f7fc fb99 	bl	8000cf6 <GPIO_SetBits>
			GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 80045c4:	686b      	ldr	r3, [r5, #4]
 80045c6:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80045c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80045ca:	f7fc fb94 	bl	8000cf6 <GPIO_SetBits>
			if(s > 0){
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	dd18      	ble.n	8004604 <DCMotor::setSpeed(int, bool)+0x78>
				GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 80045d2:	686b      	ldr	r3, [r5, #4]
 80045d4:	8c19      	ldrh	r1, [r3, #32]
 80045d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045d8:	f7fc fb8d 	bl	8000cf6 <GPIO_SetBits>
				GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80045dc:	686b      	ldr	r3, [r5, #4]
 80045de:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80045e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045e2:	f7fc fb8a 	bl	8000cfa <GPIO_ResetBits>
	if(m_settings->m_Timer == TIM1)
 80045e6:	686a      	ldr	r2, [r5, #4]
 80045e8:	4917      	ldr	r1, [pc, #92]	; (8004648 <DCMotor::setSpeed(int, bool)+0xbc>)
 80045ea:	6893      	ldr	r3, [r2, #8]
	switch(m_settings->m_TimerChannel){
 80045ec:	68d2      	ldr	r2, [r2, #12]
	if(m_settings->m_Timer == TIM1)
 80045ee:	428b      	cmp	r3, r1
	switch(m_settings->m_TimerChannel){
 80045f0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		s = s * 2;
 80045f4:	bf08      	it	eq
 80045f6:	0064      	lsleq	r4, r4, #1
	switch(m_settings->m_TimerChannel){
 80045f8:	2a03      	cmp	r2, #3
 80045fa:	d820      	bhi.n	800463e <DCMotor::setSpeed(int, bool)+0xb2>
 80045fc:	e8df f002 	tbb	[pc, r2]
 8004600:	18120c05 	.word	0x18120c05
			}else if(s < 0){
 8004604:	d01b      	beq.n	800463e <DCMotor::setSpeed(int, bool)+0xb2>
				GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 8004606:	686b      	ldr	r3, [r5, #4]
 8004608:	e7c5      	b.n	8004596 <DCMotor::setSpeed(int, bool)+0xa>
			(m_settings->m_Timer)->CCR1 = (uint16_t)ABS(s);
 800460a:	2c00      	cmp	r4, #0
 800460c:	bfb8      	it	lt
 800460e:	4264      	neglt	r4, r4
 8004610:	b2a4      	uxth	r4, r4
 8004612:	869c      	strh	r4, [r3, #52]	; 0x34
	return true;
 8004614:	2001      	movs	r0, #1
			break;
 8004616:	bd38      	pop	{r3, r4, r5, pc}
			(m_settings->m_Timer)->CCR2 = (uint16_t)ABS(s);
 8004618:	2c00      	cmp	r4, #0
 800461a:	bfb8      	it	lt
 800461c:	4264      	neglt	r4, r4
 800461e:	b2a4      	uxth	r4, r4
 8004620:	871c      	strh	r4, [r3, #56]	; 0x38
 8004622:	e7f7      	b.n	8004614 <DCMotor::setSpeed(int, bool)+0x88>
			(m_settings->m_Timer)->CCR3 = (uint16_t)ABS(s);
 8004624:	2c00      	cmp	r4, #0
 8004626:	bfb8      	it	lt
 8004628:	4264      	neglt	r4, r4
 800462a:	b2a4      	uxth	r4, r4
 800462c:	879c      	strh	r4, [r3, #60]	; 0x3c
 800462e:	e7f1      	b.n	8004614 <DCMotor::setSpeed(int, bool)+0x88>
			(m_settings->m_Timer)->CCR4 = (uint16_t)ABS(s);
 8004630:	2c00      	cmp	r4, #0
 8004632:	bfb8      	it	lt
 8004634:	4264      	neglt	r4, r4
 8004636:	b2a4      	uxth	r4, r4
 8004638:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
 800463c:	e7ea      	b.n	8004614 <DCMotor::setSpeed(int, bool)+0x88>
			return false;
 800463e:	2000      	movs	r0, #0
}
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	bf00      	nop
 8004644:	ffffc7c1 	.word	0xffffc7c1
 8004648:	40012c00 	.word	0x40012c00

0800464c <DCMotor::initEncoder(unsigned short)>:
	encAddr = addr;
 800464c:	7301      	strb	r1, [r0, #12]
 800464e:	4770      	bx	lr

08004650 <DCMotor::readEncoder()>:
}

int32_t DCMotor::readEncoder(){
 8004650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	4604      	mov	r4, r0
    uint8_t Rx_Idx = 0;
    uint8_t RxBuffer[4] = {0};


    // START
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8004656:	4d38      	ldr	r5, [pc, #224]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 8004658:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800465c:	4628      	mov	r0, r5
 800465e:	f7fc fd59 	bl	8001114 <I2C_GetFlagStatus>
 8004662:	2800      	cmp	r0, #0
 8004664:	d1f8      	bne.n	8004658 <DCMotor::readEncoder()+0x8>
    I2C_GenerateSTART(I2C1, ENABLE);
 8004666:	2101      	movs	r1, #1
 8004668:	4833      	ldr	r0, [pc, #204]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 800466a:	f7fc fc6b 	bl	8000f44 <I2C_GenerateSTART>
	// wait for I2C1 EV5 --> Slave has acknowledged start condition
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 800466e:	4e33      	ldr	r6, [pc, #204]	; (800473c <DCMotor::readEncoder()+0xec>)
 8004670:	4d31      	ldr	r5, [pc, #196]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 8004672:	4631      	mov	r1, r6
 8004674:	4628      	mov	r0, r5
 8004676:	f7fc fd39 	bl	80010ec <I2C_CheckEvent>
 800467a:	2800      	cmp	r0, #0
 800467c:	d0f9      	beq.n	8004672 <DCMotor::readEncoder()+0x22>
    I2C_Send7bitAddress(I2C1, encAddr<<1, I2C_Direction_Receiver);
 800467e:	7b21      	ldrb	r1, [r4, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	0049      	lsls	r1, r1, #1
 8004684:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004688:	482b      	ldr	r0, [pc, #172]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 800468a:	f7fc fcae 	bl	8000fea <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 800468e:	4d2c      	ldr	r5, [pc, #176]	; (8004740 <DCMotor::readEncoder()+0xf0>)
 8004690:	4c29      	ldr	r4, [pc, #164]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 8004692:	4629      	mov	r1, r5
 8004694:	4620      	mov	r0, r4
 8004696:	f7fc fd29 	bl	80010ec <I2C_CheckEvent>
 800469a:	2800      	cmp	r0, #0
 800469c:	d0f9      	beq.n	8004692 <DCMotor::readEncoder()+0x42>



    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 800469e:	2101      	movs	r1, #1
 80046a0:	4825      	ldr	r0, [pc, #148]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046a2:	f7fc fc67 	bl	8000f74 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 80046a6:	4d27      	ldr	r5, [pc, #156]	; (8004744 <DCMotor::readEncoder()+0xf4>)
 80046a8:	4c23      	ldr	r4, [pc, #140]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046aa:	4629      	mov	r1, r5
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7fc fd1d 	bl	80010ec <I2C_CheckEvent>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0f9      	beq.n	80046aa <DCMotor::readEncoder()+0x5a>
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 80046b6:	4820      	ldr	r0, [pc, #128]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046b8:	f7fc fc94 	bl	8000fe4 <I2C_ReceiveData>

	// ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80046bc:	2101      	movs	r1, #1
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 80046be:	4606      	mov	r6, r0
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80046c0:	481d      	ldr	r0, [pc, #116]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046c2:	f7fc fc57 	bl	8000f74 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 80046c6:	4d1f      	ldr	r5, [pc, #124]	; (8004744 <DCMotor::readEncoder()+0xf4>)
 80046c8:	4c1b      	ldr	r4, [pc, #108]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046ca:	4629      	mov	r1, r5
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7fc fd0d 	bl	80010ec <I2C_CheckEvent>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d0f9      	beq.n	80046ca <DCMotor::readEncoder()+0x7a>
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 80046d6:	4818      	ldr	r0, [pc, #96]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046d8:	f7fc fc84 	bl	8000fe4 <I2C_ReceiveData>


    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80046dc:	2101      	movs	r1, #1
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 80046de:	4604      	mov	r4, r0
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80046e0:	4815      	ldr	r0, [pc, #84]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046e2:	f7fc fc47 	bl	8000f74 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 80046e6:	4f17      	ldr	r7, [pc, #92]	; (8004744 <DCMotor::readEncoder()+0xf4>)
 80046e8:	4d13      	ldr	r5, [pc, #76]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046ea:	4639      	mov	r1, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7fc fcfd 	bl	80010ec <I2C_CheckEvent>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d0f9      	beq.n	80046ea <DCMotor::readEncoder()+0x9a>
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 80046f6:	4810      	ldr	r0, [pc, #64]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 80046f8:	f7fc fc74 	bl	8000fe4 <I2C_ReceiveData>


    // NACK
    I2C_AcknowledgeConfig(I2C1, DISABLE);
 80046fc:	2100      	movs	r1, #0
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 80046fe:	4605      	mov	r5, r0
    I2C_AcknowledgeConfig(I2C1, DISABLE);
 8004700:	480d      	ldr	r0, [pc, #52]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 8004702:	f7fc fc37 	bl	8000f74 <I2C_AcknowledgeConfig>
	I2C_GenerateSTOP(I2C1, ENABLE);
 8004706:	2101      	movs	r1, #1
 8004708:	480b      	ldr	r0, [pc, #44]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 800470a:	f7fc fc27 	bl	8000f5c <I2C_GenerateSTOP>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 800470e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8004744 <DCMotor::readEncoder()+0xf4>
 8004712:	4f09      	ldr	r7, [pc, #36]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 8004714:	4641      	mov	r1, r8
 8004716:	4638      	mov	r0, r7
 8004718:	f7fc fce8 	bl	80010ec <I2C_CheckEvent>
 800471c:	2800      	cmp	r0, #0
 800471e:	d0f9      	beq.n	8004714 <DCMotor::readEncoder()+0xc4>
	RxBuffer[Rx_Idx] = I2C_ReceiveData(I2C1);
 8004720:	4805      	ldr	r0, [pc, #20]	; (8004738 <DCMotor::readEncoder()+0xe8>)
 8004722:	f7fc fc5f 	bl	8000fe4 <I2C_ReceiveData>

   
	return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 8004726:	0424      	lsls	r4, r4, #16
 8004728:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 800472c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
}
 8004730:	4320      	orrs	r0, r4
 8004732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004736:	bf00      	nop
 8004738:	40005400 	.word	0x40005400
 800473c:	00030001 	.word	0x00030001
 8004740:	00030002 	.word	0x00030002
 8004744:	00030040 	.word	0x00030040

08004748 <DCMotor::updateRegulator(float, float, float)>:

float DCMotor::updateRegulator(float enc, float sp, float dt){
 8004748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	461f      	mov	r7, r3
	float error_new = sp-enc;		// m/s
 8004750:	4610      	mov	r0, r2
float DCMotor::updateRegulator(float enc, float sp, float dt){
 8004752:	4690      	mov	r8, r2
	float error_new = sp-enc;		// m/s
 8004754:	f004 f986 	bl	8008a64 <__aeabi_fsub>
	
	integral += error_new*dt;
 8004758:	4639      	mov	r1, r7
	float error_new = sp-enc;		// m/s
 800475a:	4606      	mov	r6, r0
	integral += error_new*dt;
 800475c:	f004 fa8c 	bl	8008c78 <__aeabi_fmul>
 8004760:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004762:	f004 f981 	bl	8008a68 <__addsf3>
	
	if (integral > integralSaturation){
 8004766:	6a65      	ldr	r5, [r4, #36]	; 0x24
	integral += error_new*dt;
 8004768:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (integral > integralSaturation){
 800476a:	4629      	mov	r1, r5
	integral += error_new*dt;
 800476c:	4681      	mov	r9, r0
	if (integral > integralSaturation){
 800476e:	f004 fc3f 	bl	8008ff0 <__aeabi_fcmpgt>
 8004772:	b108      	cbz	r0, 8004778 <DCMotor::updateRegulator(float, float, float)+0x30>
		integral = integralSaturation;
	}else if (integral < -(integralSaturation)){
		integral = -(integralSaturation);
 8004774:	62e5      	str	r5, [r4, #44]	; 0x2c
 8004776:	e007      	b.n	8004788 <DCMotor::updateRegulator(float, float, float)+0x40>
	}else if (integral < -(integralSaturation)){
 8004778:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800477c:	4629      	mov	r1, r5
 800477e:	4648      	mov	r0, r9
 8004780:	f004 fc18 	bl	8008fb4 <__aeabi_fcmplt>
 8004784:	2800      	cmp	r0, #0
 8004786:	d1f5      	bne.n	8004774 <DCMotor::updateRegulator(float, float, float)+0x2c>
	}
	
	float derivative = (error_new-error)/dt;
	float output = (FF*sp + KP*error_new + KI*integral + KD*derivative);
 8004788:	6961      	ldr	r1, [r4, #20]
 800478a:	4640      	mov	r0, r8
 800478c:	f004 fa74 	bl	8008c78 <__aeabi_fmul>
 8004790:	69a1      	ldr	r1, [r4, #24]
 8004792:	4605      	mov	r5, r0
 8004794:	4630      	mov	r0, r6
 8004796:	f004 fa6f 	bl	8008c78 <__aeabi_fmul>
 800479a:	4601      	mov	r1, r0
 800479c:	4628      	mov	r0, r5
 800479e:	f004 f963 	bl	8008a68 <__addsf3>
 80047a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047a4:	4605      	mov	r5, r0
 80047a6:	69e0      	ldr	r0, [r4, #28]
 80047a8:	f004 fa66 	bl	8008c78 <__aeabi_fmul>
 80047ac:	4601      	mov	r1, r0
 80047ae:	4628      	mov	r0, r5
 80047b0:	f004 f95a 	bl	8008a68 <__addsf3>
	float derivative = (error_new-error)/dt;
 80047b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	float output = (FF*sp + KP*error_new + KI*integral + KD*derivative);
 80047b6:	4605      	mov	r5, r0
	float derivative = (error_new-error)/dt;
 80047b8:	4630      	mov	r0, r6
 80047ba:	f004 f953 	bl	8008a64 <__aeabi_fsub>
 80047be:	4639      	mov	r1, r7
 80047c0:	f004 fb0e 	bl	8008de0 <__aeabi_fdiv>
	float output = (FF*sp + KP*error_new + KI*integral + KD*derivative);
 80047c4:	6a21      	ldr	r1, [r4, #32]
 80047c6:	f004 fa57 	bl	8008c78 <__aeabi_fmul>
 80047ca:	4601      	mov	r1, r0
 80047cc:	4628      	mov	r0, r5
 80047ce:	f004 f94b 	bl	8008a68 <__addsf3>
	error = error_new;
 80047d2:	62a6      	str	r6, [r4, #40]	; 0x28
	return output;
}
 80047d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080047d8 <DCMotor::update(float, bool, bool)>:

//std::tuple<float, int, int, int> DCMotor::update(float dt, bool connected){
float DCMotor::update(float dt, bool connected, bool enable){
 80047d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047dc:	4605      	mov	r5, r0
 80047de:	4688      	mov	r8, r1
 80047e0:	461f      	mov	r7, r3
	
	int s = 0;
	float speed_si = -1;
	int32_t encoder_speed = 0;
	float sp = 0.0;
	if(connected){
 80047e2:	b31a      	cbz	r2, 800482c <DCMotor::update(float, bool, bool)+0x54>
		sp = speed;
 80047e4:	6886      	ldr	r6, [r0, #8]
	}
	//std::tie(encoder_speed, retryCount, busyCount) = readEncoder();
	encoder_speed = readEncoder();
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7ff ff32 	bl	8004650 <DCMotor::readEncoder()>
	// (2 * pi * F)/(2^14 * N)	[N = 8][F = 2Khz]
	float encSpeed = encoder_speed*0.479368996f;		// rad/s
 80047ec:	f004 f9f0 	bl	8008bd0 <__aeabi_i2f>
 80047f0:	490f      	ldr	r1, [pc, #60]	; (8004830 <DCMotor::update(float, bool, bool)+0x58>)
 80047f2:	f004 fa41 	bl	8008c78 <__aeabi_fmul>
	speed_si = encSpeed * wheelRadius;	// m/s
 80047f6:	6929      	ldr	r1, [r5, #16]
 80047f8:	f004 fa3e 	bl	8008c78 <__aeabi_fmul>
 80047fc:	4604      	mov	r4, r0
	/*if(strstr(m_settings->m_motorName, "left") > 0)
		speed_si = speed_si * -1;*/

	if(encAddr == 0x10 || encAddr == (0x10 | 0x04)){
 80047fe:	7b2b      	ldrb	r3, [r5, #12]
		speed_si *= -1;
	}

	// Update PID regulator
	s = (int) updateRegulator(speed_si, sp, dt);		// m/s*/
 8004800:	4632      	mov	r2, r6
	if(encAddr == 0x10 || encAddr == (0x10 | 0x04)){
 8004802:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8004806:	2b10      	cmp	r3, #16
		speed_si *= -1;
 8004808:	bf08      	it	eq
 800480a:	f100 4400 	addeq.w	r4, r0, #2147483648	; 0x80000000
	s = (int) updateRegulator(speed_si, sp, dt);		// m/s*/
 800480e:	4643      	mov	r3, r8
 8004810:	4621      	mov	r1, r4
 8004812:	4628      	mov	r0, r5
 8004814:	f7ff ff98 	bl	8004748 <DCMotor::updateRegulator(float, float, float)>
 8004818:	f004 fc0a 	bl	8009030 <__aeabi_f2iz>
	// Set motor speed to process value
	
	setSpeed(s, enable);		// m/s
 800481c:	463a      	mov	r2, r7
 800481e:	4601      	mov	r1, r0
 8004820:	4628      	mov	r0, r5
 8004822:	f7ff feb3 	bl	800458c <DCMotor::setSpeed(int, bool)>
	
	// Return encoder values for publishing to localization
	return speed_si;
}
 8004826:	4620      	mov	r0, r4
 8004828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	float sp = 0.0;
 800482c:	2600      	movs	r6, #0
 800482e:	e7da      	b.n	80047e6 <DCMotor::update(float, bool, bool)+0xe>
 8004830:	3ef56fda 	.word	0x3ef56fda

08004834 <DCMotor::motorType()>:
    virtual float getReference();
    virtual const char* motorName();
    //virtual std::tuple<float, int, int, int> update(float dt, bool connected);
    virtual float update(float dt, bool connected, bool enable);

    virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
 8004834:	2002      	movs	r0, #2
 8004836:	4770      	bx	lr

08004838 <motorSettings::motorSettings()>:

motorSettings::motorSettings()
{
    //  preset general defaults

    m_motorType = 0;
 8004838:	2200      	movs	r2, #0
 800483a:	6002      	str	r2, [r0, #0]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 800483c:	4770      	bx	lr

0800483e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>:

motorSettings::motorSettings(int type, const char* name, TIM_TypeDef* timer, int timerChannel)
 800483e:	b510      	push	{r4, lr}
{
    //  preset general defaults

    m_motorType = type;
    m_motorName = name;
    m_Timer = timer;
 8004840:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    m_TimerChannel = timerChannel;
 8004844:	9b02      	ldr	r3, [sp, #8]
 8004846:	60c3      	str	r3, [r0, #12]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004848:	bd10      	pop	{r4, pc}

0800484a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>:
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
 800484a:	6283      	str	r3, [r0, #40]	; 0x28
    m_DCEnAPort = m_DCEnAPort_;
 800484c:	9b00      	ldr	r3, [sp, #0]
    m_DCInAPin = m_DCInAPin_;
 800484e:	6201      	str	r1, [r0, #32]
    m_DCEnAPort = m_DCEnAPort_;
 8004850:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_DCInBPin = m_DCInBPin_;
 8004852:	9b01      	ldr	r3, [sp, #4]
    m_DCInAPort = m_DCInAPort_;
 8004854:	6242      	str	r2, [r0, #36]	; 0x24
    m_DCInBPin = m_DCInBPin_;
 8004856:	6303      	str	r3, [r0, #48]	; 0x30
    m_DCInBPort = m_DCInBPort_;
 8004858:	9b02      	ldr	r3, [sp, #8]
 800485a:	6343      	str	r3, [r0, #52]	; 0x34
    m_DCEnBPin = m_DCEnBPin_;
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	6383      	str	r3, [r0, #56]	; 0x38
    m_DCEnBPort = m_DCEnBPort_;
 8004860:	9b04      	ldr	r3, [sp, #16]
 8004862:	63c3      	str	r3, [r0, #60]	; 0x3c
    m_DCPWMPin = m_DCPWMPin_;
 8004864:	9b05      	ldr	r3, [sp, #20]
 8004866:	6403      	str	r3, [r0, #64]	; 0x40
    m_DCPWMPort = m_DCPWMPort_;
 8004868:	9b06      	ldr	r3, [sp, #24]
 800486a:	6443      	str	r3, [r0, #68]	; 0x44
 800486c:	4770      	bx	lr

0800486e <motorSettings::setRegulator(float, float, float, float, float)>:
}

void motorSettings::setRegulator(float FF_, float KP_, float KI_, float KD_, float integralSaturation_){
    FF = FF_;
    KP = KP_;
    KI = KI_;
 800486e:	6583      	str	r3, [r0, #88]	; 0x58
    KD = KD_;
 8004870:	9b00      	ldr	r3, [sp, #0]
    FF = FF_;
 8004872:	6501      	str	r1, [r0, #80]	; 0x50
    KD = KD_;
 8004874:	65c3      	str	r3, [r0, #92]	; 0x5c
    integralSaturation = integralSaturation_;
 8004876:	9b01      	ldr	r3, [sp, #4]
    KP = KP_;
 8004878:	6542      	str	r2, [r0, #84]	; 0x54
    integralSaturation = integralSaturation_;
 800487a:	6603      	str	r3, [r0, #96]	; 0x60
 800487c:	4770      	bx	lr
	...

08004880 <__gnu_cxx::__verbose_terminate_handler()>:
 * The default pulls in 70K of garbage
 */

namespace __gnu_cxx {

	void __verbose_terminate_handler() {
 8004880:	e7fe      	b.n	8004880 <__gnu_cxx::__verbose_terminate_handler()>

08004882 <__cxa_pure_virtual>:

/*
 * The default pulls in about 12K of garbage
 */

extern "C" void __cxa_pure_virtual() {
 8004882:	e7fe      	b.n	8004882 <__cxa_pure_virtual>

08004884 <operator new(unsigned int)>:
 8004884:	f005 bbae 	b.w	8009fe4 <malloc>

08004888 <operator new(unsigned int, void*)>:
 8004888:	4608      	mov	r0, r1
 800488a:	4770      	bx	lr

0800488c <operator new[](unsigned int)>:
void *operator new(size_t,void *ptr) {
	return ptr;
}

void *operator new[](size_t size) {
	return malloc(size);
 800488c:	f005 bbaa 	b.w	8009fe4 <malloc>

08004890 <operator new[](unsigned int, void*)>:
}

void *operator new[](size_t,void *ptr) {
	return ptr;
}
 8004890:	4608      	mov	r0, r1
 8004892:	4770      	bx	lr

08004894 <operator delete(void*)>:
 8004894:	f005 bbae 	b.w	8009ff4 <free>

08004898 <operator delete[](void*)>:
void operator delete(void *p) {
	free(p);
}

void operator delete[](void *p) {
	free(p);
 8004898:	f005 bbac 	b.w	8009ff4 <free>

0800489c <__wrap___aeabi_unwind_cpp_pr0>:
 800489c:	4770      	bx	lr

0800489e <__wrap___aeabi_unwind_cpp_pr1>:
 800489e:	4770      	bx	lr

080048a0 <__wrap___aeabi_unwind_cpp_pr2>:
 * symbols and save a lot of flash space.
 */

extern "C" void __wrap___aeabi_unwind_cpp_pr0() {}
extern "C" void __wrap___aeabi_unwind_cpp_pr1() {}
extern "C" void __wrap___aeabi_unwind_cpp_pr2() {}
 80048a0:	4770      	bx	lr

080048a2 <_sbrk>:
	caddr_t _sbrk ( int incr ) {

		static unsigned char *heap = NULL;
		unsigned char *prev_heap;

		if (heap == NULL) {
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_sbrk+0x16>)
	caddr_t _sbrk ( int incr ) {
 80048a4:	4602      	mov	r2, r0
		if (heap == NULL) {
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	b909      	cbnz	r1, 80048ae <_sbrk+0xc>
			heap = (unsigned char *)&_end;
 80048aa:	4904      	ldr	r1, [pc, #16]	; (80048bc <_sbrk+0x1a>)
 80048ac:	6019      	str	r1, [r3, #0]
		}
		prev_heap = heap;
 80048ae:	6818      	ldr	r0, [r3, #0]
		/* check removed to show basic approach */

		heap += incr;
 80048b0:	4402      	add	r2, r0
 80048b2:	601a      	str	r2, [r3, #0]

		return (caddr_t) prev_heap;
	}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20001ae8 	.word	0x20001ae8
 80048bc:	20001b60 	.word	0x20001b60

080048c0 <abort>:
}

void abort(void) {
 80048c0:	e7fe      	b.n	80048c0 <abort>

080048c2 <_init>:

extern func_ptr __init_array_start[0], __init_array_end[0];
extern func_ptr __fini_array_start[0], __fini_array_end[0];

void _init(void)
{
 80048c2:	b538      	push	{r3, r4, r5, lr}
 80048c4:	4c04      	ldr	r4, [pc, #16]	; (80048d8 <_init+0x16>)
	for ( func_ptr* func = __init_array_start; func != __init_array_end && *func != 0x0; func++ )
 80048c6:	4d05      	ldr	r5, [pc, #20]	; (80048dc <_init+0x1a>)
 80048c8:	42ac      	cmp	r4, r5
 80048ca:	d004      	beq.n	80048d6 <_init+0x14>
 80048cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80048d0:	b10b      	cbz	r3, 80048d6 <_init+0x14>
		(*func)();
 80048d2:	4798      	blx	r3
	for ( func_ptr* func = __init_array_start; func != __init_array_end && *func != 0x0; func++ )
 80048d4:	e7f8      	b.n	80048c8 <_init+0x6>
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	20000878 	.word	0x20000878
 80048dc:	20000880 	.word	0x20000880

080048e0 <_fini>:
}

void _fini(void)
{
 80048e0:	b538      	push	{r3, r4, r5, lr}
	for ( func_ptr* func = __fini_array_start; func != __fini_array_end; func++ )
 80048e2:	4c04      	ldr	r4, [pc, #16]	; (80048f4 <_fini+0x14>)
 80048e4:	4d04      	ldr	r5, [pc, #16]	; (80048f8 <_fini+0x18>)
 80048e6:	42ac      	cmp	r4, r5
 80048e8:	d003      	beq.n	80048f2 <_fini+0x12>
		(*func)();
 80048ea:	f854 3b04 	ldr.w	r3, [r4], #4
 80048ee:	4798      	blx	r3
	for ( func_ptr* func = __fini_array_start; func != __fini_array_end; func++ )
 80048f0:	e7f9      	b.n	80048e6 <_fini+0x6>
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	20000880 	.word	0x20000880
 80048f8:	20000880 	.word	0x20000880

080048fc <ros::normalizeSecNSec(unsigned long&, unsigned long&)>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 80048fc:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
 80048fe:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
 8004900:	4c04      	ldr	r4, [pc, #16]	; (8004914 <ros::normalizeSecNSec(unsigned long&, unsigned long&)+0x18>)
    sec += sec_part;
 8004902:	6802      	ldr	r2, [r0, #0]
    uint32_t sec_part = nsec / 1000000000UL;
 8004904:	fbb5 f3f4 	udiv	r3, r5, r4
    sec += sec_part;
 8004908:	441a      	add	r2, r3
    uint32_t nsec_part= nsec % 1000000000UL;
 800490a:	fb04 5313 	mls	r3, r4, r3, r5
    sec += sec_part;
 800490e:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004910:	600b      	str	r3, [r1, #0]
 8004912:	bd30      	pop	{r4, r5, pc}
 8004914:	3b9aca00 	.word	0x3b9aca00

08004918 <ros::Time::fromNSec(long)>:
  }

  Time& Time::fromNSec(int32_t t)
  {
    sec = t / 1000000000;
 8004918:	4a06      	ldr	r2, [pc, #24]	; (8004934 <ros::Time::fromNSec(long)+0x1c>)
  {
 800491a:	b510      	push	{r4, lr}
    sec = t / 1000000000;
 800491c:	fb91 f3f2 	sdiv	r3, r1, r2
 8004920:	6003      	str	r3, [r0, #0]
    nsec = t % 1000000000;
 8004922:	fb02 1313 	mls	r3, r2, r3, r1
 8004926:	4601      	mov	r1, r0
 8004928:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 800492c:	f7ff ffe6 	bl	80048fc <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	3b9aca00 	.word	0x3b9aca00

08004938 <ros::Time::operator+=(ros::Duration const&)>:

  Time& Time::operator +=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004938:	6803      	ldr	r3, [r0, #0]
 800493a:	680a      	ldr	r2, [r1, #0]
  {
 800493c:	b510      	push	{r4, lr}
    sec += rhs.sec;
 800493e:	4413      	add	r3, r2
    nsec += rhs.nsec;
 8004940:	684a      	ldr	r2, [r1, #4]
 8004942:	4601      	mov	r1, r0
    sec += rhs.sec;
 8004944:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004946:	6843      	ldr	r3, [r0, #4]
 8004948:	4413      	add	r3, r2
 800494a:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 800494e:	f7ff ffd5 	bl	80048fc <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004952:	bd10      	pop	{r4, pc}

08004954 <ros::Time::operator-=(ros::Duration const&)>:

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004954:	6803      	ldr	r3, [r0, #0]
 8004956:	680a      	ldr	r2, [r1, #0]
  Time& Time::operator -=(const Duration &rhs){
 8004958:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 800495a:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 800495c:	684a      	ldr	r2, [r1, #4]
 800495e:	4601      	mov	r1, r0
    sec += -rhs.sec;
 8004960:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004962:	6843      	ldr	r3, [r0, #4]
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 800496a:	f7ff ffc7 	bl	80048fc <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 800496e:	bd10      	pop	{r4, pc}

08004970 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	2400      	movs	r4, #0
 8004974:	2610      	movs	r6, #16
 8004976:	6803      	ldr	r3, [r0, #0]
 8004978:	b084      	sub	sp, #16
 800497a:	4615      	mov	r5, r2
 800497c:	9602      	str	r6, [sp, #8]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	699e      	ldr	r6, [r3, #24]
 8004982:	9400      	str	r4, [sp, #0]
 8004984:	466b      	mov	r3, sp
 8004986:	f88d 4004 	strb.w	r4, [sp, #4]
 800498a:	9403      	str	r4, [sp, #12]
 800498c:	47b0      	blx	r6
 800498e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	2b06      	cmp	r3, #6
 8004998:	bf09      	itett	eq
 800499a:	2001      	moveq	r0, #1
 800499c:	4620      	movne	r0, r4
 800499e:	9b00      	ldreq	r3, [sp, #0]
 80049a0:	602b      	streq	r3, [r5, #0]
 80049a2:	b004      	add	sp, #16
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	bf00      	nop

080049a8 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 80049a8:	9800      	ldr	r0, [sp, #0]
 80049aa:	4290      	cmp	r0, r2
 80049ac:	bf0c      	ite	eq
 80049ae:	2006      	moveq	r0, #6
 80049b0:	2001      	movne	r0, #1
 80049b2:	4770      	bx	lr

080049b4 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 80049ba:	6003      	str	r3, [r0, #0]
 80049bc:	f000 fd34 	bl	8005428 <std::type_info::~type_info()>
 80049c0:	4620      	mov	r0, r4
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	0800b6c0 	.word	0x0800b6c0

080049c8 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__cxxabiv1::__class_type_info::~__class_type_info()+0x18>)
 80049ce:	6003      	str	r3, [r0, #0]
 80049d0:	f000 fd2a 	bl	8005428 <std::type_info::~type_info()>
 80049d4:	4620      	mov	r0, r4
 80049d6:	2108      	movs	r1, #8
 80049d8:	f000 f9c0 	bl	8004d5c <operator delete(void*, unsigned int)>
 80049dc:	4620      	mov	r0, r4
 80049de:	bd10      	pop	{r4, pc}
 80049e0:	0800b6c0 	.word	0x0800b6c0

080049e4 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4615      	mov	r5, r2
 80049e8:	461c      	mov	r4, r3
 80049ea:	f000 fd21 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 80049ee:	b120      	cbz	r0, 80049fa <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 80049f0:	2208      	movs	r2, #8
 80049f2:	2306      	movs	r3, #6
 80049f4:	6025      	str	r5, [r4, #0]
 80049f6:	60e2      	str	r2, [r4, #12]
 80049f8:	7123      	strb	r3, [r4, #4]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}

080049fc <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	4617      	mov	r7, r2
 8004a02:	461c      	mov	r4, r3
 8004a04:	4606      	mov	r6, r0
 8004a06:	460d      	mov	r5, r1
 8004a08:	f000 fd12 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 8004a0c:	b908      	cbnz	r0, 8004a12 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x16>
 8004a0e:	2c03      	cmp	r4, #3
 8004a10:	d901      	bls.n	8004a16 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x1a>
 8004a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	463a      	mov	r2, r7
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	4718      	bx	r3
 8004a26:	bf00      	nop

08004a28 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8004a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	9d08      	ldr	r5, [sp, #32]
 8004a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a30:	4617      	mov	r7, r2
 8004a32:	428d      	cmp	r5, r1
 8004a34:	4606      	mov	r6, r0
 8004a36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004a38:	d00b      	beq.n	8004a52 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2a>
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f000 fcf7 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 8004a42:	b118      	cbz	r0, 8004a4c <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>
 8004a44:	2301      	movs	r3, #1
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	7127      	strb	r7, [r4, #4]
 8004a4a:	71a3      	strb	r3, [r4, #6]
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	b003      	add	sp, #12
 8004a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	f000 fceb 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 8004a5a:	b118      	cbz	r0, 8004a64 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x3c>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	7167      	strb	r7, [r4, #5]
 8004a60:	b003      	add	sp, #12
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a64:	9b01      	ldr	r3, [sp, #4]
 8004a66:	e7e8      	b.n	8004a3a <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x12>

08004a68 <__cxa_end_cleanup>:
 8004a68:	b41e      	push	{r1, r2, r3, r4}
 8004a6a:	f000 f891 	bl	8004b90 <__gnu_end_cleanup>
 8004a6e:	bc1e      	pop	{r1, r2, r3, r4}
 8004a70:	f005 f880 	bl	8009b74 <_Unwind_Resume>

08004a74 <__cxa_type_match>:
 8004a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a76:	7802      	ldrb	r2, [r0, #0]
 8004a78:	b083      	sub	sp, #12
 8004a7a:	2a47      	cmp	r2, #71	; 0x47
 8004a7c:	460d      	mov	r5, r1
 8004a7e:	461f      	mov	r7, r3
 8004a80:	d01e      	beq.n	8004ac0 <__cxa_type_match+0x4c>
 8004a82:	2300      	movs	r3, #0
 8004a84:	4c27      	ldr	r4, [pc, #156]	; (8004b24 <__cxa_type_match+0xb0>)
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4798      	blx	r3
 8004a90:	b180      	cbz	r0, 8004ab4 <__cxa_type_match+0x40>
 8004a92:	2602      	movs	r6, #2
 8004a94:	9b01      	ldr	r3, [sp, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	691c      	ldr	r4, [r3, #16]
 8004aa2:	aa01      	add	r2, sp, #4
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	47a0      	blx	r4
 8004aa8:	b130      	cbz	r0, 8004ab8 <__cxa_type_match+0x44>
 8004aaa:	4630      	mov	r0, r6
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	b003      	add	sp, #12
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab4:	2601      	movs	r6, #1
 8004ab6:	e7f0      	b.n	8004a9a <__cxa_type_match+0x26>
 8004ab8:	4606      	mov	r6, r0
 8004aba:	4630      	mov	r0, r6
 8004abc:	b003      	add	sp, #12
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	7843      	ldrb	r3, [r0, #1]
 8004ac2:	2b4e      	cmp	r3, #78	; 0x4e
 8004ac4:	d1dd      	bne.n	8004a82 <__cxa_type_match+0xe>
 8004ac6:	7883      	ldrb	r3, [r0, #2]
 8004ac8:	2b55      	cmp	r3, #85	; 0x55
 8004aca:	d1da      	bne.n	8004a82 <__cxa_type_match+0xe>
 8004acc:	78c3      	ldrb	r3, [r0, #3]
 8004ace:	2b43      	cmp	r3, #67	; 0x43
 8004ad0:	d019      	beq.n	8004b06 <__cxa_type_match+0x92>
 8004ad2:	78c3      	ldrb	r3, [r0, #3]
 8004ad4:	2b43      	cmp	r3, #67	; 0x43
 8004ad6:	d1d4      	bne.n	8004a82 <__cxa_type_match+0xe>
 8004ad8:	7903      	ldrb	r3, [r0, #4]
 8004ada:	2b43      	cmp	r3, #67	; 0x43
 8004adc:	d1d1      	bne.n	8004a82 <__cxa_type_match+0xe>
 8004ade:	7943      	ldrb	r3, [r0, #5]
 8004ae0:	2b2b      	cmp	r3, #43	; 0x2b
 8004ae2:	d1ce      	bne.n	8004a82 <__cxa_type_match+0xe>
 8004ae4:	7983      	ldrb	r3, [r0, #6]
 8004ae6:	2b2b      	cmp	r3, #43	; 0x2b
 8004ae8:	d1cb      	bne.n	8004a82 <__cxa_type_match+0xe>
 8004aea:	79c3      	ldrb	r3, [r0, #7]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d8c8      	bhi.n	8004a82 <__cxa_type_match+0xe>
 8004af0:	d004      	beq.n	8004afc <__cxa_type_match+0x88>
 8004af2:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8004af6:	3058      	adds	r0, #88	; 0x58
 8004af8:	9001      	str	r0, [sp, #4]
 8004afa:	e7c5      	b.n	8004a88 <__cxa_type_match+0x14>
 8004afc:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8004b00:	f850 4c78 	ldr.w	r4, [r0, #-120]
 8004b04:	e7f8      	b.n	8004af8 <__cxa_type_match+0x84>
 8004b06:	7903      	ldrb	r3, [r0, #4]
 8004b08:	2b46      	cmp	r3, #70	; 0x46
 8004b0a:	d1e2      	bne.n	8004ad2 <__cxa_type_match+0x5e>
 8004b0c:	7943      	ldrb	r3, [r0, #5]
 8004b0e:	2b4f      	cmp	r3, #79	; 0x4f
 8004b10:	d1df      	bne.n	8004ad2 <__cxa_type_match+0x5e>
 8004b12:	7983      	ldrb	r3, [r0, #6]
 8004b14:	2b52      	cmp	r3, #82	; 0x52
 8004b16:	d1dc      	bne.n	8004ad2 <__cxa_type_match+0x5e>
 8004b18:	79c3      	ldrb	r3, [r0, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1d9      	bne.n	8004ad2 <__cxa_type_match+0x5e>
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	4c01      	ldr	r4, [pc, #4]	; (8004b28 <__cxa_type_match+0xb4>)
 8004b22:	e7b1      	b.n	8004a88 <__cxa_type_match+0x14>
 8004b24:	0800b700 	.word	0x0800b700
 8004b28:	0800b6f8 	.word	0x0800b6f8

08004b2c <__cxa_begin_cleanup>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4604      	mov	r4, r0
 8004b30:	f000 f86a 	bl	8004c08 <__cxa_get_globals>
 8004b34:	7823      	ldrb	r3, [r4, #0]
 8004b36:	f1a4 0220 	sub.w	r2, r4, #32
 8004b3a:	2b47      	cmp	r3, #71	; 0x47
 8004b3c:	d004      	beq.n	8004b48 <__cxa_begin_cleanup+0x1c>
 8004b3e:	6883      	ldr	r3, [r0, #8]
 8004b40:	bb23      	cbnz	r3, 8004b8c <__cxa_begin_cleanup+0x60>
 8004b42:	6082      	str	r2, [r0, #8]
 8004b44:	2001      	movs	r0, #1
 8004b46:	bd10      	pop	{r4, pc}
 8004b48:	7863      	ldrb	r3, [r4, #1]
 8004b4a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b4c:	d1f7      	bne.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b4e:	78a3      	ldrb	r3, [r4, #2]
 8004b50:	2b55      	cmp	r3, #85	; 0x55
 8004b52:	d1f4      	bne.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b54:	78e3      	ldrb	r3, [r4, #3]
 8004b56:	2b43      	cmp	r3, #67	; 0x43
 8004b58:	d1f1      	bne.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b5a:	7923      	ldrb	r3, [r4, #4]
 8004b5c:	2b43      	cmp	r3, #67	; 0x43
 8004b5e:	d1ee      	bne.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b60:	7963      	ldrb	r3, [r4, #5]
 8004b62:	2b2b      	cmp	r3, #43	; 0x2b
 8004b64:	d1eb      	bne.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b66:	79a3      	ldrb	r3, [r4, #6]
 8004b68:	2b2b      	cmp	r3, #43	; 0x2b
 8004b6a:	d1e8      	bne.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b6c:	79e3      	ldrb	r3, [r4, #7]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d8e5      	bhi.n	8004b3e <__cxa_begin_cleanup+0x12>
 8004b72:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004b76:	3301      	adds	r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8004b7e:	d1e1      	bne.n	8004b44 <__cxa_begin_cleanup+0x18>
 8004b80:	6883      	ldr	r3, [r0, #8]
 8004b82:	f844 3c08 	str.w	r3, [r4, #-8]
 8004b86:	6082      	str	r2, [r0, #8]
 8004b88:	2001      	movs	r0, #1
 8004b8a:	bd10      	pop	{r4, pc}
 8004b8c:	f000 fc24 	bl	80053d8 <std::terminate()>

08004b90 <__gnu_end_cleanup>:
 8004b90:	b508      	push	{r3, lr}
 8004b92:	f000 f839 	bl	8004c08 <__cxa_get_globals>
 8004b96:	6883      	ldr	r3, [r0, #8]
 8004b98:	b383      	cbz	r3, 8004bfc <__gnu_end_cleanup+0x6c>
 8004b9a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004b9e:	2a47      	cmp	r2, #71	; 0x47
 8004ba0:	d004      	beq.n	8004bac <__gnu_end_cleanup+0x1c>
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	6082      	str	r2, [r0, #8]
 8004ba6:	f103 0020 	add.w	r0, r3, #32
 8004baa:	bd08      	pop	{r3, pc}
 8004bac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004bb0:	2a4e      	cmp	r2, #78	; 0x4e
 8004bb2:	d1f6      	bne.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004bb4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004bb8:	2a55      	cmp	r2, #85	; 0x55
 8004bba:	d1f2      	bne.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004bbc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004bc0:	2a43      	cmp	r2, #67	; 0x43
 8004bc2:	d1ee      	bne.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004bc4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004bc8:	2a43      	cmp	r2, #67	; 0x43
 8004bca:	d1ea      	bne.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004bcc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004bd0:	2a2b      	cmp	r2, #43	; 0x2b
 8004bd2:	d1e6      	bne.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004bd4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004bd8:	2a2b      	cmp	r2, #43	; 0x2b
 8004bda:	d1e2      	bne.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004bdc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004be0:	2a01      	cmp	r2, #1
 8004be2:	d8de      	bhi.n	8004ba2 <__gnu_end_cleanup+0x12>
 8004be4:	69da      	ldr	r2, [r3, #28]
 8004be6:	3a01      	subs	r2, #1
 8004be8:	61da      	str	r2, [r3, #28]
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d1db      	bne.n	8004ba6 <__gnu_end_cleanup+0x16>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	6999      	ldr	r1, [r3, #24]
 8004bf2:	6081      	str	r1, [r0, #8]
 8004bf4:	619a      	str	r2, [r3, #24]
 8004bf6:	f103 0020 	add.w	r0, r3, #32
 8004bfa:	bd08      	pop	{r3, pc}
 8004bfc:	f000 fbec 	bl	80053d8 <std::terminate()>

08004c00 <__cxa_get_globals_fast>:
 8004c00:	4800      	ldr	r0, [pc, #0]	; (8004c04 <__cxa_get_globals_fast+0x4>)
 8004c02:	4770      	bx	lr
 8004c04:	20001af0 	.word	0x20001af0

08004c08 <__cxa_get_globals>:
 8004c08:	4800      	ldr	r0, [pc, #0]	; (8004c0c <__cxa_get_globals+0x4>)
 8004c0a:	4770      	bx	lr
 8004c0c:	20001af0 	.word	0x20001af0

08004c10 <std::bad_exception::~bad_exception()>:
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <transaction clone for std::bad_exception::what() const>:
 8004c14:	4800      	ldr	r0, [pc, #0]	; (8004c18 <transaction clone for std::bad_exception::what() const+0x4>)
 8004c16:	4770      	bx	lr
 8004c18:	0800b6e4 	.word	0x0800b6e4

08004c1c <std::bad_exception::~bad_exception()>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4604      	mov	r4, r0
 8004c20:	2104      	movs	r1, #4
 8004c22:	f000 f89b 	bl	8004d5c <operator delete(void*, unsigned int)>
 8004c26:	4620      	mov	r0, r4
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	bf00      	nop

08004c2c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4b02      	ldr	r3, [pc, #8]	; (8004c3c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 8004c32:	6003      	str	r3, [r0, #0]
 8004c34:	f7ff febe 	bl	80049b4 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8004c38:	4620      	mov	r0, r4
 8004c3a:	bd10      	pop	{r4, pc}
 8004c3c:	0800b7d4 	.word	0x0800b7d4

08004c40 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4604      	mov	r4, r0
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x18>)
 8004c46:	6003      	str	r3, [r0, #0]
 8004c48:	f7ff feb4 	bl	80049b4 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	210c      	movs	r1, #12
 8004c50:	f000 f884 	bl	8004d5c <operator delete(void*, unsigned int)>
 8004c54:	4620      	mov	r0, r4
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	0800b7d4 	.word	0x0800b7d4

08004c5c <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	9c06      	ldr	r4, [sp, #24]
 8004c62:	460d      	mov	r5, r1
 8004c64:	4294      	cmp	r4, r2
 8004c66:	4606      	mov	r6, r0
 8004c68:	d009      	beq.n	8004c7e <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x22>
 8004c6a:	68b0      	ldr	r0, [r6, #8]
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	6806      	ldr	r6, [r0, #0]
 8004c70:	9406      	str	r4, [sp, #24]
 8004c72:	6a34      	ldr	r4, [r6, #32]
 8004c74:	46a4      	mov	ip, r4
 8004c76:	b002      	add	sp, #8
 8004c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c7c:	4760      	bx	ip
 8004c7e:	4619      	mov	r1, r3
 8004c80:	9201      	str	r2, [sp, #4]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	f000 fbd4 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 8004c88:	9b00      	ldr	r3, [sp, #0]
 8004c8a:	9a01      	ldr	r2, [sp, #4]
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0ec      	beq.n	8004c6a <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
 8004c90:	2006      	movs	r0, #6
 8004c92:	b002      	add	sp, #8
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	bf00      	nop

08004c98 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	4689      	mov	r9, r1
 8004c9e:	b081      	sub	sp, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004caa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004cae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cb2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004cb6:	f000 fbbb 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 8004cba:	b188      	cbz	r0, 8004ce0 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x48>
 8004cbc:	f1b9 0f00 	cmp.w	r9, #0
 8004cc0:	f8c8 4000 	str.w	r4, [r8]
 8004cc4:	f888 6004 	strb.w	r6, [r8, #4]
 8004cc8:	db1e      	blt.n	8004d08 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x70>
 8004cca:	444c      	add	r4, r9
 8004ccc:	45a2      	cmp	sl, r4
 8004cce:	bf0c      	ite	eq
 8004cd0:	2406      	moveq	r4, #6
 8004cd2:	2401      	movne	r4, #1
 8004cd4:	f888 4006 	strb.w	r4, [r8, #6]
 8004cd8:	2000      	movs	r0, #0
 8004cda:	b001      	add	sp, #4
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	4554      	cmp	r4, sl
 8004ce2:	d018      	beq.n	8004d16 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x7e>
 8004ce4:	68b8      	ldr	r0, [r7, #8]
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	6805      	ldr	r5, [r0, #0]
 8004cea:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8004cee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004cf2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004cf6:	940a      	str	r4, [sp, #40]	; 0x28
 8004cf8:	69ec      	ldr	r4, [r5, #28]
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	46a4      	mov	ip, r4
 8004d00:	b001      	add	sp, #4
 8004d02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d06:	4760      	bx	ip
 8004d08:	f119 0f02 	cmn.w	r9, #2
 8004d0c:	d1e4      	bne.n	8004cd8 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f888 3006 	strb.w	r3, [r8, #6]
 8004d14:	e7e0      	b.n	8004cd8 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 8004d16:	4659      	mov	r1, fp
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f000 fb89 	bl	8005430 <std::type_info::operator==(std::type_info const&) const>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d0e0      	beq.n	8004ce4 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4c>
 8004d22:	2000      	movs	r0, #0
 8004d24:	f888 6005 	strb.w	r6, [r8, #5]
 8004d28:	b001      	add	sp, #4
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop

08004d30 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	4607      	mov	r7, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	4615      	mov	r5, r2
 8004d3a:	461e      	mov	r6, r3
 8004d3c:	f7ff fe52 	bl	80049e4 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 8004d40:	b108      	cbz	r0, 8004d46 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 8004d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d46:	68b8      	ldr	r0, [r7, #8]
 8004d48:	4633      	mov	r3, r6
 8004d4a:	6806      	ldr	r6, [r0, #0]
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	69b4      	ldr	r4, [r6, #24]
 8004d50:	462a      	mov	r2, r5
 8004d52:	46a4      	mov	ip, r4
 8004d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4760      	bx	ip
 8004d5a:	bf00      	nop

08004d5c <operator delete(void*, unsigned int)>:
 8004d5c:	f7ff bd9a 	b.w	8004894 <operator delete(void*)>

08004d60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
 8004d60:	2850      	cmp	r0, #80	; 0x50
 8004d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d64:	d054      	beq.n	8004e10 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xb0>
 8004d66:	f000 040f 	and.w	r4, r0, #15
 8004d6a:	2c0c      	cmp	r4, #12
 8004d6c:	d84e      	bhi.n	8004e0c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xac>
 8004d6e:	e8df f004 	tbb	[pc, r4]
 8004d72:	3907      	.short	0x3907
 8004d74:	4d170749 	.word	0x4d170749
 8004d78:	1f4d4d4d 	.word	0x1f4d4d4d
 8004d7c:	071b      	.short	0x071b
 8004d7e:	17          	.byte	0x17
 8004d7f:	00          	.byte	0x00
 8004d80:	4615      	mov	r5, r2
 8004d82:	f855 4b04 	ldr.w	r4, [r5], #4
 8004d86:	b144      	cbz	r4, 8004d9a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x3a>
 8004d88:	f000 0670 	and.w	r6, r0, #112	; 0x70
 8004d8c:	2e10      	cmp	r6, #16
 8004d8e:	bf08      	it	eq
 8004d90:	4611      	moveq	r1, r2
 8004d92:	0602      	lsls	r2, r0, #24
 8004d94:	440c      	add	r4, r1
 8004d96:	bf48      	it	mi
 8004d98:	6824      	ldrmi	r4, [r4, #0]
 8004d9a:	601c      	str	r4, [r3, #0]
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da0:	4615      	mov	r5, r2
 8004da2:	f855 4b08 	ldr.w	r4, [r5], #8
 8004da6:	e7ee      	b.n	8004d86 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x26>
 8004da8:	4615      	mov	r5, r2
 8004daa:	f935 4b02 	ldrsh.w	r4, [r5], #2
 8004dae:	e7ea      	b.n	8004d86 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x26>
 8004db0:	2400      	movs	r4, #0
 8004db2:	4615      	mov	r5, r2
 8004db4:	4627      	mov	r7, r4
 8004db6:	f815 eb01 	ldrb.w	lr, [r5], #1
 8004dba:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8004dbe:	40be      	lsls	r6, r7
 8004dc0:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8004dc4:	ea44 0406 	orr.w	r4, r4, r6
 8004dc8:	f107 0707 	add.w	r7, r7, #7
 8004dcc:	d1f3      	bne.n	8004db6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x56>
 8004dce:	2f1f      	cmp	r7, #31
 8004dd0:	d8d9      	bhi.n	8004d86 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x26>
 8004dd2:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8004dd6:	d0d6      	beq.n	8004d86 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x26>
 8004dd8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004ddc:	fa06 f707 	lsl.w	r7, r6, r7
 8004de0:	433c      	orrs	r4, r7
 8004de2:	e7d1      	b.n	8004d88 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
 8004de4:	2400      	movs	r4, #0
 8004de6:	4615      	mov	r5, r2
 8004de8:	4627      	mov	r7, r4
 8004dea:	f815 eb01 	ldrb.w	lr, [r5], #1
 8004dee:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8004df2:	40be      	lsls	r6, r7
 8004df4:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8004df8:	ea44 0406 	orr.w	r4, r4, r6
 8004dfc:	f107 0707 	add.w	r7, r7, #7
 8004e00:	d1f3      	bne.n	8004dea <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x8a>
 8004e02:	e7c0      	b.n	8004d86 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x26>
 8004e04:	4615      	mov	r5, r2
 8004e06:	f835 4b02 	ldrh.w	r4, [r5], #2
 8004e0a:	e7bc      	b.n	8004d86 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x26>
 8004e0c:	f7ff fd58 	bl	80048c0 <abort>
 8004e10:	3203      	adds	r2, #3
 8004e12:	f022 0503 	bic.w	r5, r2, #3
 8004e16:	f855 4b04 	ldr.w	r4, [r5], #4
 8004e1a:	601c      	str	r4, [r3, #0]
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
 8004e20:	28ff      	cmp	r0, #255	; 0xff
 8004e22:	d00d      	beq.n	8004e40 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
 8004e24:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004e28:	2820      	cmp	r0, #32
 8004e2a:	d015      	beq.n	8004e58 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
 8004e2c:	d90a      	bls.n	8004e44 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x24>
 8004e2e:	2840      	cmp	r0, #64	; 0x40
 8004e30:	d00f      	beq.n	8004e52 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x32>
 8004e32:	2850      	cmp	r0, #80	; 0x50
 8004e34:	d004      	beq.n	8004e40 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
 8004e36:	2830      	cmp	r0, #48	; 0x30
 8004e38:	d108      	bne.n	8004e4c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2c>
 8004e3a:	4608      	mov	r0, r1
 8004e3c:	f005 b8a0 	b.w	8009f80 <_Unwind_GetDataRelBase>
 8004e40:	2000      	movs	r0, #0
 8004e42:	4770      	bx	lr
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d0fb      	beq.n	8004e40 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
 8004e48:	2810      	cmp	r0, #16
 8004e4a:	d0f9      	beq.n	8004e40 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
 8004e4c:	b508      	push	{r3, lr}
 8004e4e:	f7ff fd37 	bl	80048c0 <abort>
 8004e52:	4608      	mov	r0, r1
 8004e54:	f005 b880 	b.w	8009f58 <_Unwind_GetRegionStart>
 8004e58:	4608      	mov	r0, r1
 8004e5a:	f005 b88d 	b.w	8009f78 <_Unwind_GetTextRelBase>
 8004e5e:	bf00      	nop

08004e60 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	460c      	mov	r4, r1
 8004e64:	4615      	mov	r5, r2
 8004e66:	4607      	mov	r7, r0
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d042      	beq.n	8004ef2 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x92>
 8004e6c:	f005 f874 	bl	8009f58 <_Unwind_GetRegionStart>
 8004e70:	6028      	str	r0, [r5, #0]
 8004e72:	7826      	ldrb	r6, [r4, #0]
 8004e74:	3401      	adds	r4, #1
 8004e76:	2eff      	cmp	r6, #255	; 0xff
 8004e78:	d032      	beq.n	8004ee0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x80>
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff ffcf 	bl	8004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8004e82:	4622      	mov	r2, r4
 8004e84:	4601      	mov	r1, r0
 8004e86:	1d2b      	adds	r3, r5, #4
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f7ff ff69 	bl	8004d60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	7823      	ldrb	r3, [r4, #0]
 8004e92:	1c60      	adds	r0, r4, #1
 8004e94:	2bff      	cmp	r3, #255	; 0xff
 8004e96:	752b      	strb	r3, [r5, #20]
 8004e98:	d028      	beq.n	8004eec <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x8c>
 8004e9a:	2400      	movs	r4, #0
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	752b      	strb	r3, [r5, #20]
 8004ea2:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004ea6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004eaa:	4093      	lsls	r3, r2
 8004eac:	0609      	lsls	r1, r1, #24
 8004eae:	ea44 0403 	orr.w	r4, r4, r3
 8004eb2:	f102 0207 	add.w	r2, r2, #7
 8004eb6:	d4f4      	bmi.n	8004ea2 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x42>
 8004eb8:	4404      	add	r4, r0
 8004eba:	60ec      	str	r4, [r5, #12]
 8004ebc:	2400      	movs	r4, #0
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	7803      	ldrb	r3, [r0, #0]
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	756b      	strb	r3, [r5, #21]
 8004ec6:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004eca:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004ece:	4093      	lsls	r3, r2
 8004ed0:	431c      	orrs	r4, r3
 8004ed2:	060b      	lsls	r3, r1, #24
 8004ed4:	f102 0207 	add.w	r2, r2, #7
 8004ed8:	d4f5      	bmi.n	8004ec6 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x66>
 8004eda:	4404      	add	r4, r0
 8004edc:	612c      	str	r4, [r5, #16]
 8004ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee0:	6068      	str	r0, [r5, #4]
 8004ee2:	7823      	ldrb	r3, [r4, #0]
 8004ee4:	1c60      	adds	r0, r4, #1
 8004ee6:	2bff      	cmp	r3, #255	; 0xff
 8004ee8:	752b      	strb	r3, [r5, #20]
 8004eea:	d1d6      	bne.n	8004e9a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x3a>
 8004eec:	2300      	movs	r3, #0
 8004eee:	60eb      	str	r3, [r5, #12]
 8004ef0:	e7e4      	b.n	8004ebc <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x5c>
 8004ef2:	e7bd      	b.n	8004e70 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>

08004ef4 <__gxx_personality_v0>:
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f000 0403 	and.w	r4, r0, #3
 8004efe:	b097      	sub	sp, #92	; 0x5c
 8004f00:	2c01      	cmp	r4, #1
 8004f02:	4689      	mov	r9, r1
 8004f04:	4617      	mov	r7, r2
 8004f06:	930a      	str	r3, [sp, #40]	; 0x28
 8004f08:	d01e      	beq.n	8004f48 <__gxx_personality_v0+0x54>
 8004f0a:	d30e      	bcc.n	8004f2a <__gxx_personality_v0+0x36>
 8004f0c:	2c02      	cmp	r4, #2
 8004f0e:	d10a      	bne.n	8004f26 <__gxx_personality_v0+0x32>
 8004f10:	4639      	mov	r1, r7
 8004f12:	4648      	mov	r0, r9
 8004f14:	f005 f80a 	bl	8009f2c <__gnu_unwind_frame>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f000 80a5 	beq.w	8005068 <__gxx_personality_v0+0x174>
 8004f1e:	2009      	movs	r0, #9
 8004f20:	b017      	add	sp, #92	; 0x5c
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	f7ff fccb 	bl	80048c0 <abort>
 8004f2a:	0700      	lsls	r0, r0, #28
 8004f2c:	d4f0      	bmi.n	8004f10 <__gxx_personality_v0+0x1c>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	2300      	movs	r3, #0
 8004f34:	aa16      	add	r2, sp, #88	; 0x58
 8004f36:	f842 9d2c 	str.w	r9, [r2, #-44]!
 8004f3a:	9200      	str	r2, [sp, #0]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	220c      	movs	r2, #12
 8004f40:	4638      	mov	r0, r7
 8004f42:	f004 fa93 	bl	800946c <_Unwind_VRS_Set>
 8004f46:	e00f      	b.n	8004f68 <__gxx_personality_v0+0x74>
 8004f48:	f010 0408 	ands.w	r4, r0, #8
 8004f4c:	f000 8090 	beq.w	8005070 <__gxx_personality_v0+0x17c>
 8004f50:	aa16      	add	r2, sp, #88	; 0x58
 8004f52:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8004f56:	9200      	str	r2, [sp, #0]
 8004f58:	f044 0402 	orr.w	r4, r4, #2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	220c      	movs	r2, #12
 8004f60:	4638      	mov	r0, r7
 8004f62:	9403      	str	r4, [sp, #12]
 8004f64:	f004 fa82 	bl	800946c <_Unwind_VRS_Set>
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f004 fffb 	bl	8009f64 <_Unwind_GetLanguageSpecificData>
 8004f6e:	9005      	str	r0, [sp, #20]
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0cd      	beq.n	8004f10 <__gxx_personality_v0+0x1c>
 8004f74:	ab10      	add	r3, sp, #64	; 0x40
 8004f76:	461a      	mov	r2, r3
 8004f78:	9905      	ldr	r1, [sp, #20]
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	9306      	str	r3, [sp, #24]
 8004f7e:	f7ff ff6f 	bl	8004e60 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 8004f82:	4639      	mov	r1, r7
 8004f84:	4604      	mov	r4, r0
 8004f86:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8004f8a:	f7ff ff49 	bl	8004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8004f94:	9012      	str	r0, [sp, #72]	; 0x48
 8004f96:	4619      	mov	r1, r3
 8004f98:	220f      	movs	r2, #15
 8004f9a:	f8cd b000 	str.w	fp, [sp]
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f004 fa3e 	bl	8009420 <_Unwind_VRS_Get>
 8004fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	42a2      	cmp	r2, r4
 8004fae:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 8004fb2:	d975      	bls.n	80050a0 <__gxx_personality_v0+0x1ac>
 8004fb4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8004fb8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004fbc:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f7ff ff2c 	bl	8004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8004fc8:	4622      	mov	r2, r4
 8004fca:	4653      	mov	r3, sl
 8004fcc:	4601      	mov	r1, r0
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7ff fec6 	bl	8004d60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8004fd4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8004fd8:	4605      	mov	r5, r0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff ff1f 	bl	8004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff feb9 	bl	8004d60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8004fee:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7ff ff12 	bl	8004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	4601      	mov	r1, r0
 8005000:	465b      	mov	r3, fp
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff feac 	bl	8004d60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8005008:	4604      	mov	r4, r0
 800500a:	2000      	movs	r0, #0
 800500c:	4602      	mov	r2, r0
 800500e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005012:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8005016:	4093      	lsls	r3, r2
 8005018:	0609      	lsls	r1, r1, #24
 800501a:	ea40 0003 	orr.w	r0, r0, r3
 800501e:	f102 0207 	add.w	r2, r2, #7
 8005022:	d4f4      	bmi.n	800500e <__gxx_personality_v0+0x11a>
 8005024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005028:	4413      	add	r3, r2
 800502a:	429e      	cmp	r6, r3
 800502c:	d231      	bcs.n	8005092 <__gxx_personality_v0+0x19e>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	07db      	lsls	r3, r3, #31
 8005032:	d539      	bpl.n	80050a8 <__gxx_personality_v0+0x1b4>
 8005034:	2500      	movs	r5, #0
 8005036:	9504      	str	r5, [sp, #16]
 8005038:	2300      	movs	r3, #0
 800503a:	220d      	movs	r2, #13
 800503c:	4619      	mov	r1, r3
 800503e:	f8cd 8000 	str.w	r8, [sp]
 8005042:	4638      	mov	r0, r7
 8005044:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005046:	f004 f9eb 	bl	8009420 <_Unwind_VRS_Get>
 800504a:	9a05      	ldr	r2, [sp, #20]
 800504c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800504e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 8005052:	9a04      	ldr	r2, [sp, #16]
 8005054:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 8005058:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800505c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8005060:	f8c9 3020 	str.w	r3, [r9, #32]
 8005064:	2006      	movs	r0, #6
 8005066:	e75b      	b.n	8004f20 <__gxx_personality_v0+0x2c>
 8005068:	2008      	movs	r0, #8
 800506a:	b017      	add	sp, #92	; 0x5c
 800506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005070:	ab10      	add	r3, sp, #64	; 0x40
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	9306      	str	r3, [sp, #24]
 8005076:	220d      	movs	r2, #13
 8005078:	4623      	mov	r3, r4
 800507a:	4621      	mov	r1, r4
 800507c:	4638      	mov	r0, r7
 800507e:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8005082:	f004 f9cd 	bl	8009420 <_Unwind_VRS_Get>
 8005086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005088:	429d      	cmp	r5, r3
 800508a:	d012      	beq.n	80050b2 <__gxx_personality_v0+0x1be>
 800508c:	2302      	movs	r3, #2
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	e74f      	b.n	8004f32 <__gxx_personality_v0+0x3e>
 8005092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005094:	4413      	add	r3, r2
 8005096:	429e      	cmp	r6, r3
 8005098:	d359      	bcc.n	800514e <__gxx_personality_v0+0x25a>
 800509a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800509c:	42a3      	cmp	r3, r4
 800509e:	d88d      	bhi.n	8004fbc <__gxx_personality_v0+0xc8>
 80050a0:	2500      	movs	r5, #0
 80050a2:	2401      	movs	r4, #1
 80050a4:	9504      	str	r5, [sp, #16]
 80050a6:	e107      	b.n	80052b8 <__gxx_personality_v0+0x3c4>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	071b      	lsls	r3, r3, #28
 80050ac:	d54c      	bpl.n	8005148 <__gxx_personality_v0+0x254>
 80050ae:	f000 f993 	bl	80053d8 <std::terminate()>
 80050b2:	ab16      	add	r3, sp, #88	; 0x58
 80050b4:	f843 9d2c 	str.w	r9, [r3, #-44]!
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	4623      	mov	r3, r4
 80050be:	220c      	movs	r2, #12
 80050c0:	4638      	mov	r0, r7
 80050c2:	f004 f9d3 	bl	800946c <_Unwind_VRS_Set>
 80050c6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80050ca:	9304      	str	r3, [sp, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d03b      	beq.n	8005148 <__gxx_personality_v0+0x254>
 80050d0:	2403      	movs	r4, #3
 80050d2:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 80050d6:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 80050da:	2d00      	cmp	r5, #0
 80050dc:	f2c0 8108 	blt.w	80052f0 <__gxx_personality_v0+0x3fc>
 80050e0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80050e4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80050e8:	2300      	movs	r3, #0
 80050ea:	aa16      	add	r2, sp, #88	; 0x58
 80050ec:	f842 9d28 	str.w	r9, [r2, #-40]!
 80050f0:	4619      	mov	r1, r3
 80050f2:	9200      	str	r2, [sp, #0]
 80050f4:	4638      	mov	r0, r7
 80050f6:	461a      	mov	r2, r3
 80050f8:	f004 f9b8 	bl	800946c <_Unwind_VRS_Set>
 80050fc:	2300      	movs	r3, #0
 80050fe:	2201      	movs	r2, #1
 8005100:	4619      	mov	r1, r3
 8005102:	f8cd a000 	str.w	sl, [sp]
 8005106:	4638      	mov	r0, r7
 8005108:	950d      	str	r5, [sp, #52]	; 0x34
 800510a:	f004 f9af 	bl	800946c <_Unwind_VRS_Set>
 800510e:	2300      	movs	r3, #0
 8005110:	220f      	movs	r2, #15
 8005112:	4619      	mov	r1, r3
 8005114:	f8cd 8000 	str.w	r8, [sp]
 8005118:	4638      	mov	r0, r7
 800511a:	f004 f981 	bl	8009420 <_Unwind_VRS_Get>
 800511e:	2300      	movs	r3, #0
 8005120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005122:	9d04      	ldr	r5, [sp, #16]
 8005124:	f002 0201 	and.w	r2, r2, #1
 8005128:	4315      	orrs	r5, r2
 800512a:	f8cd 8000 	str.w	r8, [sp]
 800512e:	4638      	mov	r0, r7
 8005130:	4619      	mov	r1, r3
 8005132:	220f      	movs	r2, #15
 8005134:	950e      	str	r5, [sp, #56]	; 0x38
 8005136:	f004 f999 	bl	800946c <_Unwind_VRS_Set>
 800513a:	2c02      	cmp	r4, #2
 800513c:	f000 8082 	beq.w	8005244 <__gxx_personality_v0+0x350>
 8005140:	2007      	movs	r0, #7
 8005142:	b017      	add	sp, #92	; 0x5c
 8005144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005148:	4648      	mov	r0, r9
 800514a:	f000 f9a5 	bl	8005498 <__cxa_call_terminate>
 800514e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005150:	461a      	mov	r2, r3
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d17a      	bne.n	800524e <__gxx_personality_v0+0x35a>
 8005158:	2800      	cmp	r0, #0
 800515a:	f43f aed9 	beq.w	8004f10 <__gxx_personality_v0+0x1c>
 800515e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005160:	9a04      	ldr	r2, [sp, #16]
 8005162:	3801      	subs	r0, #1
 8005164:	4403      	add	r3, r0
 8005166:	2a00      	cmp	r2, #0
 8005168:	f43f aed2 	beq.w	8004f10 <__gxx_personality_v0+0x1c>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d077      	beq.n	8005260 <__gxx_personality_v0+0x36c>
 8005170:	9a03      	ldr	r2, [sp, #12]
 8005172:	f012 0208 	ands.w	r2, r2, #8
 8005176:	9209      	str	r2, [sp, #36]	; 0x24
 8005178:	f000 80f8 	beq.w	800536c <__gxx_personality_v0+0x478>
 800517c:	2547      	movs	r5, #71	; 0x47
 800517e:	244e      	movs	r4, #78	; 0x4e
 8005180:	2055      	movs	r0, #85	; 0x55
 8005182:	2143      	movs	r1, #67	; 0x43
 8005184:	2246      	movs	r2, #70	; 0x46
 8005186:	264f      	movs	r6, #79	; 0x4f
 8005188:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800518c:	f04f 0c00 	mov.w	ip, #0
 8005190:	f889 5000 	strb.w	r5, [r9]
 8005194:	f889 4001 	strb.w	r4, [r9, #1]
 8005198:	f889 0002 	strb.w	r0, [r9, #2]
 800519c:	f889 1003 	strb.w	r1, [r9, #3]
 80051a0:	f889 2004 	strb.w	r2, [r9, #4]
 80051a4:	f889 6005 	strb.w	r6, [r9, #5]
 80051a8:	f889 e006 	strb.w	lr, [r9, #6]
 80051ac:	f889 c007 	strb.w	ip, [r9, #7]
 80051b0:	2200      	movs	r2, #0
 80051b2:	9707      	str	r7, [sp, #28]
 80051b4:	9208      	str	r2, [sp, #32]
 80051b6:	2500      	movs	r5, #0
 80051b8:	4629      	mov	r1, r5
 80051ba:	e000      	b.n	80051be <__gxx_personality_v0+0x2ca>
 80051bc:	4623      	mov	r3, r4
 80051be:	461c      	mov	r4, r3
 80051c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80051c4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80051c8:	408a      	lsls	r2, r1
 80051ca:	0606      	lsls	r6, r0, #24
 80051cc:	ea45 0502 	orr.w	r5, r5, r2
 80051d0:	f101 0107 	add.w	r1, r1, #7
 80051d4:	d4f2      	bmi.n	80051bc <__gxx_personality_v0+0x2c8>
 80051d6:	291f      	cmp	r1, #31
 80051d8:	d805      	bhi.n	80051e6 <__gxx_personality_v0+0x2f2>
 80051da:	0642      	lsls	r2, r0, #25
 80051dc:	d503      	bpl.n	80051e6 <__gxx_personality_v0+0x2f2>
 80051de:	2201      	movs	r2, #1
 80051e0:	408a      	lsls	r2, r1
 80051e2:	4252      	negs	r2, r2
 80051e4:	4315      	orrs	r5, r2
 80051e6:	2600      	movs	r6, #0
 80051e8:	4631      	mov	r1, r6
 80051ea:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80051ee:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80051f2:	408a      	lsls	r2, r1
 80051f4:	0607      	lsls	r7, r0, #24
 80051f6:	ea46 0602 	orr.w	r6, r6, r2
 80051fa:	f101 0107 	add.w	r1, r1, #7
 80051fe:	d4f4      	bmi.n	80051ea <__gxx_personality_v0+0x2f6>
 8005200:	291f      	cmp	r1, #31
 8005202:	d805      	bhi.n	8005210 <__gxx_personality_v0+0x31c>
 8005204:	0640      	lsls	r0, r0, #25
 8005206:	d503      	bpl.n	8005210 <__gxx_personality_v0+0x31c>
 8005208:	2301      	movs	r3, #1
 800520a:	408b      	lsls	r3, r1
 800520c:	425b      	negs	r3, r3
 800520e:	431e      	orrs	r6, r3
 8005210:	2d00      	cmp	r5, #0
 8005212:	d05c      	beq.n	80052ce <__gxx_personality_v0+0x3da>
 8005214:	dd5e      	ble.n	80052d4 <__gxx_personality_v0+0x3e0>
 8005216:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800521a:	28ff      	cmp	r0, #255	; 0xff
 800521c:	f000 80a4 	beq.w	8005368 <__gxx_personality_v0+0x474>
 8005220:	f000 0307 	and.w	r3, r0, #7
 8005224:	2b04      	cmp	r3, #4
 8005226:	f63f ae7e 	bhi.w	8004f26 <__gxx_personality_v0+0x32>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <__gxx_personality_v0+0x33c>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	0800529b 	.word	0x0800529b
 8005234:	08004f27 	.word	0x08004f27
 8005238:	080052a1 	.word	0x080052a1
 800523c:	0800529b 	.word	0x0800529b
 8005240:	08005279 	.word	0x08005279
 8005244:	4648      	mov	r0, r9
 8005246:	f7ff fc71 	bl	8004b2c <__cxa_begin_cleanup>
 800524a:	2007      	movs	r0, #7
 800524c:	e668      	b.n	8004f20 <__gxx_personality_v0+0x2c>
 800524e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005250:	441a      	add	r2, r3
 8005252:	9204      	str	r2, [sp, #16]
 8005254:	2800      	cmp	r0, #0
 8005256:	d182      	bne.n	800515e <__gxx_personality_v0+0x26a>
 8005258:	9b04      	ldr	r3, [sp, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f43f ae58 	beq.w	8004f10 <__gxx_personality_v0+0x1c>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	f013 0301 	ands.w	r3, r3, #1
 8005266:	f47f ae53 	bne.w	8004f10 <__gxx_personality_v0+0x1c>
 800526a:	9a03      	ldr	r2, [sp, #12]
 800526c:	f012 0508 	ands.w	r5, r2, #8
 8005270:	f040 8097 	bne.w	80053a2 <__gxx_personality_v0+0x4ae>
 8005274:	2402      	movs	r4, #2
 8005276:	e737      	b.n	80050e8 <__gxx_personality_v0+0x1f4>
 8005278:	00eb      	lsls	r3, r5, #3
 800527a:	425b      	negs	r3, r3
 800527c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800527e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005280:	441a      	add	r2, r3
 8005282:	4643      	mov	r3, r8
 8005284:	f7ff fd6c 	bl	8004d60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8005288:	990e      	ldr	r1, [sp, #56]	; 0x38
 800528a:	b199      	cbz	r1, 80052b4 <__gxx_personality_v0+0x3c0>
 800528c:	f1b9 0f00 	cmp.w	r9, #0
 8005290:	d109      	bne.n	80052a6 <__gxx_personality_v0+0x3b2>
 8005292:	2e00      	cmp	r6, #0
 8005294:	d077      	beq.n	8005386 <__gxx_personality_v0+0x492>
 8005296:	19a3      	adds	r3, r4, r6
 8005298:	e78d      	b.n	80051b6 <__gxx_personality_v0+0x2c2>
 800529a:	00ab      	lsls	r3, r5, #2
 800529c:	425b      	negs	r3, r3
 800529e:	e7ed      	b.n	800527c <__gxx_personality_v0+0x388>
 80052a0:	006b      	lsls	r3, r5, #1
 80052a2:	425b      	negs	r3, r3
 80052a4:	e7ea      	b.n	800527c <__gxx_personality_v0+0x388>
 80052a6:	ab0a      	add	r3, sp, #40	; 0x28
 80052a8:	2200      	movs	r2, #0
 80052aa:	4648      	mov	r0, r9
 80052ac:	f7ff fbe2 	bl	8004a74 <__cxa_type_match>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d0ee      	beq.n	8005292 <__gxx_personality_v0+0x39e>
 80052b4:	2403      	movs	r4, #3
 80052b6:	9f07      	ldr	r7, [sp, #28]
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	07da      	lsls	r2, r3, #31
 80052bc:	d460      	bmi.n	8005380 <__gxx_personality_v0+0x48c>
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	0719      	lsls	r1, r3, #28
 80052c2:	d466      	bmi.n	8005392 <__gxx_personality_v0+0x49e>
 80052c4:	2c01      	cmp	r4, #1
 80052c6:	f43f af3f 	beq.w	8005148 <__gxx_personality_v0+0x254>
 80052ca:	9905      	ldr	r1, [sp, #20]
 80052cc:	e705      	b.n	80050da <__gxx_personality_v0+0x1e6>
 80052ce:	2301      	movs	r3, #1
 80052d0:	9308      	str	r3, [sp, #32]
 80052d2:	e7de      	b.n	8005292 <__gxx_personality_v0+0x39e>
 80052d4:	f1b9 0f00 	cmp.w	r9, #0
 80052d8:	d001      	beq.n	80052de <__gxx_personality_v0+0x3ea>
 80052da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052dc:	b35b      	cbz	r3, 8005336 <__gxx_personality_v0+0x442>
 80052de:	1c6b      	adds	r3, r5, #1
 80052e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052e2:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 80052e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1d1      	bne.n	8005292 <__gxx_personality_v0+0x39e>
 80052ee:	e7e1      	b.n	80052b4 <__gxx_personality_v0+0x3c0>
 80052f0:	9a06      	ldr	r2, [sp, #24]
 80052f2:	4638      	mov	r0, r7
 80052f4:	f7ff fdb4 	bl	8004e60 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 80052f8:	4639      	mov	r1, r7
 80052fa:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80052fe:	f7ff fd8f 	bl	8004e20 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8005302:	00aa      	lsls	r2, r5, #2
 8005304:	f082 0203 	eor.w	r2, r2, #3
 8005308:	43d2      	mvns	r2, r2
 800530a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800530c:	9012      	str	r0, [sp, #72]	; 0x48
 800530e:	58b3      	ldr	r3, [r6, r2]
 8005310:	4416      	add	r6, r2
 8005312:	b133      	cbz	r3, 8005322 <__gxx_personality_v0+0x42e>
 8005314:	4632      	mov	r2, r6
 8005316:	2300      	movs	r3, #0
 8005318:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800531c:	3301      	adds	r3, #1
 800531e:	2900      	cmp	r1, #0
 8005320:	d1fa      	bne.n	8005318 <__gxx_personality_v0+0x424>
 8005322:	2204      	movs	r2, #4
 8005324:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 8005328:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800532c:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 8005330:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8005334:	e6d4      	b.n	80050e0 <__gxx_personality_v0+0x1ec>
 8005336:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005338:	1c6b      	adds	r3, r5, #1
 800533a:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800533e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8005342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005344:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8005348:	920f      	str	r2, [sp, #60]	; 0x3c
 800534a:	b921      	cbnz	r1, 8005356 <__gxx_personality_v0+0x462>
 800534c:	e7b2      	b.n	80052b4 <__gxx_personality_v0+0x3c0>
 800534e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005352:	2900      	cmp	r1, #0
 8005354:	d0ae      	beq.n	80052b4 <__gxx_personality_v0+0x3c0>
 8005356:	4439      	add	r1, r7
 8005358:	465b      	mov	r3, fp
 800535a:	2200      	movs	r2, #0
 800535c:	4648      	mov	r0, r9
 800535e:	f7ff fb89 	bl	8004a74 <__cxa_type_match>
 8005362:	2800      	cmp	r0, #0
 8005364:	d0f3      	beq.n	800534e <__gxx_personality_v0+0x45a>
 8005366:	e794      	b.n	8005292 <__gxx_personality_v0+0x39e>
 8005368:	2300      	movs	r3, #0
 800536a:	e787      	b.n	800527c <__gxx_personality_v0+0x388>
 800536c:	f899 2007 	ldrb.w	r2, [r9, #7]
 8005370:	2a01      	cmp	r2, #1
 8005372:	bf0c      	ite	eq
 8005374:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 8005378:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 800537c:	920a      	str	r2, [sp, #40]	; 0x28
 800537e:	e717      	b.n	80051b0 <__gxx_personality_v0+0x2bc>
 8005380:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005384:	e658      	b.n	8005038 <__gxx_personality_v0+0x144>
 8005386:	9b08      	ldr	r3, [sp, #32]
 8005388:	9f07      	ldr	r7, [sp, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f47f af68 	bne.w	8005260 <__gxx_personality_v0+0x36c>
 8005390:	e5be      	b.n	8004f10 <__gxx_personality_v0+0x1c>
 8005392:	2c01      	cmp	r4, #1
 8005394:	f43f ae8b 	beq.w	80050ae <__gxx_personality_v0+0x1ba>
 8005398:	2d00      	cmp	r5, #0
 800539a:	f6bf aea1 	bge.w	80050e0 <__gxx_personality_v0+0x1ec>
 800539e:	f000 f829 	bl	80053f4 <std::unexpected()>
 80053a2:	461d      	mov	r5, r3
 80053a4:	2402      	movs	r4, #2
 80053a6:	e69f      	b.n	80050e8 <__gxx_personality_v0+0x1f4>
 80053a8:	f000 f8f8 	bl	800559c <__cxa_begin_catch>
 80053ac:	e67f      	b.n	80050ae <__gxx_personality_v0+0x1ba>
 80053ae:	bf00      	nop

080053b0 <__cxxabiv1::__terminate(void (*)())>:
 80053b0:	b508      	push	{r3, lr}
 80053b2:	4780      	blx	r0
 80053b4:	f7ff fa84 	bl	80048c0 <abort>
 80053b8:	f000 f8f0 	bl	800559c <__cxa_begin_catch>
 80053bc:	f7ff fa80 	bl	80048c0 <abort>
 80053c0:	460d      	mov	r5, r1
 80053c2:	4604      	mov	r4, r0
 80053c4:	f000 f92a 	bl	800561c <__cxa_end_catch>
 80053c8:	3501      	adds	r5, #1
 80053ca:	d001      	beq.n	80053d0 <__cxxabiv1::__terminate(void (*)())+0x20>
 80053cc:	f7ff fb4c 	bl	8004a68 <__cxa_end_cleanup>
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 f871 	bl	80054b8 <__cxa_call_unexpected>
 80053d6:	bf00      	nop

080053d8 <std::terminate()>:
 80053d8:	b508      	push	{r3, lr}
 80053da:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <std::terminate()+0x10>)
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f3bf 8f5b 	dmb	ish
 80053e2:	f7ff ffe5 	bl	80053b0 <__cxxabiv1::__terminate(void (*)())>
 80053e6:	bf00      	nop
 80053e8:	2000002c 	.word	0x2000002c

080053ec <__cxxabiv1::__unexpected(void (*)())>:
 80053ec:	b508      	push	{r3, lr}
 80053ee:	4780      	blx	r0
 80053f0:	f7ff fff2 	bl	80053d8 <std::terminate()>

080053f4 <std::unexpected()>:
 80053f4:	b508      	push	{r3, lr}
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <std::unexpected()+0x10>)
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f3bf 8f5b 	dmb	ish
 80053fe:	f7ff fff5 	bl	80053ec <__cxxabiv1::__unexpected(void (*)())>
 8005402:	bf00      	nop
 8005404:	20000030 	.word	0x20000030

08005408 <std::get_terminate()>:
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <std::get_terminate()+0xc>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f3bf 8f5b 	dmb	ish
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	2000002c 	.word	0x2000002c

08005418 <std::get_unexpected()>:
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <std::get_unexpected()+0xc>)
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	f3bf 8f5b 	dmb	ish
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000030 	.word	0x20000030

08005428 <std::type_info::~type_info()>:
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <std::type_info::__is_pointer_p() const>:
 800542c:	2000      	movs	r0, #0
 800542e:	4770      	bx	lr

08005430 <std::type_info::operator==(std::type_info const&) const>:
 8005430:	4281      	cmp	r1, r0
 8005432:	d011      	beq.n	8005458 <std::type_info::operator==(std::type_info const&) const+0x28>
 8005434:	b508      	push	{r3, lr}
 8005436:	6840      	ldr	r0, [r0, #4]
 8005438:	7803      	ldrb	r3, [r0, #0]
 800543a:	2b2a      	cmp	r3, #42	; 0x2a
 800543c:	d00a      	beq.n	8005454 <std::type_info::operator==(std::type_info const&) const+0x24>
 800543e:	6849      	ldr	r1, [r1, #4]
 8005440:	780b      	ldrb	r3, [r1, #0]
 8005442:	2b2a      	cmp	r3, #42	; 0x2a
 8005444:	bf08      	it	eq
 8005446:	3101      	addeq	r1, #1
 8005448:	f005 fb16 	bl	800aa78 <strcmp>
 800544c:	fab0 f080 	clz	r0, r0
 8005450:	0940      	lsrs	r0, r0, #5
 8005452:	bd08      	pop	{r3, pc}
 8005454:	2000      	movs	r0, #0
 8005456:	bd08      	pop	{r3, pc}
 8005458:	2001      	movs	r0, #1
 800545a:	4770      	bx	lr

0800545c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 800545c:	7803      	ldrb	r3, [r0, #0]
 800545e:	2b47      	cmp	r3, #71	; 0x47
 8005460:	d001      	beq.n	8005466 <__cxxabiv1::__is_gxx_exception_class(char*)+0xa>
 8005462:	2000      	movs	r0, #0
 8005464:	4770      	bx	lr
 8005466:	7843      	ldrb	r3, [r0, #1]
 8005468:	2b4e      	cmp	r3, #78	; 0x4e
 800546a:	d1fa      	bne.n	8005462 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 800546c:	7883      	ldrb	r3, [r0, #2]
 800546e:	2b55      	cmp	r3, #85	; 0x55
 8005470:	d1f7      	bne.n	8005462 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8005472:	78c3      	ldrb	r3, [r0, #3]
 8005474:	2b43      	cmp	r3, #67	; 0x43
 8005476:	d1f4      	bne.n	8005462 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8005478:	7903      	ldrb	r3, [r0, #4]
 800547a:	2b43      	cmp	r3, #67	; 0x43
 800547c:	d1f1      	bne.n	8005462 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 800547e:	7943      	ldrb	r3, [r0, #5]
 8005480:	2b2b      	cmp	r3, #43	; 0x2b
 8005482:	d1ee      	bne.n	8005462 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 8005484:	7983      	ldrb	r3, [r0, #6]
 8005486:	2b2b      	cmp	r3, #43	; 0x2b
 8005488:	d1eb      	bne.n	8005462 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
 800548a:	79c0      	ldrb	r0, [r0, #7]
 800548c:	2801      	cmp	r0, #1
 800548e:	bf8c      	ite	hi
 8005490:	2000      	movhi	r0, #0
 8005492:	2001      	movls	r0, #1
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop

08005498 <__cxa_call_terminate>:
 8005498:	b510      	push	{r4, lr}
 800549a:	b130      	cbz	r0, 80054aa <__cxa_call_terminate+0x12>
 800549c:	4604      	mov	r4, r0
 800549e:	f000 f87d 	bl	800559c <__cxa_begin_catch>
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff ffda 	bl	800545c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80054a8:	b908      	cbnz	r0, 80054ae <__cxa_call_terminate+0x16>
 80054aa:	f7ff ff95 	bl	80053d8 <std::terminate()>
 80054ae:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80054b2:	f7ff ff7d 	bl	80053b0 <__cxxabiv1::__terminate(void (*)())>
 80054b6:	bf00      	nop

080054b8 <__cxa_call_unexpected>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	b085      	sub	sp, #20
 80054be:	4602      	mov	r2, r0
 80054c0:	f7ff ffcc 	bl	800545c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80054c4:	b168      	cbz	r0, 80054e2 <__cxa_call_unexpected+0x2a>
 80054c6:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80054ca:	4610      	mov	r0, r2
 80054cc:	f852 5c14 	ldr.w	r5, [r2, #-20]
 80054d0:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80054d2:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80054d4:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 80054d8:	f000 f860 	bl	800559c <__cxa_begin_catch>
 80054dc:	4620      	mov	r0, r4
 80054de:	f7ff ff85 	bl	80053ec <__cxxabiv1::__unexpected(void (*)())>
 80054e2:	4610      	mov	r0, r2
 80054e4:	f000 f85a 	bl	800559c <__cxa_begin_catch>
 80054e8:	f7ff ff84 	bl	80053f4 <std::unexpected()>
 80054ec:	f000 f856 	bl	800559c <__cxa_begin_catch>
 80054f0:	f7ff ff72 	bl	80053d8 <std::terminate()>
 80054f4:	f000 f852 	bl	800559c <__cxa_begin_catch>
 80054f8:	f7ff fb82 	bl	8004c00 <__cxa_get_globals_fast>
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005502:	2a01      	cmp	r2, #1
 8005504:	d037      	beq.n	8005576 <__cxa_call_unexpected+0xbe>
 8005506:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	464c      	mov	r4, r9
 8005510:	46c1      	mov	r9, r8
 8005512:	f10d 0a10 	add.w	sl, sp, #16
 8005516:	3320      	adds	r3, #32
 8005518:	f027 0b03 	bic.w	fp, r7, #3
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	f84a 2d08 	str.w	r2, [sl, #-8]!
 8005522:	45b1      	cmp	r9, r6
 8005524:	da1b      	bge.n	800555e <__cxa_call_unexpected+0xa6>
 8005526:	6827      	ldr	r7, [r4, #0]
 8005528:	b107      	cbz	r7, 800552c <__cxa_call_unexpected+0x74>
 800552a:	4427      	add	r7, r4
 800552c:	4653      	mov	r3, sl
 800552e:	2200      	movs	r2, #0
 8005530:	4639      	mov	r1, r7
 8005532:	9801      	ldr	r0, [sp, #4]
 8005534:	f7ff fa9e 	bl	8004a74 <__cxa_type_match>
 8005538:	bb10      	cbnz	r0, 8005580 <__cxa_call_unexpected+0xc8>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	aa04      	add	r2, sp, #16
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f842 0d04 	str.w	r0, [r2, #-4]!
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	4638      	mov	r0, r7
 8005548:	2301      	movs	r3, #1
 800554a:	4911      	ldr	r1, [pc, #68]	; (8005590 <__cxa_call_unexpected+0xd8>)
 800554c:	9f00      	ldr	r7, [sp, #0]
 800554e:	47b8      	blx	r7
 8005550:	2800      	cmp	r0, #0
 8005552:	bf18      	it	ne
 8005554:	4680      	movne	r8, r0
 8005556:	f109 0901 	add.w	r9, r9, #1
 800555a:	445c      	add	r4, fp
 800555c:	e7e1      	b.n	8005522 <__cxa_call_unexpected+0x6a>
 800555e:	f1b8 0f00 	cmp.w	r8, #0
 8005562:	d00a      	beq.n	800557a <__cxa_call_unexpected+0xc2>
 8005564:	2004      	movs	r0, #4
 8005566:	f000 f911 	bl	800578c <__cxa_allocate_exception>
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <__cxa_call_unexpected+0xdc>)
 800556c:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <__cxa_call_unexpected+0xe0>)
 800556e:	6003      	str	r3, [r0, #0]
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <__cxa_call_unexpected+0xd8>)
 8005572:	f000 f969 	bl	8005848 <__cxa_throw>
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	e7c7      	b.n	800550a <__cxa_call_unexpected+0x52>
 800557a:	4628      	mov	r0, r5
 800557c:	f7ff ff18 	bl	80053b0 <__cxxabiv1::__terminate(void (*)())>
 8005580:	f000 f9a2 	bl	80058c8 <__cxa_rethrow>
 8005584:	f000 f84a 	bl	800561c <__cxa_end_catch>
 8005588:	f000 f848 	bl	800561c <__cxa_end_catch>
 800558c:	f7ff fa6c 	bl	8004a68 <__cxa_end_cleanup>
 8005590:	0800b708 	.word	0x0800b708
 8005594:	0800b78c 	.word	0x0800b78c
 8005598:	08004c11 	.word	0x08004c11

0800559c <__cxa_begin_catch>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4604      	mov	r4, r0
 80055a0:	f7ff fb32 	bl	8004c08 <__cxa_get_globals>
 80055a4:	7822      	ldrb	r2, [r4, #0]
 80055a6:	6803      	ldr	r3, [r0, #0]
 80055a8:	2a47      	cmp	r2, #71	; 0x47
 80055aa:	f1a4 0120 	sub.w	r1, r4, #32
 80055ae:	d005      	beq.n	80055bc <__cxa_begin_catch+0x20>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d131      	bne.n	8005618 <__cxa_begin_catch+0x7c>
 80055b4:	461c      	mov	r4, r3
 80055b6:	6001      	str	r1, [r0, #0]
 80055b8:	4620      	mov	r0, r4
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	7862      	ldrb	r2, [r4, #1]
 80055be:	2a4e      	cmp	r2, #78	; 0x4e
 80055c0:	d1f6      	bne.n	80055b0 <__cxa_begin_catch+0x14>
 80055c2:	78a2      	ldrb	r2, [r4, #2]
 80055c4:	2a55      	cmp	r2, #85	; 0x55
 80055c6:	d1f3      	bne.n	80055b0 <__cxa_begin_catch+0x14>
 80055c8:	78e2      	ldrb	r2, [r4, #3]
 80055ca:	2a43      	cmp	r2, #67	; 0x43
 80055cc:	d1f0      	bne.n	80055b0 <__cxa_begin_catch+0x14>
 80055ce:	7922      	ldrb	r2, [r4, #4]
 80055d0:	2a43      	cmp	r2, #67	; 0x43
 80055d2:	d1ed      	bne.n	80055b0 <__cxa_begin_catch+0x14>
 80055d4:	7962      	ldrb	r2, [r4, #5]
 80055d6:	2a2b      	cmp	r2, #43	; 0x2b
 80055d8:	d1ea      	bne.n	80055b0 <__cxa_begin_catch+0x14>
 80055da:	79a2      	ldrb	r2, [r4, #6]
 80055dc:	2a2b      	cmp	r2, #43	; 0x2b
 80055de:	d1e7      	bne.n	80055b0 <__cxa_begin_catch+0x14>
 80055e0:	79e2      	ldrb	r2, [r4, #7]
 80055e2:	2a01      	cmp	r2, #1
 80055e4:	d8e4      	bhi.n	80055b0 <__cxa_begin_catch+0x14>
 80055e6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	db11      	blt.n	8005612 <__cxa_begin_catch+0x76>
 80055ee:	3201      	adds	r2, #1
 80055f0:	6845      	ldr	r5, [r0, #4]
 80055f2:	428b      	cmp	r3, r1
 80055f4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80055f8:	f844 2c0c 	str.w	r2, [r4, #-12]
 80055fc:	6045      	str	r5, [r0, #4]
 80055fe:	bf1c      	itt	ne
 8005600:	f844 3c10 	strne.w	r3, [r4, #-16]
 8005604:	6001      	strne	r1, [r0, #0]
 8005606:	4620      	mov	r0, r4
 8005608:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800560a:	f003 ff01 	bl	8009410 <_Unwind_Complete>
 800560e:	4620      	mov	r0, r4
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	f1c2 0201 	rsb	r2, r2, #1
 8005616:	e7eb      	b.n	80055f0 <__cxa_begin_catch+0x54>
 8005618:	f7ff fede 	bl	80053d8 <std::terminate()>

0800561c <__cxa_end_catch>:
 800561c:	b508      	push	{r3, lr}
 800561e:	f7ff faef 	bl	8004c00 <__cxa_get_globals_fast>
 8005622:	4602      	mov	r2, r0
 8005624:	6800      	ldr	r0, [r0, #0]
 8005626:	2800      	cmp	r0, #0
 8005628:	d03d      	beq.n	80056a6 <__cxa_end_catch+0x8a>
 800562a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800562e:	2b47      	cmp	r3, #71	; 0x47
 8005630:	d006      	beq.n	8005640 <__cxa_end_catch+0x24>
 8005632:	2300      	movs	r3, #0
 8005634:	3020      	adds	r0, #32
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800563c:	f003 beea 	b.w	8009414 <_Unwind_DeleteException>
 8005640:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005644:	2b4e      	cmp	r3, #78	; 0x4e
 8005646:	d1f4      	bne.n	8005632 <__cxa_end_catch+0x16>
 8005648:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800564c:	2b55      	cmp	r3, #85	; 0x55
 800564e:	d1f0      	bne.n	8005632 <__cxa_end_catch+0x16>
 8005650:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005654:	2b43      	cmp	r3, #67	; 0x43
 8005656:	d1ec      	bne.n	8005632 <__cxa_end_catch+0x16>
 8005658:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800565c:	2b43      	cmp	r3, #67	; 0x43
 800565e:	d1e8      	bne.n	8005632 <__cxa_end_catch+0x16>
 8005660:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005664:	2b2b      	cmp	r3, #43	; 0x2b
 8005666:	d1e4      	bne.n	8005632 <__cxa_end_catch+0x16>
 8005668:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800566c:	2b2b      	cmp	r3, #43	; 0x2b
 800566e:	d1e0      	bne.n	8005632 <__cxa_end_catch+0x16>
 8005670:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8005674:	2b01      	cmp	r3, #1
 8005676:	d8dc      	bhi.n	8005632 <__cxa_end_catch+0x16>
 8005678:	6943      	ldr	r3, [r0, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	db05      	blt.n	800568a <__cxa_end_catch+0x6e>
 800567e:	3b01      	subs	r3, #1
 8005680:	d008      	beq.n	8005694 <__cxa_end_catch+0x78>
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	d00d      	beq.n	80056a2 <__cxa_end_catch+0x86>
 8005686:	6143      	str	r3, [r0, #20]
 8005688:	bd08      	pop	{r3, pc}
 800568a:	3301      	adds	r3, #1
 800568c:	d1fb      	bne.n	8005686 <__cxa_end_catch+0x6a>
 800568e:	6901      	ldr	r1, [r0, #16]
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	e7f8      	b.n	8005686 <__cxa_end_catch+0x6a>
 8005694:	6903      	ldr	r3, [r0, #16]
 8005696:	3020      	adds	r0, #32
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800569e:	f003 beb9 	b.w	8009414 <_Unwind_DeleteException>
 80056a2:	f7ff fe99 	bl	80053d8 <std::terminate()>
 80056a6:	bd08      	pop	{r3, pc}

080056a8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]>:
 80056a8:	b4f0      	push	{r4, r5, r6, r7}
 80056aa:	4c1d      	ldr	r4, [pc, #116]	; (8005720 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x78>)
 80056ac:	f1a0 0608 	sub.w	r6, r0, #8
 80056b0:	6861      	ldr	r1, [r4, #4]
 80056b2:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80056b6:	b1c9      	cbz	r1, 80056ec <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x44>
 80056b8:	19f5      	adds	r5, r6, r7
 80056ba:	42a9      	cmp	r1, r5
 80056bc:	d01b      	beq.n	80056f6 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x4e>
 80056be:	684a      	ldr	r2, [r1, #4]
 80056c0:	b32a      	cbz	r2, 800570e <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x66>
 80056c2:	4295      	cmp	r5, r2
 80056c4:	d304      	bcc.n	80056d0 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x28>
 80056c6:	e026      	b.n	8005716 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x6e>
 80056c8:	429d      	cmp	r5, r3
 80056ca:	4611      	mov	r1, r2
 80056cc:	d204      	bcs.n	80056d8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x30>
 80056ce:	461a      	mov	r2, r3
 80056d0:	6853      	ldr	r3, [r2, #4]
 80056d2:	1d0c      	adds	r4, r1, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f7      	bne.n	80056c8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x20>
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	1855      	adds	r5, r2, r1
 80056dc:	42ae      	cmp	r6, r5
 80056de:	d013      	beq.n	8005708 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x60>
 80056e0:	f840 3c04 	str.w	r3, [r0, #-4]
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	605e      	str	r6, [r3, #4]
 80056e8:	bcf0      	pop	{r4, r5, r6, r7}
 80056ea:	4770      	bx	lr
 80056ec:	f840 1c04 	str.w	r1, [r0, #-4]
 80056f0:	6066      	str	r6, [r4, #4]
 80056f2:	bcf0      	pop	{r4, r5, r6, r7}
 80056f4:	4770      	bx	lr
 80056f6:	680b      	ldr	r3, [r1, #0]
 80056f8:	684a      	ldr	r2, [r1, #4]
 80056fa:	441f      	add	r7, r3
 80056fc:	f840 7c08 	str.w	r7, [r0, #-8]
 8005700:	f840 2c04 	str.w	r2, [r0, #-4]
 8005704:	6066      	str	r6, [r4, #4]
 8005706:	e7ef      	b.n	80056e8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x40>
 8005708:	440f      	add	r7, r1
 800570a:	6017      	str	r7, [r2, #0]
 800570c:	e7ec      	b.n	80056e8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x40>
 800570e:	4613      	mov	r3, r2
 8005710:	3404      	adds	r4, #4
 8005712:	460a      	mov	r2, r1
 8005714:	e7e0      	b.n	80056d8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x30>
 8005716:	4613      	mov	r3, r2
 8005718:	3404      	adds	r4, #4
 800571a:	460a      	mov	r2, r1
 800571c:	e7dc      	b.n	80056d8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]+0x30>
 800571e:	bf00      	nop
 8005720:	20001afc 	.word	0x20001afc

08005724 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]>:
 8005724:	b430      	push	{r4, r5}
 8005726:	4c18      	ldr	r4, [pc, #96]	; (8005788 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x64>)
 8005728:	f100 0108 	add.w	r1, r0, #8
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	2908      	cmp	r1, #8
 8005730:	bf38      	it	cc
 8005732:	2108      	movcc	r1, #8
 8005734:	b313      	cbz	r3, 800577c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x58>
 8005736:	3107      	adds	r1, #7
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	f021 0107 	bic.w	r1, r1, #7
 800573e:	4291      	cmp	r1, r2
 8005740:	d804      	bhi.n	800574c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x28>
 8005742:	e01d      	b.n	8005780 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x5c>
 8005744:	6802      	ldr	r2, [r0, #0]
 8005746:	4291      	cmp	r1, r2
 8005748:	d905      	bls.n	8005756 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x32>
 800574a:	4603      	mov	r3, r0
 800574c:	6858      	ldr	r0, [r3, #4]
 800574e:	2800      	cmp	r0, #0
 8005750:	d1f8      	bne.n	8005744 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x20>
 8005752:	bc30      	pop	{r4, r5}
 8005754:	4770      	bx	lr
 8005756:	3304      	adds	r3, #4
 8005758:	1a52      	subs	r2, r2, r1
 800575a:	2a07      	cmp	r2, #7
 800575c:	d90a      	bls.n	8005774 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x50>
 800575e:	6844      	ldr	r4, [r0, #4]
 8005760:	1845      	adds	r5, r0, r1
 8005762:	606c      	str	r4, [r5, #4]
 8005764:	681c      	ldr	r4, [r3, #0]
 8005766:	5042      	str	r2, [r0, r1]
 8005768:	6021      	str	r1, [r4, #0]
 800576a:	601d      	str	r5, [r3, #0]
 800576c:	f104 0008 	add.w	r0, r4, #8
 8005770:	bc30      	pop	{r4, r5}
 8005772:	4770      	bx	lr
 8005774:	6842      	ldr	r2, [r0, #4]
 8005776:	4604      	mov	r4, r0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e7f7      	b.n	800576c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x48>
 800577c:	4618      	mov	r0, r3
 800577e:	e7e8      	b.n	8005752 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x2e>
 8005780:	4618      	mov	r0, r3
 8005782:	1d23      	adds	r3, r4, #4
 8005784:	e7e8      	b.n	8005758 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]+0x34>
 8005786:	bf00      	nop
 8005788:	20001afc 	.word	0x20001afc

0800578c <__cxa_allocate_exception>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	f100 0580 	add.w	r5, r0, #128	; 0x80
 8005792:	4628      	mov	r0, r5
 8005794:	f004 fc26 	bl	8009fe4 <malloc>
 8005798:	4604      	mov	r4, r0
 800579a:	b138      	cbz	r0, 80057ac <__cxa_allocate_exception+0x20>
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	2100      	movs	r1, #0
 80057a0:	4620      	mov	r0, r4
 80057a2:	f004 ff47 	bl	800a634 <memset>
 80057a6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	4628      	mov	r0, r5
 80057ae:	f7ff ffb9 	bl	8005724 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.5]>
 80057b2:	4604      	mov	r4, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1f1      	bne.n	800579c <__cxa_allocate_exception+0x10>
 80057b8:	f7ff fe0e 	bl	80053d8 <std::terminate()>

080057bc <__cxa_free_exception>:
 80057bc:	4a06      	ldr	r2, [pc, #24]	; (80057d8 <__cxa_free_exception+0x1c>)
 80057be:	3880      	subs	r0, #128	; 0x80
 80057c0:	6893      	ldr	r3, [r2, #8]
 80057c2:	4298      	cmp	r0, r3
 80057c4:	d905      	bls.n	80057d2 <__cxa_free_exception+0x16>
 80057c6:	68d2      	ldr	r2, [r2, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	4298      	cmp	r0, r3
 80057cc:	d201      	bcs.n	80057d2 <__cxa_free_exception+0x16>
 80057ce:	f7ff bf6b 	b.w	80056a8 <(anonymous namespace)::pool::free(void*) [clone .constprop.4]>
 80057d2:	f004 bc0f 	b.w	8009ff4 <free>
 80057d6:	bf00      	nop
 80057d8:	20001afc 	.word	0x20001afc

080057dc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80057e2:	4c07      	ldr	r4, [pc, #28]	; (8005800 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80057e4:	4628      	mov	r0, r5
 80057e6:	60e5      	str	r5, [r4, #12]
 80057e8:	f004 fbfc 	bl	8009fe4 <malloc>
 80057ec:	60a0      	str	r0, [r4, #8]
 80057ee:	b120      	cbz	r0, 80057fa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 80057f0:	2300      	movs	r3, #0
 80057f2:	6060      	str	r0, [r4, #4]
 80057f4:	6005      	str	r5, [r0, #0]
 80057f6:	6043      	str	r3, [r0, #4]
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
 80057fa:	60e0      	str	r0, [r4, #12]
 80057fc:	6060      	str	r0, [r4, #4]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20001afc 	.word	0x20001afc

08005804 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
 8005804:	2801      	cmp	r0, #1
 8005806:	b510      	push	{r4, lr}
 8005808:	d81a      	bhi.n	8005840 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3c>
 800580a:	f3bf 8f5b 	dmb	ish
 800580e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8005812:	e853 2f00 	ldrex	r2, [r3]
 8005816:	3a01      	subs	r2, #1
 8005818:	e843 2000 	strex	r0, r2, [r3]
 800581c:	2800      	cmp	r0, #0
 800581e:	d1f8      	bne.n	8005812 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0xe>
 8005820:	f3bf 8f5b 	dmb	ish
 8005824:	b95a      	cbnz	r2, 800583e <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3a>
 8005826:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800582a:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800582e:	b10b      	cbz	r3, 8005834 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x30>
 8005830:	4620      	mov	r0, r4
 8005832:	4798      	blx	r3
 8005834:	4620      	mov	r0, r4
 8005836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583a:	f7ff bfbf 	b.w	80057bc <__cxa_free_exception>
 800583e:	bd10      	pop	{r4, pc}
 8005840:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8005844:	f7ff fdb4 	bl	80053b0 <__cxxabiv1::__terminate(void (*)())>

08005848 <__cxa_throw>:
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	4617      	mov	r7, r2
 8005850:	4688      	mov	r8, r1
 8005852:	f7ff f9d9 	bl	8004c08 <__cxa_get_globals>
 8005856:	2601      	movs	r6, #1
 8005858:	6843      	ldr	r3, [r0, #4]
 800585a:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 800585e:	4433      	add	r3, r6
 8005860:	6043      	str	r3, [r0, #4]
 8005862:	f844 7c74 	str.w	r7, [r4, #-116]
 8005866:	f844 6c80 	str.w	r6, [r4, #-128]
 800586a:	f844 8c78 	str.w	r8, [r4, #-120]
 800586e:	f7ff fdd3 	bl	8005418 <std::get_unexpected()>
 8005872:	f844 0c70 	str.w	r0, [r4, #-112]
 8005876:	f7ff fdc7 	bl	8005408 <std::get_terminate()>
 800587a:	2147      	movs	r1, #71	; 0x47
 800587c:	2243      	movs	r2, #67	; 0x43
 800587e:	232b      	movs	r3, #43	; 0x2b
 8005880:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 8005884:	2755      	movs	r7, #85	; 0x55
 8005886:	2600      	movs	r6, #0
 8005888:	f804 1c58 	strb.w	r1, [r4, #-88]
 800588c:	490d      	ldr	r1, [pc, #52]	; (80058c4 <__cxa_throw+0x7c>)
 800588e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8005892:	f804 ec57 	strb.w	lr, [r4, #-87]
 8005896:	f844 1c50 	str.w	r1, [r4, #-80]
 800589a:	f804 2c55 	strb.w	r2, [r4, #-85]
 800589e:	f804 2c54 	strb.w	r2, [r4, #-84]
 80058a2:	f804 3c53 	strb.w	r3, [r4, #-83]
 80058a6:	f804 3c52 	strb.w	r3, [r4, #-82]
 80058aa:	f804 7c56 	strb.w	r7, [r4, #-86]
 80058ae:	f804 6c51 	strb.w	r6, [r4, #-81]
 80058b2:	4628      	mov	r0, r5
 80058b4:	f004 f94c 	bl	8009b50 <_Unwind_RaiseException>
 80058b8:	4628      	mov	r0, r5
 80058ba:	f7ff fe6f 	bl	800559c <__cxa_begin_catch>
 80058be:	f7ff fd8b 	bl	80053d8 <std::terminate()>
 80058c2:	bf00      	nop
 80058c4:	08005805 	.word	0x08005805

080058c8 <__cxa_rethrow>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	f7ff f99d 	bl	8004c08 <__cxa_get_globals>
 80058ce:	6842      	ldr	r2, [r0, #4]
 80058d0:	6804      	ldr	r4, [r0, #0]
 80058d2:	3201      	adds	r2, #1
 80058d4:	6042      	str	r2, [r0, #4]
 80058d6:	b164      	cbz	r4, 80058f2 <__cxa_rethrow+0x2a>
 80058d8:	f894 2020 	ldrb.w	r2, [r4, #32]
 80058dc:	2a47      	cmp	r2, #71	; 0x47
 80058de:	d00a      	beq.n	80058f6 <__cxa_rethrow+0x2e>
 80058e0:	2200      	movs	r2, #0
 80058e2:	6002      	str	r2, [r0, #0]
 80058e4:	3420      	adds	r4, #32
 80058e6:	4620      	mov	r0, r4
 80058e8:	f004 f956 	bl	8009b98 <_Unwind_Resume_or_Rethrow>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff fe55 	bl	800559c <__cxa_begin_catch>
 80058f2:	f7ff fd71 	bl	80053d8 <std::terminate()>
 80058f6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80058fa:	2a4e      	cmp	r2, #78	; 0x4e
 80058fc:	d1f0      	bne.n	80058e0 <__cxa_rethrow+0x18>
 80058fe:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8005902:	2a55      	cmp	r2, #85	; 0x55
 8005904:	d1ec      	bne.n	80058e0 <__cxa_rethrow+0x18>
 8005906:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800590a:	2a43      	cmp	r2, #67	; 0x43
 800590c:	d1e8      	bne.n	80058e0 <__cxa_rethrow+0x18>
 800590e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005912:	2a43      	cmp	r2, #67	; 0x43
 8005914:	d1e4      	bne.n	80058e0 <__cxa_rethrow+0x18>
 8005916:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800591a:	2a2b      	cmp	r2, #43	; 0x2b
 800591c:	d1e0      	bne.n	80058e0 <__cxa_rethrow+0x18>
 800591e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8005922:	2a2b      	cmp	r2, #43	; 0x2b
 8005924:	d1dc      	bne.n	80058e0 <__cxa_rethrow+0x18>
 8005926:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800592a:	2a01      	cmp	r2, #1
 800592c:	d8d8      	bhi.n	80058e0 <__cxa_rethrow+0x18>
 800592e:	6962      	ldr	r2, [r4, #20]
 8005930:	4252      	negs	r2, r2
 8005932:	6162      	str	r2, [r4, #20]
 8005934:	e7d6      	b.n	80058e4 <__cxa_rethrow+0x1c>
 8005936:	bf00      	nop

08005938 <sin>:
 8005938:	b530      	push	{r4, r5, lr}
 800593a:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <sin+0x88>)
 800593c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005940:	4293      	cmp	r3, r2
 8005942:	b087      	sub	sp, #28
 8005944:	dd1b      	ble.n	800597e <sin+0x46>
 8005946:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <sin+0x8c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	dd05      	ble.n	8005958 <sin+0x20>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	f002 fba8 	bl	80080a4 <__aeabi_dsub>
 8005954:	b007      	add	sp, #28
 8005956:	bd30      	pop	{r4, r5, pc}
 8005958:	aa02      	add	r2, sp, #8
 800595a:	f000 fa79 	bl	8005e50 <__ieee754_rem_pio2>
 800595e:	f000 0003 	and.w	r0, r0, #3
 8005962:	2801      	cmp	r0, #1
 8005964:	d01e      	beq.n	80059a4 <sin+0x6c>
 8005966:	2802      	cmp	r0, #2
 8005968:	d011      	beq.n	800598e <sin+0x56>
 800596a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596e:	b300      	cbz	r0, 80059b2 <sin+0x7a>
 8005970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005974:	f000 ff00 	bl	8006778 <__kernel_cos>
 8005978:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800597c:	e7ea      	b.n	8005954 <sin+0x1c>
 800597e:	2400      	movs	r4, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	9400      	str	r4, [sp, #0]
 8005986:	f001 fc63 	bl	8007250 <__kernel_sin>
 800598a:	b007      	add	sp, #28
 800598c:	bd30      	pop	{r4, r5, pc}
 800598e:	2401      	movs	r4, #1
 8005990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005998:	9400      	str	r4, [sp, #0]
 800599a:	f001 fc59 	bl	8007250 <__kernel_sin>
 800599e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80059a2:	e7d7      	b.n	8005954 <sin+0x1c>
 80059a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ac:	f000 fee4 	bl	8006778 <__kernel_cos>
 80059b0:	e7d0      	b.n	8005954 <sin+0x1c>
 80059b2:	2401      	movs	r4, #1
 80059b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b8:	9400      	str	r4, [sp, #0]
 80059ba:	f001 fc49 	bl	8007250 <__kernel_sin>
 80059be:	e7c9      	b.n	8005954 <sin+0x1c>
 80059c0:	3fe921fb 	.word	0x3fe921fb
 80059c4:	7fefffff 	.word	0x7fefffff

080059c8 <atanf>:
 80059c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059cc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80059d0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80059d4:	4604      	mov	r4, r0
 80059d6:	4606      	mov	r6, r0
 80059d8:	db08      	blt.n	80059ec <atanf+0x24>
 80059da:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80059de:	dc6f      	bgt.n	8005ac0 <atanf+0xf8>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f340 80a0 	ble.w	8005b26 <atanf+0x15e>
 80059e6:	486f      	ldr	r0, [pc, #444]	; (8005ba4 <atanf+0x1dc>)
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ec:	4b6e      	ldr	r3, [pc, #440]	; (8005ba8 <atanf+0x1e0>)
 80059ee:	429d      	cmp	r5, r3
 80059f0:	dc77      	bgt.n	8005ae2 <atanf+0x11a>
 80059f2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80059f6:	db68      	blt.n	8005aca <atanf+0x102>
 80059f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059fc:	4621      	mov	r1, r4
 80059fe:	4620      	mov	r0, r4
 8005a00:	f003 f93a 	bl	8008c78 <__aeabi_fmul>
 8005a04:	4601      	mov	r1, r0
 8005a06:	4680      	mov	r8, r0
 8005a08:	f003 f936 	bl	8008c78 <__aeabi_fmul>
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	4967      	ldr	r1, [pc, #412]	; (8005bac <atanf+0x1e4>)
 8005a10:	f003 f932 	bl	8008c78 <__aeabi_fmul>
 8005a14:	4966      	ldr	r1, [pc, #408]	; (8005bb0 <atanf+0x1e8>)
 8005a16:	f003 f827 	bl	8008a68 <__addsf3>
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f003 f92c 	bl	8008c78 <__aeabi_fmul>
 8005a20:	4964      	ldr	r1, [pc, #400]	; (8005bb4 <atanf+0x1ec>)
 8005a22:	f003 f821 	bl	8008a68 <__addsf3>
 8005a26:	4629      	mov	r1, r5
 8005a28:	f003 f926 	bl	8008c78 <__aeabi_fmul>
 8005a2c:	4962      	ldr	r1, [pc, #392]	; (8005bb8 <atanf+0x1f0>)
 8005a2e:	f003 f81b 	bl	8008a68 <__addsf3>
 8005a32:	4629      	mov	r1, r5
 8005a34:	f003 f920 	bl	8008c78 <__aeabi_fmul>
 8005a38:	4960      	ldr	r1, [pc, #384]	; (8005bbc <atanf+0x1f4>)
 8005a3a:	f003 f815 	bl	8008a68 <__addsf3>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f003 f91a 	bl	8008c78 <__aeabi_fmul>
 8005a44:	495e      	ldr	r1, [pc, #376]	; (8005bc0 <atanf+0x1f8>)
 8005a46:	f003 f80f 	bl	8008a68 <__addsf3>
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	f003 f914 	bl	8008c78 <__aeabi_fmul>
 8005a50:	495c      	ldr	r1, [pc, #368]	; (8005bc4 <atanf+0x1fc>)
 8005a52:	4680      	mov	r8, r0
 8005a54:	4628      	mov	r0, r5
 8005a56:	f003 f90f 	bl	8008c78 <__aeabi_fmul>
 8005a5a:	495b      	ldr	r1, [pc, #364]	; (8005bc8 <atanf+0x200>)
 8005a5c:	f003 f802 	bl	8008a64 <__aeabi_fsub>
 8005a60:	4629      	mov	r1, r5
 8005a62:	f003 f909 	bl	8008c78 <__aeabi_fmul>
 8005a66:	4959      	ldr	r1, [pc, #356]	; (8005bcc <atanf+0x204>)
 8005a68:	f002 fffc 	bl	8008a64 <__aeabi_fsub>
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f003 f903 	bl	8008c78 <__aeabi_fmul>
 8005a72:	4957      	ldr	r1, [pc, #348]	; (8005bd0 <atanf+0x208>)
 8005a74:	f002 fff6 	bl	8008a64 <__aeabi_fsub>
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f003 f8fd 	bl	8008c78 <__aeabi_fmul>
 8005a7e:	4955      	ldr	r1, [pc, #340]	; (8005bd4 <atanf+0x20c>)
 8005a80:	f002 fff0 	bl	8008a64 <__aeabi_fsub>
 8005a84:	4629      	mov	r1, r5
 8005a86:	f003 f8f7 	bl	8008c78 <__aeabi_fmul>
 8005a8a:	1c7b      	adds	r3, r7, #1
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	4640      	mov	r0, r8
 8005a90:	d04c      	beq.n	8005b2c <atanf+0x164>
 8005a92:	f002 ffe9 	bl	8008a68 <__addsf3>
 8005a96:	4621      	mov	r1, r4
 8005a98:	f003 f8ee 	bl	8008c78 <__aeabi_fmul>
 8005a9c:	4b4e      	ldr	r3, [pc, #312]	; (8005bd8 <atanf+0x210>)
 8005a9e:	4d4f      	ldr	r5, [pc, #316]	; (8005bdc <atanf+0x214>)
 8005aa0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8005aa4:	f002 ffde 	bl	8008a64 <__aeabi_fsub>
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f002 ffdb 	bl	8008a64 <__aeabi_fsub>
 8005aae:	4601      	mov	r1, r0
 8005ab0:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8005ab4:	f002 ffd6 	bl	8008a64 <__aeabi_fsub>
 8005ab8:	2e00      	cmp	r6, #0
 8005aba:	db30      	blt.n	8005b1e <atanf+0x156>
 8005abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac0:	4601      	mov	r1, r0
 8005ac2:	f002 ffd1 	bl	8008a68 <__addsf3>
 8005ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aca:	4945      	ldr	r1, [pc, #276]	; (8005be0 <atanf+0x218>)
 8005acc:	f002 ffcc 	bl	8008a68 <__addsf3>
 8005ad0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ad4:	f003 fa8c 	bl	8008ff0 <__aeabi_fcmpgt>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d08d      	beq.n	80059f8 <atanf+0x30>
 8005adc:	4620      	mov	r0, r4
 8005ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae2:	f000 f8c3 	bl	8005c6c <fabsf>
 8005ae6:	4b3f      	ldr	r3, [pc, #252]	; (8005be4 <atanf+0x21c>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	429d      	cmp	r5, r3
 8005aec:	dc29      	bgt.n	8005b42 <atanf+0x17a>
 8005aee:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005af2:	429d      	cmp	r5, r3
 8005af4:	dc44      	bgt.n	8005b80 <atanf+0x1b8>
 8005af6:	4601      	mov	r1, r0
 8005af8:	f002 ffb6 	bl	8008a68 <__addsf3>
 8005afc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b00:	f002 ffb0 	bl	8008a64 <__aeabi_fsub>
 8005b04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b08:	4605      	mov	r5, r0
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f002 ffac 	bl	8008a68 <__addsf3>
 8005b10:	4601      	mov	r1, r0
 8005b12:	4628      	mov	r0, r5
 8005b14:	f003 f964 	bl	8008de0 <__aeabi_fdiv>
 8005b18:	2700      	movs	r7, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	e76e      	b.n	80059fc <atanf+0x34>
 8005b1e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b26:	4830      	ldr	r0, [pc, #192]	; (8005be8 <atanf+0x220>)
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	f002 ff9c 	bl	8008a68 <__addsf3>
 8005b30:	4621      	mov	r1, r4
 8005b32:	f003 f8a1 	bl	8008c78 <__aeabi_fmul>
 8005b36:	4601      	mov	r1, r0
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f002 ff93 	bl	8008a64 <__aeabi_fsub>
 8005b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b42:	4b2a      	ldr	r3, [pc, #168]	; (8005bec <atanf+0x224>)
 8005b44:	429d      	cmp	r5, r3
 8005b46:	dc14      	bgt.n	8005b72 <atanf+0x1aa>
 8005b48:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005b4c:	f002 ff8a 	bl	8008a64 <__aeabi_fsub>
 8005b50:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005b54:	4605      	mov	r5, r0
 8005b56:	4620      	mov	r0, r4
 8005b58:	f003 f88e 	bl	8008c78 <__aeabi_fmul>
 8005b5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b60:	f002 ff82 	bl	8008a68 <__addsf3>
 8005b64:	4601      	mov	r1, r0
 8005b66:	4628      	mov	r0, r5
 8005b68:	f003 f93a 	bl	8008de0 <__aeabi_fdiv>
 8005b6c:	2702      	movs	r7, #2
 8005b6e:	4604      	mov	r4, r0
 8005b70:	e744      	b.n	80059fc <atanf+0x34>
 8005b72:	4601      	mov	r1, r0
 8005b74:	481e      	ldr	r0, [pc, #120]	; (8005bf0 <atanf+0x228>)
 8005b76:	f003 f933 	bl	8008de0 <__aeabi_fdiv>
 8005b7a:	2703      	movs	r7, #3
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	e73d      	b.n	80059fc <atanf+0x34>
 8005b80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b84:	f002 ff6e 	bl	8008a64 <__aeabi_fsub>
 8005b88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f002 ff6a 	bl	8008a68 <__addsf3>
 8005b94:	4601      	mov	r1, r0
 8005b96:	4628      	mov	r0, r5
 8005b98:	f003 f922 	bl	8008de0 <__aeabi_fdiv>
 8005b9c:	2701      	movs	r7, #1
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	e72c      	b.n	80059fc <atanf+0x34>
 8005ba2:	bf00      	nop
 8005ba4:	3fc90fdb 	.word	0x3fc90fdb
 8005ba8:	3edfffff 	.word	0x3edfffff
 8005bac:	3c8569d7 	.word	0x3c8569d7
 8005bb0:	3d4bda59 	.word	0x3d4bda59
 8005bb4:	3d886b35 	.word	0x3d886b35
 8005bb8:	3dba2e6e 	.word	0x3dba2e6e
 8005bbc:	3e124925 	.word	0x3e124925
 8005bc0:	3eaaaaab 	.word	0x3eaaaaab
 8005bc4:	bd15a221 	.word	0xbd15a221
 8005bc8:	3d6ef16b 	.word	0x3d6ef16b
 8005bcc:	3d9d8795 	.word	0x3d9d8795
 8005bd0:	3de38e38 	.word	0x3de38e38
 8005bd4:	3e4ccccd 	.word	0x3e4ccccd
 8005bd8:	0800b820 	.word	0x0800b820
 8005bdc:	0800b810 	.word	0x0800b810
 8005be0:	7149f2ca 	.word	0x7149f2ca
 8005be4:	3f97ffff 	.word	0x3f97ffff
 8005be8:	bfc90fdb 	.word	0xbfc90fdb
 8005bec:	401bffff 	.word	0x401bffff
 8005bf0:	bf800000 	.word	0xbf800000

08005bf4 <cosf>:
 8005bf4:	b500      	push	{lr}
 8005bf6:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <cosf+0x74>)
 8005bf8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	b083      	sub	sp, #12
 8005c00:	dd18      	ble.n	8005c34 <cosf+0x40>
 8005c02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005c06:	db05      	blt.n	8005c14 <cosf+0x20>
 8005c08:	4601      	mov	r1, r0
 8005c0a:	f002 ff2b 	bl	8008a64 <__aeabi_fsub>
 8005c0e:	b003      	add	sp, #12
 8005c10:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c14:	4669      	mov	r1, sp
 8005c16:	f000 fbed 	bl	80063f4 <__ieee754_rem_pio2f>
 8005c1a:	f000 0203 	and.w	r2, r0, #3
 8005c1e:	2a01      	cmp	r2, #1
 8005c20:	d015      	beq.n	8005c4e <cosf+0x5a>
 8005c22:	2a02      	cmp	r2, #2
 8005c24:	d00c      	beq.n	8005c40 <cosf+0x4c>
 8005c26:	b1ca      	cbz	r2, 8005c5c <cosf+0x68>
 8005c28:	2201      	movs	r2, #1
 8005c2a:	9901      	ldr	r1, [sp, #4]
 8005c2c:	9800      	ldr	r0, [sp, #0]
 8005c2e:	f002 f80d 	bl	8007c4c <__kernel_sinf>
 8005c32:	e7ec      	b.n	8005c0e <cosf+0x1a>
 8005c34:	2100      	movs	r1, #0
 8005c36:	f001 fbc1 	bl	80073bc <__kernel_cosf>
 8005c3a:	b003      	add	sp, #12
 8005c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c40:	9901      	ldr	r1, [sp, #4]
 8005c42:	9800      	ldr	r0, [sp, #0]
 8005c44:	f001 fbba 	bl	80073bc <__kernel_cosf>
 8005c48:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005c4c:	e7df      	b.n	8005c0e <cosf+0x1a>
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	9800      	ldr	r0, [sp, #0]
 8005c52:	f001 fffb 	bl	8007c4c <__kernel_sinf>
 8005c56:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005c5a:	e7d8      	b.n	8005c0e <cosf+0x1a>
 8005c5c:	9901      	ldr	r1, [sp, #4]
 8005c5e:	9800      	ldr	r0, [sp, #0]
 8005c60:	f001 fbac 	bl	80073bc <__kernel_cosf>
 8005c64:	e7d3      	b.n	8005c0e <cosf+0x1a>
 8005c66:	bf00      	nop
 8005c68:	3f490fd8 	.word	0x3f490fd8

08005c6c <fabsf>:
 8005c6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop

08005c74 <sinf>:
 8005c74:	b500      	push	{lr}
 8005c76:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <sinf+0x78>)
 8005c78:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	b083      	sub	sp, #12
 8005c80:	dd19      	ble.n	8005cb6 <sinf+0x42>
 8005c82:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005c86:	db05      	blt.n	8005c94 <sinf+0x20>
 8005c88:	4601      	mov	r1, r0
 8005c8a:	f002 feeb 	bl	8008a64 <__aeabi_fsub>
 8005c8e:	b003      	add	sp, #12
 8005c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c94:	4669      	mov	r1, sp
 8005c96:	f000 fbad 	bl	80063f4 <__ieee754_rem_pio2f>
 8005c9a:	f000 0003 	and.w	r0, r0, #3
 8005c9e:	2801      	cmp	r0, #1
 8005ca0:	d018      	beq.n	8005cd4 <sinf+0x60>
 8005ca2:	2802      	cmp	r0, #2
 8005ca4:	d00e      	beq.n	8005cc4 <sinf+0x50>
 8005ca6:	b1d0      	cbz	r0, 8005cde <sinf+0x6a>
 8005ca8:	9901      	ldr	r1, [sp, #4]
 8005caa:	9800      	ldr	r0, [sp, #0]
 8005cac:	f001 fb86 	bl	80073bc <__kernel_cosf>
 8005cb0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005cb4:	e7eb      	b.n	8005c8e <sinf+0x1a>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f001 ffc7 	bl	8007c4c <__kernel_sinf>
 8005cbe:	b003      	add	sp, #12
 8005cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	9901      	ldr	r1, [sp, #4]
 8005cc8:	9800      	ldr	r0, [sp, #0]
 8005cca:	f001 ffbf 	bl	8007c4c <__kernel_sinf>
 8005cce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005cd2:	e7dc      	b.n	8005c8e <sinf+0x1a>
 8005cd4:	9901      	ldr	r1, [sp, #4]
 8005cd6:	9800      	ldr	r0, [sp, #0]
 8005cd8:	f001 fb70 	bl	80073bc <__kernel_cosf>
 8005cdc:	e7d7      	b.n	8005c8e <sinf+0x1a>
 8005cde:	2201      	movs	r2, #1
 8005ce0:	9901      	ldr	r1, [sp, #4]
 8005ce2:	9800      	ldr	r0, [sp, #0]
 8005ce4:	f001 ffb2 	bl	8007c4c <__kernel_sinf>
 8005ce8:	e7d1      	b.n	8005c8e <sinf+0x1a>
 8005cea:	bf00      	nop
 8005cec:	3f490fd8 	.word	0x3f490fd8

08005cf0 <sqrt>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	b08b      	sub	sp, #44	; 0x2c
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	f000 fabf 	bl	800627c <__ieee754_sqrt>
 8005cfe:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <sqrt+0xb4>)
 8005d00:	4606      	mov	r6, r0
 8005d02:	f993 a000 	ldrsb.w	sl, [r3]
 8005d06:	460f      	mov	r7, r1
 8005d08:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005d0c:	d012      	beq.n	8005d34 <sqrt+0x44>
 8005d0e:	4622      	mov	r2, r4
 8005d10:	462b      	mov	r3, r5
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	f002 fe13 	bl	8008940 <__aeabi_dcmpun>
 8005d1a:	4683      	mov	fp, r0
 8005d1c:	b950      	cbnz	r0, 8005d34 <sqrt+0x44>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	4620      	mov	r0, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	f002 fddf 	bl	80088f0 <__aeabi_dcmplt>
 8005d32:	b920      	cbnz	r0, 8005d3e <sqrt+0x4e>
 8005d34:	4630      	mov	r0, r6
 8005d36:	4639      	mov	r1, r7
 8005d38:	b00b      	add	sp, #44	; 0x2c
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <sqrt+0xb8>)
 8005d42:	f8cd b020 	str.w	fp, [sp, #32]
 8005d46:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005d4a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d4e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005d52:	f1ba 0f00 	cmp.w	sl, #0
 8005d56:	d017      	beq.n	8005d88 <sqrt+0x98>
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4649      	mov	r1, r9
 8005d60:	f002 fc7e 	bl	8008660 <__aeabi_ddiv>
 8005d64:	f1ba 0f02 	cmp.w	sl, #2
 8005d68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d6c:	d10e      	bne.n	8005d8c <sqrt+0x9c>
 8005d6e:	f004 f90b 	bl	8009f88 <__errno>
 8005d72:	2321      	movs	r3, #33	; 0x21
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	9b08      	ldr	r3, [sp, #32]
 8005d78:	b973      	cbnz	r3, 8005d98 <sqrt+0xa8>
 8005d7a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8005d7e:	4630      	mov	r0, r6
 8005d80:	4639      	mov	r1, r7
 8005d82:	b00b      	add	sp, #44	; 0x2c
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d88:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d8c:	4668      	mov	r0, sp
 8005d8e:	f002 f863 	bl	8007e58 <matherr>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d1ef      	bne.n	8005d76 <sqrt+0x86>
 8005d96:	e7ea      	b.n	8005d6e <sqrt+0x7e>
 8005d98:	f004 f8f6 	bl	8009f88 <__errno>
 8005d9c:	9b08      	ldr	r3, [sp, #32]
 8005d9e:	6003      	str	r3, [r0, #0]
 8005da0:	e7eb      	b.n	8005d7a <sqrt+0x8a>
 8005da2:	bf00      	nop
 8005da4:	20000034 	.word	0x20000034
 8005da8:	0800b830 	.word	0x0800b830

08005dac <sqrtf>:
 8005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dae:	b08b      	sub	sp, #44	; 0x2c
 8005db0:	4604      	mov	r4, r0
 8005db2:	f000 fc8d 	bl	80066d0 <__ieee754_sqrtf>
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <sqrtf+0x98>)
 8005db8:	4606      	mov	r6, r0
 8005dba:	f993 5000 	ldrsb.w	r5, [r3]
 8005dbe:	1c6b      	adds	r3, r5, #1
 8005dc0:	d00a      	beq.n	8005dd8 <sqrtf+0x2c>
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f003 f91d 	bl	8009004 <__aeabi_fcmpun>
 8005dca:	4607      	mov	r7, r0
 8005dcc:	b920      	cbnz	r0, 8005dd8 <sqrtf+0x2c>
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f003 f8ef 	bl	8008fb4 <__aeabi_fcmplt>
 8005dd6:	b910      	cbnz	r0, 8005dde <sqrtf+0x32>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	b00b      	add	sp, #44	; 0x2c
 8005ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dde:	2201      	movs	r2, #1
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <sqrtf+0x9c>)
 8005de2:	4620      	mov	r0, r4
 8005de4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005de8:	9708      	str	r7, [sp, #32]
 8005dea:	f002 fabb 	bl	8008364 <__aeabi_f2d>
 8005dee:	2200      	movs	r2, #0
 8005df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	b1ad      	cbz	r5, 8005e28 <sqrtf+0x7c>
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f002 fc2e 	bl	8008660 <__aeabi_ddiv>
 8005e04:	2d02      	cmp	r5, #2
 8005e06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e0a:	d10f      	bne.n	8005e2c <sqrtf+0x80>
 8005e0c:	f004 f8bc 	bl	8009f88 <__errno>
 8005e10:	2321      	movs	r3, #33	; 0x21
 8005e12:	6003      	str	r3, [r0, #0]
 8005e14:	9b08      	ldr	r3, [sp, #32]
 8005e16:	b97b      	cbnz	r3, 8005e38 <sqrtf+0x8c>
 8005e18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1c:	f002 fdce 	bl	80089bc <__aeabi_d2f>
 8005e20:	4606      	mov	r6, r0
 8005e22:	4630      	mov	r0, r6
 8005e24:	b00b      	add	sp, #44	; 0x2c
 8005e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e2c:	4668      	mov	r0, sp
 8005e2e:	f002 f813 	bl	8007e58 <matherr>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d1ee      	bne.n	8005e14 <sqrtf+0x68>
 8005e36:	e7e9      	b.n	8005e0c <sqrtf+0x60>
 8005e38:	f004 f8a6 	bl	8009f88 <__errno>
 8005e3c:	9b08      	ldr	r3, [sp, #32]
 8005e3e:	6003      	str	r3, [r0, #0]
 8005e40:	e7ea      	b.n	8005e18 <sqrtf+0x6c>
 8005e42:	bf00      	nop
 8005e44:	20000034 	.word	0x20000034
 8005e48:	0800b838 	.word	0x0800b838
 8005e4c:	00000000 	.word	0x00000000

08005e50 <__ieee754_rem_pio2>:
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	4c98      	ldr	r4, [pc, #608]	; (80060b8 <__ieee754_rem_pio2+0x268>)
 8005e56:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005e5a:	42a7      	cmp	r7, r4
 8005e5c:	b08f      	sub	sp, #60	; 0x3c
 8005e5e:	f340 808a 	ble.w	8005f76 <__ieee754_rem_pio2+0x126>
 8005e62:	4614      	mov	r4, r2
 8005e64:	4a95      	ldr	r2, [pc, #596]	; (80060bc <__ieee754_rem_pio2+0x26c>)
 8005e66:	460d      	mov	r5, r1
 8005e68:	4297      	cmp	r7, r2
 8005e6a:	dc26      	bgt.n	8005eba <__ieee754_rem_pio2+0x6a>
 8005e6c:	a388      	add	r3, pc, #544	; (adr r3, 8006090 <__ieee754_rem_pio2+0x240>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	2900      	cmp	r1, #0
 8005e74:	f340 81a8 	ble.w	80061c8 <__ieee754_rem_pio2+0x378>
 8005e78:	f002 f914 	bl	80080a4 <__aeabi_dsub>
 8005e7c:	4b90      	ldr	r3, [pc, #576]	; (80060c0 <__ieee754_rem_pio2+0x270>)
 8005e7e:	4680      	mov	r8, r0
 8005e80:	429f      	cmp	r7, r3
 8005e82:	4689      	mov	r9, r1
 8005e84:	f000 808c 	beq.w	8005fa0 <__ieee754_rem_pio2+0x150>
 8005e88:	a383      	add	r3, pc, #524	; (adr r3, 8006098 <__ieee754_rem_pio2+0x248>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f002 f909 	bl	80080a4 <__aeabi_dsub>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4640      	mov	r0, r8
 8005e98:	e9c4 2300 	strd	r2, r3, [r4]
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	f002 f901 	bl	80080a4 <__aeabi_dsub>
 8005ea2:	a37d      	add	r3, pc, #500	; (adr r3, 8006098 <__ieee754_rem_pio2+0x248>)
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f002 f8fc 	bl	80080a4 <__aeabi_dsub>
 8005eac:	2601      	movs	r6, #1
 8005eae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	b00f      	add	sp, #60	; 0x3c
 8005eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eba:	4a82      	ldr	r2, [pc, #520]	; (80060c4 <__ieee754_rem_pio2+0x274>)
 8005ebc:	4297      	cmp	r7, r2
 8005ebe:	f340 808c 	ble.w	8005fda <__ieee754_rem_pio2+0x18a>
 8005ec2:	4a81      	ldr	r2, [pc, #516]	; (80060c8 <__ieee754_rem_pio2+0x278>)
 8005ec4:	4297      	cmp	r7, r2
 8005ec6:	dc61      	bgt.n	8005f8c <__ieee754_rem_pio2+0x13c>
 8005ec8:	ea4f 5a27 	mov.w	sl, r7, asr #20
 8005ecc:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 8005ed0:	eba7 510a 	sub.w	r1, r7, sl, lsl #20
 8005ed4:	4689      	mov	r9, r1
 8005ed6:	4680      	mov	r8, r0
 8005ed8:	f002 fd48 	bl	800896c <__aeabi_d2iz>
 8005edc:	f002 fa30 	bl	8008340 <__aeabi_i2d>
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8005ef0:	f002 f8d8 	bl	80080a4 <__aeabi_dsub>
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4b75      	ldr	r3, [pc, #468]	; (80060cc <__ieee754_rem_pio2+0x27c>)
 8005ef8:	f002 fa88 	bl	800840c <__aeabi_dmul>
 8005efc:	4689      	mov	r9, r1
 8005efe:	4680      	mov	r8, r0
 8005f00:	f002 fd34 	bl	800896c <__aeabi_d2iz>
 8005f04:	f002 fa1c 	bl	8008340 <__aeabi_i2d>
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	4640      	mov	r0, r8
 8005f12:	4649      	mov	r1, r9
 8005f14:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8005f18:	f002 f8c4 	bl	80080a4 <__aeabi_dsub>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4b6b      	ldr	r3, [pc, #428]	; (80060cc <__ieee754_rem_pio2+0x27c>)
 8005f20:	f002 fa74 	bl	800840c <__aeabi_dmul>
 8005f24:	2200      	movs	r2, #0
 8005f26:	2300      	movs	r3, #0
 8005f28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f2c:	f002 fcd6 	bl	80088dc <__aeabi_dcmpeq>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f000 8167 	beq.w	8006204 <__ieee754_rem_pio2+0x3b4>
 8005f36:	2300      	movs	r3, #0
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f002 fccd 	bl	80088dc <__aeabi_dcmpeq>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	bf14      	ite	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	2302      	moveq	r3, #2
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	4960      	ldr	r1, [pc, #384]	; (80060d0 <__ieee754_rem_pio2+0x280>)
 8005f4e:	4652      	mov	r2, sl
 8005f50:	e88d 0003 	stmia.w	sp, {r0, r1}
 8005f54:	4621      	mov	r1, r4
 8005f56:	a808      	add	r0, sp, #32
 8005f58:	f000 fd32 	bl	80069c0 <__kernel_rem_pio2>
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	4606      	mov	r6, r0
 8005f60:	da10      	bge.n	8005f84 <__ieee754_rem_pio2+0x134>
 8005f62:	6862      	ldr	r2, [r4, #4]
 8005f64:	68e3      	ldr	r3, [r4, #12]
 8005f66:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8005f6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	4246      	negs	r6, r0
 8005f70:	6062      	str	r2, [r4, #4]
 8005f72:	60e3      	str	r3, [r4, #12]
 8005f74:	e006      	b.n	8005f84 <__ieee754_rem_pio2+0x134>
 8005f76:	2400      	movs	r4, #0
 8005f78:	2500      	movs	r5, #0
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	e9c2 4502 	strd	r4, r5, [r2, #8]
 8005f80:	e9c2 0100 	strd	r0, r1, [r2]
 8005f84:	4630      	mov	r0, r6
 8005f86:	b00f      	add	sp, #60	; 0x3c
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	f002 f888 	bl	80080a4 <__aeabi_dsub>
 8005f94:	2600      	movs	r6, #0
 8005f96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f9a:	e9c4 0100 	strd	r0, r1, [r4]
 8005f9e:	e7f1      	b.n	8005f84 <__ieee754_rem_pio2+0x134>
 8005fa0:	a33f      	add	r3, pc, #252	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x250>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f002 f87d 	bl	80080a4 <__aeabi_dsub>
 8005faa:	a33f      	add	r3, pc, #252	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x258>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	460f      	mov	r7, r1
 8005fb4:	f002 f876 	bl	80080a4 <__aeabi_dsub>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	e9c4 2300 	strd	r2, r3, [r4]
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f002 f86e 	bl	80080a4 <__aeabi_dsub>
 8005fc8:	a337      	add	r3, pc, #220	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x258>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f002 f869 	bl	80080a4 <__aeabi_dsub>
 8005fd2:	2601      	movs	r6, #1
 8005fd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fd8:	e7d4      	b.n	8005f84 <__ieee754_rem_pio2+0x134>
 8005fda:	f001 fead 	bl	8007d38 <fabs>
 8005fde:	a334      	add	r3, pc, #208	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x260>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	4689      	mov	r9, r1
 8005fe8:	f002 fa10 	bl	800840c <__aeabi_dmul>
 8005fec:	2200      	movs	r2, #0
 8005fee:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <__ieee754_rem_pio2+0x284>)
 8005ff0:	f002 f85a 	bl	80080a8 <__adddf3>
 8005ff4:	f002 fcba 	bl	800896c <__aeabi_d2iz>
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	f002 f9a1 	bl	8008340 <__aeabi_i2d>
 8005ffe:	a324      	add	r3, pc, #144	; (adr r3, 8006090 <__ieee754_rem_pio2+0x240>)
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006008:	f002 fa00 	bl	800840c <__aeabi_dmul>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f002 f846 	bl	80080a4 <__aeabi_dsub>
 8006018:	a31f      	add	r3, pc, #124	; (adr r3, 8006098 <__ieee754_rem_pio2+0x248>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	4682      	mov	sl, r0
 8006020:	468b      	mov	fp, r1
 8006022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006026:	f002 f9f1 	bl	800840c <__aeabi_dmul>
 800602a:	2e1f      	cmp	r6, #31
 800602c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006030:	dc54      	bgt.n	80060dc <__ieee754_rem_pio2+0x28c>
 8006032:	4b29      	ldr	r3, [pc, #164]	; (80060d8 <__ieee754_rem_pio2+0x288>)
 8006034:	1e72      	subs	r2, r6, #1
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	429f      	cmp	r7, r3
 800603c:	d04e      	beq.n	80060dc <__ieee754_rem_pio2+0x28c>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4650      	mov	r0, sl
 8006044:	4659      	mov	r1, fp
 8006046:	f002 f82d 	bl	80080a4 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4681      	mov	r9, r0
 8006050:	4688      	mov	r8, r1
 8006052:	e9c4 2300 	strd	r2, r3, [r4]
 8006056:	464a      	mov	r2, r9
 8006058:	4643      	mov	r3, r8
 800605a:	4650      	mov	r0, sl
 800605c:	4659      	mov	r1, fp
 800605e:	f002 f821 	bl	80080a4 <__aeabi_dsub>
 8006062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006066:	f002 f81d 	bl	80080a4 <__aeabi_dsub>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	2d00      	cmp	r5, #0
 8006070:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006074:	da86      	bge.n	8005f84 <__ieee754_rem_pio2+0x134>
 8006076:	464a      	mov	r2, r9
 8006078:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800607c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006080:	e884 000c 	stmia.w	r4, {r2, r3}
 8006084:	60e1      	str	r1, [r4, #12]
 8006086:	60a0      	str	r0, [r4, #8]
 8006088:	4276      	negs	r6, r6
 800608a:	e77b      	b.n	8005f84 <__ieee754_rem_pio2+0x134>
 800608c:	f3af 8000 	nop.w
 8006090:	54400000 	.word	0x54400000
 8006094:	3ff921fb 	.word	0x3ff921fb
 8006098:	1a626331 	.word	0x1a626331
 800609c:	3dd0b461 	.word	0x3dd0b461
 80060a0:	1a600000 	.word	0x1a600000
 80060a4:	3dd0b461 	.word	0x3dd0b461
 80060a8:	2e037073 	.word	0x2e037073
 80060ac:	3ba3198a 	.word	0x3ba3198a
 80060b0:	6dc9c883 	.word	0x6dc9c883
 80060b4:	3fe45f30 	.word	0x3fe45f30
 80060b8:	3fe921fb 	.word	0x3fe921fb
 80060bc:	4002d97b 	.word	0x4002d97b
 80060c0:	3ff921fb 	.word	0x3ff921fb
 80060c4:	413921fb 	.word	0x413921fb
 80060c8:	7fefffff 	.word	0x7fefffff
 80060cc:	41700000 	.word	0x41700000
 80060d0:	0800b8c0 	.word	0x0800b8c0
 80060d4:	3fe00000 	.word	0x3fe00000
 80060d8:	0800b840 	.word	0x0800b840
 80060dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	f001 ffde 	bl	80080a4 <__aeabi_dsub>
 80060e8:	153f      	asrs	r7, r7, #20
 80060ea:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80060ee:	1afb      	subs	r3, r7, r3
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	4681      	mov	r9, r0
 80060f4:	4688      	mov	r8, r1
 80060f6:	e9c4 0100 	strd	r0, r1, [r4]
 80060fa:	ddac      	ble.n	8006056 <__ieee754_rem_pio2+0x206>
 80060fc:	a354      	add	r3, pc, #336	; (adr r3, 8006250 <__ieee754_rem_pio2+0x400>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006106:	f002 f981 	bl	800840c <__aeabi_dmul>
 800610a:	4680      	mov	r8, r0
 800610c:	4689      	mov	r9, r1
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4650      	mov	r0, sl
 8006114:	4659      	mov	r1, fp
 8006116:	f001 ffc5 	bl	80080a4 <__aeabi_dsub>
 800611a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4650      	mov	r0, sl
 8006124:	4659      	mov	r1, fp
 8006126:	f001 ffbd 	bl	80080a4 <__aeabi_dsub>
 800612a:	4642      	mov	r2, r8
 800612c:	464b      	mov	r3, r9
 800612e:	f001 ffb9 	bl	80080a4 <__aeabi_dsub>
 8006132:	a349      	add	r3, pc, #292	; (adr r3, 8006258 <__ieee754_rem_pio2+0x408>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	4680      	mov	r8, r0
 800613a:	4689      	mov	r9, r1
 800613c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006140:	f002 f964 	bl	800840c <__aeabi_dmul>
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	f001 ffac 	bl	80080a4 <__aeabi_dsub>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006158:	f001 ffa4 	bl	80080a4 <__aeabi_dsub>
 800615c:	460b      	mov	r3, r1
 800615e:	4602      	mov	r2, r0
 8006160:	4688      	mov	r8, r1
 8006162:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006166:	1a7f      	subs	r7, r7, r1
 8006168:	2f31      	cmp	r7, #49	; 0x31
 800616a:	4681      	mov	r9, r0
 800616c:	e9c4 2300 	strd	r2, r3, [r4]
 8006170:	dd68      	ble.n	8006244 <__ieee754_rem_pio2+0x3f4>
 8006172:	a33b      	add	r3, pc, #236	; (adr r3, 8006260 <__ieee754_rem_pio2+0x410>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800617c:	f002 f946 	bl	800840c <__aeabi_dmul>
 8006180:	4680      	mov	r8, r0
 8006182:	4689      	mov	r9, r1
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618c:	f001 ff8a 	bl	80080a4 <__aeabi_dsub>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4682      	mov	sl, r0
 8006196:	468b      	mov	fp, r1
 8006198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800619c:	f001 ff82 	bl	80080a4 <__aeabi_dsub>
 80061a0:	4642      	mov	r2, r8
 80061a2:	464b      	mov	r3, r9
 80061a4:	f001 ff7e 	bl	80080a4 <__aeabi_dsub>
 80061a8:	a32f      	add	r3, pc, #188	; (adr r3, 8006268 <__ieee754_rem_pio2+0x418>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	4680      	mov	r8, r0
 80061b0:	4689      	mov	r9, r1
 80061b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b6:	f002 f929 	bl	800840c <__aeabi_dmul>
 80061ba:	4642      	mov	r2, r8
 80061bc:	464b      	mov	r3, r9
 80061be:	f001 ff71 	bl	80080a4 <__aeabi_dsub>
 80061c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c6:	e73a      	b.n	800603e <__ieee754_rem_pio2+0x1ee>
 80061c8:	f001 ff6e 	bl	80080a8 <__adddf3>
 80061cc:	4b2a      	ldr	r3, [pc, #168]	; (8006278 <__ieee754_rem_pio2+0x428>)
 80061ce:	4680      	mov	r8, r0
 80061d0:	429f      	cmp	r7, r3
 80061d2:	4689      	mov	r9, r1
 80061d4:	d018      	beq.n	8006208 <__ieee754_rem_pio2+0x3b8>
 80061d6:	a326      	add	r3, pc, #152	; (adr r3, 8006270 <__ieee754_rem_pio2+0x420>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f001 ff64 	bl	80080a8 <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4640      	mov	r0, r8
 80061e6:	e9c4 2300 	strd	r2, r3, [r4]
 80061ea:	4649      	mov	r1, r9
 80061ec:	f001 ff5a 	bl	80080a4 <__aeabi_dsub>
 80061f0:	a31f      	add	r3, pc, #124	; (adr r3, 8006270 <__ieee754_rem_pio2+0x420>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f001 ff57 	bl	80080a8 <__adddf3>
 80061fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80061fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006202:	e6bf      	b.n	8005f84 <__ieee754_rem_pio2+0x134>
 8006204:	2303      	movs	r3, #3
 8006206:	e6a0      	b.n	8005f4a <__ieee754_rem_pio2+0xfa>
 8006208:	a311      	add	r3, pc, #68	; (adr r3, 8006250 <__ieee754_rem_pio2+0x400>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f001 ff4b 	bl	80080a8 <__adddf3>
 8006212:	a311      	add	r3, pc, #68	; (adr r3, 8006258 <__ieee754_rem_pio2+0x408>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	f001 ff44 	bl	80080a8 <__adddf3>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4630      	mov	r0, r6
 8006226:	e9c4 2300 	strd	r2, r3, [r4]
 800622a:	4639      	mov	r1, r7
 800622c:	f001 ff3a 	bl	80080a4 <__aeabi_dsub>
 8006230:	a309      	add	r3, pc, #36	; (adr r3, 8006258 <__ieee754_rem_pio2+0x408>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f001 ff37 	bl	80080a8 <__adddf3>
 800623a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800623e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006242:	e69f      	b.n	8005f84 <__ieee754_rem_pio2+0x134>
 8006244:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8006248:	e705      	b.n	8006056 <__ieee754_rem_pio2+0x206>
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w
 8006250:	1a600000 	.word	0x1a600000
 8006254:	3dd0b461 	.word	0x3dd0b461
 8006258:	2e037073 	.word	0x2e037073
 800625c:	3ba3198a 	.word	0x3ba3198a
 8006260:	2e000000 	.word	0x2e000000
 8006264:	3ba3198a 	.word	0x3ba3198a
 8006268:	252049c1 	.word	0x252049c1
 800626c:	397b839a 	.word	0x397b839a
 8006270:	1a626331 	.word	0x1a626331
 8006274:	3dd0b461 	.word	0x3dd0b461
 8006278:	3ff921fb 	.word	0x3ff921fb

0800627c <__ieee754_sqrt>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	4f5b      	ldr	r7, [pc, #364]	; (80063f0 <__ieee754_sqrt+0x174>)
 8006282:	4605      	mov	r5, r0
 8006284:	438f      	bics	r7, r1
 8006286:	460c      	mov	r4, r1
 8006288:	f000 8092 	beq.w	80063b0 <__ieee754_sqrt+0x134>
 800628c:	2900      	cmp	r1, #0
 800628e:	460b      	mov	r3, r1
 8006290:	4602      	mov	r2, r0
 8006292:	dd6f      	ble.n	8006374 <__ieee754_sqrt+0xf8>
 8006294:	150f      	asrs	r7, r1, #20
 8006296:	d07b      	beq.n	8006390 <__ieee754_sqrt+0x114>
 8006298:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800629c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a0:	07f8      	lsls	r0, r7, #31
 80062a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a6:	d45c      	bmi.n	8006362 <__ieee754_sqrt+0xe6>
 80062a8:	2600      	movs	r6, #0
 80062aa:	2016      	movs	r0, #22
 80062ac:	46b6      	mov	lr, r6
 80062ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062b2:	eb03 74d2 	add.w	r4, r3, r2, lsr #31
 80062b6:	107f      	asrs	r7, r7, #1
 80062b8:	4423      	add	r3, r4
 80062ba:	0052      	lsls	r2, r2, #1
 80062bc:	eb0e 0401 	add.w	r4, lr, r1
 80062c0:	429c      	cmp	r4, r3
 80062c2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80062c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80062ca:	dc03      	bgt.n	80062d4 <__ieee754_sqrt+0x58>
 80062cc:	1b1b      	subs	r3, r3, r4
 80062ce:	eb04 0e01 	add.w	lr, r4, r1
 80062d2:	440e      	add	r6, r1
 80062d4:	3801      	subs	r0, #1
 80062d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80062da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80062de:	d1ed      	bne.n	80062bc <__ieee754_sqrt+0x40>
 80062e0:	2420      	movs	r4, #32
 80062e2:	4684      	mov	ip, r0
 80062e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80062e8:	e009      	b.n	80062fe <__ieee754_sqrt+0x82>
 80062ea:	d020      	beq.n	800632e <__ieee754_sqrt+0xb2>
 80062ec:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80062f0:	3c01      	subs	r4, #1
 80062f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80062f6:	442b      	add	r3, r5
 80062f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80062fc:	d020      	beq.n	8006340 <__ieee754_sqrt+0xc4>
 80062fe:	4573      	cmp	r3, lr
 8006300:	eb01 050c 	add.w	r5, r1, ip
 8006304:	ddf1      	ble.n	80062ea <__ieee754_sqrt+0x6e>
 8006306:	2d00      	cmp	r5, #0
 8006308:	eb05 0c01 	add.w	ip, r5, r1
 800630c:	db09      	blt.n	8006322 <__ieee754_sqrt+0xa6>
 800630e:	46f0      	mov	r8, lr
 8006310:	4295      	cmp	r5, r2
 8006312:	eba3 030e 	sub.w	r3, r3, lr
 8006316:	d900      	bls.n	800631a <__ieee754_sqrt+0x9e>
 8006318:	3b01      	subs	r3, #1
 800631a:	46c6      	mov	lr, r8
 800631c:	1b52      	subs	r2, r2, r5
 800631e:	4408      	add	r0, r1
 8006320:	e7e4      	b.n	80062ec <__ieee754_sqrt+0x70>
 8006322:	f1bc 0f00 	cmp.w	ip, #0
 8006326:	dbf2      	blt.n	800630e <__ieee754_sqrt+0x92>
 8006328:	f10e 0801 	add.w	r8, lr, #1
 800632c:	e7f0      	b.n	8006310 <__ieee754_sqrt+0x94>
 800632e:	4295      	cmp	r5, r2
 8006330:	d8dc      	bhi.n	80062ec <__ieee754_sqrt+0x70>
 8006332:	2d00      	cmp	r5, #0
 8006334:	eb05 0c01 	add.w	ip, r5, r1
 8006338:	db44      	blt.n	80063c4 <__ieee754_sqrt+0x148>
 800633a:	4698      	mov	r8, r3
 800633c:	2300      	movs	r3, #0
 800633e:	e7ec      	b.n	800631a <__ieee754_sqrt+0x9e>
 8006340:	4313      	orrs	r3, r2
 8006342:	d113      	bne.n	800636c <__ieee754_sqrt+0xf0>
 8006344:	0840      	lsrs	r0, r0, #1
 8006346:	1073      	asrs	r3, r6, #1
 8006348:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800634c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006350:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 8006354:	4649      	mov	r1, r9
 8006356:	07f2      	lsls	r2, r6, #31
 8006358:	bf48      	it	mi
 800635a:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006368:	0052      	lsls	r2, r2, #1
 800636a:	e79d      	b.n	80062a8 <__ieee754_sqrt+0x2c>
 800636c:	1c41      	adds	r1, r0, #1
 800636e:	d02d      	beq.n	80063cc <__ieee754_sqrt+0x150>
 8006370:	3001      	adds	r0, #1
 8006372:	e7e7      	b.n	8006344 <__ieee754_sqrt+0xc8>
 8006374:	4606      	mov	r6, r0
 8006376:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800637a:	433e      	orrs	r6, r7
 800637c:	d0ef      	beq.n	800635e <__ieee754_sqrt+0xe2>
 800637e:	bb69      	cbnz	r1, 80063dc <__ieee754_sqrt+0x160>
 8006380:	460f      	mov	r7, r1
 8006382:	0ad3      	lsrs	r3, r2, #11
 8006384:	3f15      	subs	r7, #21
 8006386:	0552      	lsls	r2, r2, #21
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0fa      	beq.n	8006382 <__ieee754_sqrt+0x106>
 800638c:	02de      	lsls	r6, r3, #11
 800638e:	d420      	bmi.n	80063d2 <__ieee754_sqrt+0x156>
 8006390:	2400      	movs	r4, #0
 8006392:	e000      	b.n	8006396 <__ieee754_sqrt+0x11a>
 8006394:	4604      	mov	r4, r0
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	02dd      	lsls	r5, r3, #11
 800639a:	f104 0001 	add.w	r0, r4, #1
 800639e:	d5f9      	bpl.n	8006394 <__ieee754_sqrt+0x118>
 80063a0:	f1c0 0120 	rsb	r1, r0, #32
 80063a4:	fa22 f101 	lsr.w	r1, r2, r1
 80063a8:	430b      	orrs	r3, r1
 80063aa:	1b3f      	subs	r7, r7, r4
 80063ac:	4082      	lsls	r2, r0
 80063ae:	e773      	b.n	8006298 <__ieee754_sqrt+0x1c>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	f002 f82a 	bl	800840c <__aeabi_dmul>
 80063b8:	462a      	mov	r2, r5
 80063ba:	4623      	mov	r3, r4
 80063bc:	f001 fe74 	bl	80080a8 <__adddf3>
 80063c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c4:	f1bc 0f00 	cmp.w	ip, #0
 80063c8:	daae      	bge.n	8006328 <__ieee754_sqrt+0xac>
 80063ca:	e7b6      	b.n	800633a <__ieee754_sqrt+0xbe>
 80063cc:	3601      	adds	r6, #1
 80063ce:	4620      	mov	r0, r4
 80063d0:	e7b9      	b.n	8006346 <__ieee754_sqrt+0xca>
 80063d2:	2000      	movs	r0, #0
 80063d4:	2120      	movs	r1, #32
 80063d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063da:	e7e3      	b.n	80063a4 <__ieee754_sqrt+0x128>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	f001 fe60 	bl	80080a4 <__aeabi_dsub>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	f002 f93a 	bl	8008660 <__aeabi_ddiv>
 80063ec:	e7b7      	b.n	800635e <__ieee754_sqrt+0xe2>
 80063ee:	bf00      	nop
 80063f0:	7ff00000 	.word	0x7ff00000

080063f4 <__ieee754_rem_pio2f>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	4aa8      	ldr	r2, [pc, #672]	; (800669c <__ieee754_rem_pio2f+0x2a8>)
 80063fa:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80063fe:	4294      	cmp	r4, r2
 8006400:	b089      	sub	sp, #36	; 0x24
 8006402:	dd6e      	ble.n	80064e2 <__ieee754_rem_pio2f+0xee>
 8006404:	4aa6      	ldr	r2, [pc, #664]	; (80066a0 <__ieee754_rem_pio2f+0x2ac>)
 8006406:	4606      	mov	r6, r0
 8006408:	4294      	cmp	r4, r2
 800640a:	460d      	mov	r5, r1
 800640c:	dc1c      	bgt.n	8006448 <__ieee754_rem_pio2f+0x54>
 800640e:	2800      	cmp	r0, #0
 8006410:	49a4      	ldr	r1, [pc, #656]	; (80066a4 <__ieee754_rem_pio2f+0x2b0>)
 8006412:	f340 80fa 	ble.w	800660a <__ieee754_rem_pio2f+0x216>
 8006416:	f002 fb25 	bl	8008a64 <__aeabi_fsub>
 800641a:	4ba3      	ldr	r3, [pc, #652]	; (80066a8 <__ieee754_rem_pio2f+0x2b4>)
 800641c:	f024 040f 	bic.w	r4, r4, #15
 8006420:	429c      	cmp	r4, r3
 8006422:	4606      	mov	r6, r0
 8006424:	d06c      	beq.n	8006500 <__ieee754_rem_pio2f+0x10c>
 8006426:	49a1      	ldr	r1, [pc, #644]	; (80066ac <__ieee754_rem_pio2f+0x2b8>)
 8006428:	f002 fb1c 	bl	8008a64 <__aeabi_fsub>
 800642c:	4601      	mov	r1, r0
 800642e:	4630      	mov	r0, r6
 8006430:	6029      	str	r1, [r5, #0]
 8006432:	f002 fb17 	bl	8008a64 <__aeabi_fsub>
 8006436:	499d      	ldr	r1, [pc, #628]	; (80066ac <__ieee754_rem_pio2f+0x2b8>)
 8006438:	f002 fb14 	bl	8008a64 <__aeabi_fsub>
 800643c:	2701      	movs	r7, #1
 800643e:	6068      	str	r0, [r5, #4]
 8006440:	4638      	mov	r0, r7
 8006442:	b009      	add	sp, #36	; 0x24
 8006444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006448:	4a99      	ldr	r2, [pc, #612]	; (80066b0 <__ieee754_rem_pio2f+0x2bc>)
 800644a:	4294      	cmp	r4, r2
 800644c:	dd6a      	ble.n	8006524 <__ieee754_rem_pio2f+0x130>
 800644e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006452:	da4e      	bge.n	80064f2 <__ieee754_rem_pio2f+0xfe>
 8006454:	15e7      	asrs	r7, r4, #23
 8006456:	3f86      	subs	r7, #134	; 0x86
 8006458:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
 800645c:	4620      	mov	r0, r4
 800645e:	f002 fde7 	bl	8009030 <__aeabi_f2iz>
 8006462:	f002 fbb5 	bl	8008bd0 <__aeabi_i2f>
 8006466:	4603      	mov	r3, r0
 8006468:	4620      	mov	r0, r4
 800646a:	4619      	mov	r1, r3
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	f002 faf9 	bl	8008a64 <__aeabi_fsub>
 8006472:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006476:	f002 fbff 	bl	8008c78 <__aeabi_fmul>
 800647a:	4680      	mov	r8, r0
 800647c:	f002 fdd8 	bl	8009030 <__aeabi_f2iz>
 8006480:	f002 fba6 	bl	8008bd0 <__aeabi_i2f>
 8006484:	4604      	mov	r4, r0
 8006486:	4640      	mov	r0, r8
 8006488:	4621      	mov	r1, r4
 800648a:	9406      	str	r4, [sp, #24]
 800648c:	f002 faea 	bl	8008a64 <__aeabi_fsub>
 8006490:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006494:	f002 fbf0 	bl	8008c78 <__aeabi_fmul>
 8006498:	2100      	movs	r1, #0
 800649a:	9007      	str	r0, [sp, #28]
 800649c:	f002 fd80 	bl	8008fa0 <__aeabi_fcmpeq>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f000 80c9 	beq.w	8006638 <__ieee754_rem_pio2f+0x244>
 80064a6:	4620      	mov	r0, r4
 80064a8:	2100      	movs	r1, #0
 80064aa:	f002 fd79 	bl	8008fa0 <__aeabi_fcmpeq>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2302      	moveq	r3, #2
 80064b6:	2002      	movs	r0, #2
 80064b8:	497e      	ldr	r1, [pc, #504]	; (80066b4 <__ieee754_rem_pio2f+0x2c0>)
 80064ba:	463a      	mov	r2, r7
 80064bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80064c0:	4629      	mov	r1, r5
 80064c2:	a805      	add	r0, sp, #20
 80064c4:	f001 f83e 	bl	8007544 <__kernel_rem_pio2f>
 80064c8:	2e00      	cmp	r6, #0
 80064ca:	4607      	mov	r7, r0
 80064cc:	da0d      	bge.n	80064ea <__ieee754_rem_pio2f+0xf6>
 80064ce:	e895 000c 	ldmia.w	r5, {r2, r3}
 80064d2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80064d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064da:	4247      	negs	r7, r0
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	606b      	str	r3, [r5, #4]
 80064e0:	e003      	b.n	80064ea <__ieee754_rem_pio2f+0xf6>
 80064e2:	2200      	movs	r2, #0
 80064e4:	2700      	movs	r7, #0
 80064e6:	6008      	str	r0, [r1, #0]
 80064e8:	604a      	str	r2, [r1, #4]
 80064ea:	4638      	mov	r0, r7
 80064ec:	b009      	add	sp, #36	; 0x24
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	4601      	mov	r1, r0
 80064f4:	f002 fab6 	bl	8008a64 <__aeabi_fsub>
 80064f8:	2700      	movs	r7, #0
 80064fa:	6068      	str	r0, [r5, #4]
 80064fc:	6028      	str	r0, [r5, #0]
 80064fe:	e7f4      	b.n	80064ea <__ieee754_rem_pio2f+0xf6>
 8006500:	496d      	ldr	r1, [pc, #436]	; (80066b8 <__ieee754_rem_pio2f+0x2c4>)
 8006502:	f002 faaf 	bl	8008a64 <__aeabi_fsub>
 8006506:	496d      	ldr	r1, [pc, #436]	; (80066bc <__ieee754_rem_pio2f+0x2c8>)
 8006508:	4604      	mov	r4, r0
 800650a:	f002 faab 	bl	8008a64 <__aeabi_fsub>
 800650e:	4601      	mov	r1, r0
 8006510:	4620      	mov	r0, r4
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	f002 faa6 	bl	8008a64 <__aeabi_fsub>
 8006518:	4968      	ldr	r1, [pc, #416]	; (80066bc <__ieee754_rem_pio2f+0x2c8>)
 800651a:	f002 faa3 	bl	8008a64 <__aeabi_fsub>
 800651e:	2701      	movs	r7, #1
 8006520:	6068      	str	r0, [r5, #4]
 8006522:	e7e2      	b.n	80064ea <__ieee754_rem_pio2f+0xf6>
 8006524:	f7ff fba2 	bl	8005c6c <fabsf>
 8006528:	4965      	ldr	r1, [pc, #404]	; (80066c0 <__ieee754_rem_pio2f+0x2cc>)
 800652a:	4680      	mov	r8, r0
 800652c:	f002 fba4 	bl	8008c78 <__aeabi_fmul>
 8006530:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006534:	f002 fa98 	bl	8008a68 <__addsf3>
 8006538:	f002 fd7a 	bl	8009030 <__aeabi_f2iz>
 800653c:	4607      	mov	r7, r0
 800653e:	f002 fb47 	bl	8008bd0 <__aeabi_i2f>
 8006542:	4958      	ldr	r1, [pc, #352]	; (80066a4 <__ieee754_rem_pio2f+0x2b0>)
 8006544:	4683      	mov	fp, r0
 8006546:	f002 fb97 	bl	8008c78 <__aeabi_fmul>
 800654a:	4601      	mov	r1, r0
 800654c:	4640      	mov	r0, r8
 800654e:	f002 fa89 	bl	8008a64 <__aeabi_fsub>
 8006552:	4956      	ldr	r1, [pc, #344]	; (80066ac <__ieee754_rem_pio2f+0x2b8>)
 8006554:	4681      	mov	r9, r0
 8006556:	4658      	mov	r0, fp
 8006558:	f002 fb8e 	bl	8008c78 <__aeabi_fmul>
 800655c:	2f1f      	cmp	r7, #31
 800655e:	4682      	mov	sl, r0
 8006560:	4601      	mov	r1, r0
 8006562:	4648      	mov	r0, r9
 8006564:	dc1f      	bgt.n	80065a6 <__ieee754_rem_pio2f+0x1b2>
 8006566:	4b57      	ldr	r3, [pc, #348]	; (80066c4 <__ieee754_rem_pio2f+0x2d0>)
 8006568:	1e7a      	subs	r2, r7, #1
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8006572:	429a      	cmp	r2, r3
 8006574:	d017      	beq.n	80065a6 <__ieee754_rem_pio2f+0x1b2>
 8006576:	f002 fa75 	bl	8008a64 <__aeabi_fsub>
 800657a:	4680      	mov	r8, r0
 800657c:	f8c5 8000 	str.w	r8, [r5]
 8006580:	4641      	mov	r1, r8
 8006582:	4648      	mov	r0, r9
 8006584:	f002 fa6e 	bl	8008a64 <__aeabi_fsub>
 8006588:	4651      	mov	r1, sl
 800658a:	f002 fa6b 	bl	8008a64 <__aeabi_fsub>
 800658e:	2e00      	cmp	r6, #0
 8006590:	6068      	str	r0, [r5, #4]
 8006592:	daaa      	bge.n	80064ea <__ieee754_rem_pio2f+0xf6>
 8006594:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 8006598:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800659c:	f8c5 8000 	str.w	r8, [r5]
 80065a0:	6068      	str	r0, [r5, #4]
 80065a2:	427f      	negs	r7, r7
 80065a4:	e7a1      	b.n	80064ea <__ieee754_rem_pio2f+0xf6>
 80065a6:	f002 fa5d 	bl	8008a64 <__aeabi_fsub>
 80065aa:	15e2      	asrs	r2, r4, #23
 80065ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b08      	cmp	r3, #8
 80065b4:	4680      	mov	r8, r0
 80065b6:	dde1      	ble.n	800657c <__ieee754_rem_pio2f+0x188>
 80065b8:	493f      	ldr	r1, [pc, #252]	; (80066b8 <__ieee754_rem_pio2f+0x2c4>)
 80065ba:	4658      	mov	r0, fp
 80065bc:	9203      	str	r2, [sp, #12]
 80065be:	f002 fb5b 	bl	8008c78 <__aeabi_fmul>
 80065c2:	4680      	mov	r8, r0
 80065c4:	4601      	mov	r1, r0
 80065c6:	4648      	mov	r0, r9
 80065c8:	f002 fa4c 	bl	8008a64 <__aeabi_fsub>
 80065cc:	4601      	mov	r1, r0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4648      	mov	r0, r9
 80065d2:	f002 fa47 	bl	8008a64 <__aeabi_fsub>
 80065d6:	4641      	mov	r1, r8
 80065d8:	f002 fa44 	bl	8008a64 <__aeabi_fsub>
 80065dc:	4680      	mov	r8, r0
 80065de:	4937      	ldr	r1, [pc, #220]	; (80066bc <__ieee754_rem_pio2f+0x2c8>)
 80065e0:	4658      	mov	r0, fp
 80065e2:	f002 fb49 	bl	8008c78 <__aeabi_fmul>
 80065e6:	4641      	mov	r1, r8
 80065e8:	f002 fa3c 	bl	8008a64 <__aeabi_fsub>
 80065ec:	4601      	mov	r1, r0
 80065ee:	4682      	mov	sl, r0
 80065f0:	4620      	mov	r0, r4
 80065f2:	f002 fa37 	bl	8008a64 <__aeabi_fsub>
 80065f6:	9a03      	ldr	r2, [sp, #12]
 80065f8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80065fc:	1ad2      	subs	r2, r2, r3
 80065fe:	2a19      	cmp	r2, #25
 8006600:	4680      	mov	r8, r0
 8006602:	dc2e      	bgt.n	8006662 <__ieee754_rem_pio2f+0x26e>
 8006604:	6028      	str	r0, [r5, #0]
 8006606:	46a1      	mov	r9, r4
 8006608:	e7ba      	b.n	8006580 <__ieee754_rem_pio2f+0x18c>
 800660a:	f002 fa2d 	bl	8008a68 <__addsf3>
 800660e:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <__ieee754_rem_pio2f+0x2b4>)
 8006610:	f024 040f 	bic.w	r4, r4, #15
 8006614:	429c      	cmp	r4, r3
 8006616:	4606      	mov	r6, r0
 8006618:	d010      	beq.n	800663c <__ieee754_rem_pio2f+0x248>
 800661a:	4924      	ldr	r1, [pc, #144]	; (80066ac <__ieee754_rem_pio2f+0x2b8>)
 800661c:	f002 fa24 	bl	8008a68 <__addsf3>
 8006620:	4601      	mov	r1, r0
 8006622:	4630      	mov	r0, r6
 8006624:	6029      	str	r1, [r5, #0]
 8006626:	f002 fa1d 	bl	8008a64 <__aeabi_fsub>
 800662a:	4920      	ldr	r1, [pc, #128]	; (80066ac <__ieee754_rem_pio2f+0x2b8>)
 800662c:	f002 fa1c 	bl	8008a68 <__addsf3>
 8006630:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006634:	6068      	str	r0, [r5, #4]
 8006636:	e758      	b.n	80064ea <__ieee754_rem_pio2f+0xf6>
 8006638:	2303      	movs	r3, #3
 800663a:	e73c      	b.n	80064b6 <__ieee754_rem_pio2f+0xc2>
 800663c:	491e      	ldr	r1, [pc, #120]	; (80066b8 <__ieee754_rem_pio2f+0x2c4>)
 800663e:	f002 fa13 	bl	8008a68 <__addsf3>
 8006642:	491e      	ldr	r1, [pc, #120]	; (80066bc <__ieee754_rem_pio2f+0x2c8>)
 8006644:	4604      	mov	r4, r0
 8006646:	f002 fa0f 	bl	8008a68 <__addsf3>
 800664a:	4601      	mov	r1, r0
 800664c:	4620      	mov	r0, r4
 800664e:	6029      	str	r1, [r5, #0]
 8006650:	f002 fa08 	bl	8008a64 <__aeabi_fsub>
 8006654:	4919      	ldr	r1, [pc, #100]	; (80066bc <__ieee754_rem_pio2f+0x2c8>)
 8006656:	f002 fa07 	bl	8008a68 <__addsf3>
 800665a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800665e:	6068      	str	r0, [r5, #4]
 8006660:	e743      	b.n	80064ea <__ieee754_rem_pio2f+0xf6>
 8006662:	4919      	ldr	r1, [pc, #100]	; (80066c8 <__ieee754_rem_pio2f+0x2d4>)
 8006664:	4658      	mov	r0, fp
 8006666:	f002 fb07 	bl	8008c78 <__aeabi_fmul>
 800666a:	4601      	mov	r1, r0
 800666c:	4680      	mov	r8, r0
 800666e:	4620      	mov	r0, r4
 8006670:	f002 f9f8 	bl	8008a64 <__aeabi_fsub>
 8006674:	4601      	mov	r1, r0
 8006676:	4681      	mov	r9, r0
 8006678:	4620      	mov	r0, r4
 800667a:	f002 f9f3 	bl	8008a64 <__aeabi_fsub>
 800667e:	4641      	mov	r1, r8
 8006680:	f002 f9f0 	bl	8008a64 <__aeabi_fsub>
 8006684:	4604      	mov	r4, r0
 8006686:	4911      	ldr	r1, [pc, #68]	; (80066cc <__ieee754_rem_pio2f+0x2d8>)
 8006688:	4658      	mov	r0, fp
 800668a:	f002 faf5 	bl	8008c78 <__aeabi_fmul>
 800668e:	4621      	mov	r1, r4
 8006690:	f002 f9e8 	bl	8008a64 <__aeabi_fsub>
 8006694:	4682      	mov	sl, r0
 8006696:	4601      	mov	r1, r0
 8006698:	4648      	mov	r0, r9
 800669a:	e76c      	b.n	8006576 <__ieee754_rem_pio2f+0x182>
 800669c:	3f490fd8 	.word	0x3f490fd8
 80066a0:	4016cbe3 	.word	0x4016cbe3
 80066a4:	3fc90f80 	.word	0x3fc90f80
 80066a8:	3fc90fd0 	.word	0x3fc90fd0
 80066ac:	37354443 	.word	0x37354443
 80066b0:	43490f80 	.word	0x43490f80
 80066b4:	0800ba48 	.word	0x0800ba48
 80066b8:	37354400 	.word	0x37354400
 80066bc:	2e85a308 	.word	0x2e85a308
 80066c0:	3f22f984 	.word	0x3f22f984
 80066c4:	0800b9c8 	.word	0x0800b9c8
 80066c8:	2e85a300 	.word	0x2e85a300
 80066cc:	248d3132 	.word	0x248d3132

080066d0 <__ieee754_sqrtf>:
 80066d0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80066d4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	4604      	mov	r4, r0
 80066dc:	d22f      	bcs.n	800673e <__ieee754_sqrtf+0x6e>
 80066de:	b36a      	cbz	r2, 800673c <__ieee754_sqrtf+0x6c>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	db3e      	blt.n	8006764 <__ieee754_sqrtf+0x94>
 80066e6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80066ea:	ea4f 50e0 	mov.w	r0, r0, asr #23
 80066ee:	d32d      	bcc.n	800674c <__ieee754_sqrtf+0x7c>
 80066f0:	2600      	movs	r6, #0
 80066f2:	387f      	subs	r0, #127	; 0x7f
 80066f4:	07c2      	lsls	r2, r0, #31
 80066f6:	f04f 0419 	mov.w	r4, #25
 80066fa:	4631      	mov	r1, r6
 80066fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006700:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006708:	bf48      	it	mi
 800670a:	005b      	lslmi	r3, r3, #1
 800670c:	1047      	asrs	r7, r0, #1
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	188d      	adds	r5, r1, r2
 8006712:	429d      	cmp	r5, r3
 8006714:	dc02      	bgt.n	800671c <__ieee754_sqrtf+0x4c>
 8006716:	1b5b      	subs	r3, r3, r5
 8006718:	18a9      	adds	r1, r5, r2
 800671a:	4416      	add	r6, r2
 800671c:	3c01      	subs	r4, #1
 800671e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006722:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006726:	d1f3      	bne.n	8006710 <__ieee754_sqrtf+0x40>
 8006728:	b113      	cbz	r3, 8006730 <__ieee754_sqrtf+0x60>
 800672a:	3601      	adds	r6, #1
 800672c:	f026 0601 	bic.w	r6, r6, #1
 8006730:	1070      	asrs	r0, r6, #1
 8006732:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
 8006736:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673e:	4601      	mov	r1, r0
 8006740:	f002 fa9a 	bl	8008c78 <__aeabi_fmul>
 8006744:	4621      	mov	r1, r4
 8006746:	f002 f98f 	bl	8008a68 <__addsf3>
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674c:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
 8006750:	d001      	beq.n	8006756 <__ieee754_sqrtf+0x86>
 8006752:	e00e      	b.n	8006772 <__ieee754_sqrtf+0xa2>
 8006754:	460a      	mov	r2, r1
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	021c      	lsls	r4, r3, #8
 800675a:	f102 0101 	add.w	r1, r2, #1
 800675e:	d5f9      	bpl.n	8006754 <__ieee754_sqrtf+0x84>
 8006760:	1a80      	subs	r0, r0, r2
 8006762:	e7c5      	b.n	80066f0 <__ieee754_sqrtf+0x20>
 8006764:	4601      	mov	r1, r0
 8006766:	f002 f97d 	bl	8008a64 <__aeabi_fsub>
 800676a:	4601      	mov	r1, r0
 800676c:	f002 fb38 	bl	8008de0 <__aeabi_fdiv>
 8006770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006776:	e7f3      	b.n	8006760 <__ieee754_sqrtf+0x90>

08006778 <__kernel_cos>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006780:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006784:	b085      	sub	sp, #20
 8006786:	460c      	mov	r4, r1
 8006788:	4692      	mov	sl, r2
 800678a:	469b      	mov	fp, r3
 800678c:	4605      	mov	r5, r0
 800678e:	da6b      	bge.n	8006868 <__kernel_cos+0xf0>
 8006790:	f002 f8ec 	bl	800896c <__aeabi_d2iz>
 8006794:	2800      	cmp	r0, #0
 8006796:	f000 80e7 	beq.w	8006968 <__kernel_cos+0x1f0>
 800679a:	462a      	mov	r2, r5
 800679c:	4623      	mov	r3, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	4621      	mov	r1, r4
 80067a2:	f001 fe33 	bl	800840c <__aeabi_dmul>
 80067a6:	a374      	add	r3, pc, #464	; (adr r3, 8006978 <__kernel_cos+0x200>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	4680      	mov	r8, r0
 80067ae:	4689      	mov	r9, r1
 80067b0:	f001 fe2c 	bl	800840c <__aeabi_dmul>
 80067b4:	a372      	add	r3, pc, #456	; (adr r3, 8006980 <__kernel_cos+0x208>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f001 fc75 	bl	80080a8 <__adddf3>
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	f001 fe23 	bl	800840c <__aeabi_dmul>
 80067c6:	a370      	add	r3, pc, #448	; (adr r3, 8006988 <__kernel_cos+0x210>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f001 fc6a 	bl	80080a4 <__aeabi_dsub>
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	f001 fe1a 	bl	800840c <__aeabi_dmul>
 80067d8:	a36d      	add	r3, pc, #436	; (adr r3, 8006990 <__kernel_cos+0x218>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f001 fc63 	bl	80080a8 <__adddf3>
 80067e2:	4642      	mov	r2, r8
 80067e4:	464b      	mov	r3, r9
 80067e6:	f001 fe11 	bl	800840c <__aeabi_dmul>
 80067ea:	a36b      	add	r3, pc, #428	; (adr r3, 8006998 <__kernel_cos+0x220>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f001 fc58 	bl	80080a4 <__aeabi_dsub>
 80067f4:	4642      	mov	r2, r8
 80067f6:	464b      	mov	r3, r9
 80067f8:	f001 fe08 	bl	800840c <__aeabi_dmul>
 80067fc:	a368      	add	r3, pc, #416	; (adr r3, 80069a0 <__kernel_cos+0x228>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f001 fc51 	bl	80080a8 <__adddf3>
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	f001 fdff 	bl	800840c <__aeabi_dmul>
 800680e:	e9cd 0100 	strd	r0, r1, [sp]
 8006812:	2200      	movs	r2, #0
 8006814:	4b64      	ldr	r3, [pc, #400]	; (80069a8 <__kernel_cos+0x230>)
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f001 fdf7 	bl	800840c <__aeabi_dmul>
 800681e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f001 fdef 	bl	800840c <__aeabi_dmul>
 800682e:	4652      	mov	r2, sl
 8006830:	4680      	mov	r8, r0
 8006832:	4689      	mov	r9, r1
 8006834:	465b      	mov	r3, fp
 8006836:	4628      	mov	r0, r5
 8006838:	4621      	mov	r1, r4
 800683a:	f001 fde7 	bl	800840c <__aeabi_dmul>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4640      	mov	r0, r8
 8006844:	4649      	mov	r1, r9
 8006846:	f001 fc2d 	bl	80080a4 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4630      	mov	r0, r6
 8006850:	4639      	mov	r1, r7
 8006852:	f001 fc27 	bl	80080a4 <__aeabi_dsub>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	2000      	movs	r0, #0
 800685c:	4953      	ldr	r1, [pc, #332]	; (80069ac <__kernel_cos+0x234>)
 800685e:	f001 fc21 	bl	80080a4 <__aeabi_dsub>
 8006862:	b005      	add	sp, #20
 8006864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	f001 fdce 	bl	800840c <__aeabi_dmul>
 8006870:	a341      	add	r3, pc, #260	; (adr r3, 8006978 <__kernel_cos+0x200>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	4680      	mov	r8, r0
 8006878:	4689      	mov	r9, r1
 800687a:	f001 fdc7 	bl	800840c <__aeabi_dmul>
 800687e:	a340      	add	r3, pc, #256	; (adr r3, 8006980 <__kernel_cos+0x208>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f001 fc10 	bl	80080a8 <__adddf3>
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	f001 fdbe 	bl	800840c <__aeabi_dmul>
 8006890:	a33d      	add	r3, pc, #244	; (adr r3, 8006988 <__kernel_cos+0x210>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f001 fc05 	bl	80080a4 <__aeabi_dsub>
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	f001 fdb5 	bl	800840c <__aeabi_dmul>
 80068a2:	a33b      	add	r3, pc, #236	; (adr r3, 8006990 <__kernel_cos+0x218>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f001 fbfe 	bl	80080a8 <__adddf3>
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	f001 fdac 	bl	800840c <__aeabi_dmul>
 80068b4:	a338      	add	r3, pc, #224	; (adr r3, 8006998 <__kernel_cos+0x220>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f001 fbf3 	bl	80080a4 <__aeabi_dsub>
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	f001 fda3 	bl	800840c <__aeabi_dmul>
 80068c6:	a336      	add	r3, pc, #216	; (adr r3, 80069a0 <__kernel_cos+0x228>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f001 fbec 	bl	80080a8 <__adddf3>
 80068d0:	464b      	mov	r3, r9
 80068d2:	4642      	mov	r2, r8
 80068d4:	f001 fd9a 	bl	800840c <__aeabi_dmul>
 80068d8:	4b35      	ldr	r3, [pc, #212]	; (80069b0 <__kernel_cos+0x238>)
 80068da:	e9cd 0100 	strd	r0, r1, [sp]
 80068de:	429e      	cmp	r6, r3
 80068e0:	dd97      	ble.n	8006812 <__kernel_cos+0x9a>
 80068e2:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <__kernel_cos+0x23c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	429e      	cmp	r6, r3
 80068e8:	dc38      	bgt.n	800695c <__kernel_cos+0x1e4>
 80068ea:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80068ee:	2000      	movs	r0, #0
 80068f0:	492e      	ldr	r1, [pc, #184]	; (80069ac <__kernel_cos+0x234>)
 80068f2:	4616      	mov	r6, r2
 80068f4:	461f      	mov	r7, r3
 80068f6:	f001 fbd5 	bl	80080a4 <__aeabi_dsub>
 80068fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <__kernel_cos+0x230>)
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f001 fd81 	bl	800840c <__aeabi_dmul>
 800690a:	4632      	mov	r2, r6
 800690c:	463b      	mov	r3, r7
 800690e:	f001 fbc9 	bl	80080a4 <__aeabi_dsub>
 8006912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006916:	4606      	mov	r6, r0
 8006918:	460f      	mov	r7, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f001 fd75 	bl	800840c <__aeabi_dmul>
 8006922:	4652      	mov	r2, sl
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	465b      	mov	r3, fp
 800692a:	4628      	mov	r0, r5
 800692c:	4621      	mov	r1, r4
 800692e:	f001 fd6d 	bl	800840c <__aeabi_dmul>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4640      	mov	r0, r8
 8006938:	4649      	mov	r1, r9
 800693a:	f001 fbb3 	bl	80080a4 <__aeabi_dsub>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4630      	mov	r0, r6
 8006944:	4639      	mov	r1, r7
 8006946:	f001 fbad 	bl	80080a4 <__aeabi_dsub>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006952:	f001 fba7 	bl	80080a4 <__aeabi_dsub>
 8006956:	b005      	add	sp, #20
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <__kernel_cos+0x240>)
 800695e:	2600      	movs	r6, #0
 8006960:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006964:	4f15      	ldr	r7, [pc, #84]	; (80069bc <__kernel_cos+0x244>)
 8006966:	e7ca      	b.n	80068fe <__kernel_cos+0x186>
 8006968:	2000      	movs	r0, #0
 800696a:	4910      	ldr	r1, [pc, #64]	; (80069ac <__kernel_cos+0x234>)
 800696c:	b005      	add	sp, #20
 800696e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006972:	bf00      	nop
 8006974:	f3af 8000 	nop.w
 8006978:	be8838d4 	.word	0xbe8838d4
 800697c:	bda8fae9 	.word	0xbda8fae9
 8006980:	bdb4b1c4 	.word	0xbdb4b1c4
 8006984:	3e21ee9e 	.word	0x3e21ee9e
 8006988:	809c52ad 	.word	0x809c52ad
 800698c:	3e927e4f 	.word	0x3e927e4f
 8006990:	19cb1590 	.word	0x19cb1590
 8006994:	3efa01a0 	.word	0x3efa01a0
 8006998:	16c15177 	.word	0x16c15177
 800699c:	3f56c16c 	.word	0x3f56c16c
 80069a0:	5555554c 	.word	0x5555554c
 80069a4:	3fa55555 	.word	0x3fa55555
 80069a8:	3fe00000 	.word	0x3fe00000
 80069ac:	3ff00000 	.word	0x3ff00000
 80069b0:	3fd33332 	.word	0x3fd33332
 80069b4:	3fe90000 	.word	0x3fe90000
 80069b8:	3fe70000 	.word	0x3fe70000
 80069bc:	3fd20000 	.word	0x3fd20000

080069c0 <__kernel_rem_pio2>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	461f      	mov	r7, r3
 80069c6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80069ca:	4c9b      	ldr	r4, [pc, #620]	; (8006c38 <__kernel_rem_pio2+0x278>)
 80069cc:	9308      	str	r3, [sp, #32]
 80069ce:	1ed3      	subs	r3, r2, #3
 80069d0:	fb84 5403 	smull	r5, r4, r4, r3
 80069d4:	17db      	asrs	r3, r3, #31
 80069d6:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 80069da:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80069dc:	4c97      	ldr	r4, [pc, #604]	; (8006c3c <__kernel_rem_pio2+0x27c>)
 80069de:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80069e2:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80069e6:	1c6b      	adds	r3, r5, #1
 80069e8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80069ec:	4626      	mov	r6, r4
 80069ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069f2:	9405      	str	r4, [sp, #20]
 80069f4:	1e7c      	subs	r4, r7, #1
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	4623      	mov	r3, r4
 80069fa:	9509      	str	r5, [sp, #36]	; 0x24
 80069fc:	9402      	str	r4, [sp, #8]
 80069fe:	1b2c      	subs	r4, r5, r4
 8006a00:	18f5      	adds	r5, r6, r3
 8006a02:	9003      	str	r0, [sp, #12]
 8006a04:	9106      	str	r1, [sp, #24]
 8006a06:	d41a      	bmi.n	8006a3e <__kernel_rem_pio2+0x7e>
 8006a08:	4425      	add	r5, r4
 8006a0a:	f04f 0800 	mov.w	r8, #0
 8006a0e:	f04f 0900 	mov.w	r9, #0
 8006a12:	3501      	adds	r5, #1
 8006a14:	ae1e      	add	r6, sp, #120	; 0x78
 8006a16:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 8006a18:	e008      	b.n	8006a2c <__kernel_rem_pio2+0x6c>
 8006a1a:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8006a1e:	f001 fc8f 	bl	8008340 <__aeabi_i2d>
 8006a22:	3401      	adds	r4, #1
 8006a24:	42ac      	cmp	r4, r5
 8006a26:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8006a2a:	d008      	beq.n	8006a3e <__kernel_rem_pio2+0x7e>
 8006a2c:	2c00      	cmp	r4, #0
 8006a2e:	daf4      	bge.n	8006a1a <__kernel_rem_pio2+0x5a>
 8006a30:	4640      	mov	r0, r8
 8006a32:	4649      	mov	r1, r9
 8006a34:	3401      	adds	r4, #1
 8006a36:	42ac      	cmp	r4, r5
 8006a38:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8006a3c:	d1f6      	bne.n	8006a2c <__kernel_rem_pio2+0x6c>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db2e      	blt.n	8006aa2 <__kernel_rem_pio2+0xe2>
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	aa70      	add	r2, sp, #448	; 0x1c0
 8006a48:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	f1a9 0808 	sub.w	r8, r9, #8
 8006a52:	4498      	add	r8, r3
 8006a54:	ab20      	add	r3, sp, #128	; 0x80
 8006a56:	4499      	add	r9, r3
 8006a58:	9b05      	ldr	r3, [sp, #20]
 8006a5a:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
 8006a5e:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
 8006a62:	9b02      	ldr	r3, [sp, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f2c0 830c 	blt.w	8007082 <__kernel_rem_pio2+0x6c2>
 8006a6a:	464d      	mov	r5, r9
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	2700      	movs	r7, #0
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	f1a3 0408 	sub.w	r4, r3, #8
 8006a76:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006a7a:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 8006a7e:	f001 fcc5 	bl	800840c <__aeabi_dmul>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4630      	mov	r0, r6
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f001 fb0d 	bl	80080a8 <__adddf3>
 8006a8e:	4544      	cmp	r4, r8
 8006a90:	4606      	mov	r6, r0
 8006a92:	460f      	mov	r7, r1
 8006a94:	d1ef      	bne.n	8006a76 <__kernel_rem_pio2+0xb6>
 8006a96:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006a9a:	45da      	cmp	sl, fp
 8006a9c:	f109 0908 	add.w	r9, r9, #8
 8006aa0:	d1df      	bne.n	8006a62 <__kernel_rem_pio2+0xa2>
 8006aa2:	9b05      	ldr	r3, [sp, #20]
 8006aa4:	a80c      	add	r0, sp, #48	; 0x30
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006aac:	3b01      	subs	r3, #1
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	9a08      	ldr	r2, [sp, #32]
 8006ab2:	1f19      	subs	r1, r3, #4
 8006ab4:	4403      	add	r3, r0
 8006ab6:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8006aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	3a01      	subs	r2, #1
 8006ac0:	4401      	add	r1, r0
 8006ac2:	910a      	str	r1, [sp, #40]	; 0x28
 8006ac4:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
 8006ac8:	9a00      	ldr	r2, [sp, #0]
 8006aca:	a998      	add	r1, sp, #608	; 0x260
 8006acc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	dd2b      	ble.n	8006b32 <__kernel_rem_pio2+0x172>
 8006ada:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8006ade:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
 8006ae2:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8006ae6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
 8006aea:	2200      	movs	r2, #0
 8006aec:	4b54      	ldr	r3, [pc, #336]	; (8006c40 <__kernel_rem_pio2+0x280>)
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f001 fc8b 	bl	800840c <__aeabi_dmul>
 8006af6:	f001 ff39 	bl	800896c <__aeabi_d2iz>
 8006afa:	f001 fc21 	bl	8008340 <__aeabi_i2d>
 8006afe:	2200      	movs	r2, #0
 8006b00:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <__kernel_rem_pio2+0x284>)
 8006b02:	4606      	mov	r6, r0
 8006b04:	460f      	mov	r7, r1
 8006b06:	f001 fc81 	bl	800840c <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f001 fac7 	bl	80080a4 <__aeabi_dsub>
 8006b16:	f001 ff29 	bl	800896c <__aeabi_d2iz>
 8006b1a:	e878 2302 	ldrd	r2, r3, [r8], #-8
 8006b1e:	f849 0f04 	str.w	r0, [r9, #4]!
 8006b22:	4639      	mov	r1, r7
 8006b24:	4630      	mov	r0, r6
 8006b26:	f001 fabf 	bl	80080a8 <__adddf3>
 8006b2a:	45d0      	cmp	r8, sl
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	d1db      	bne.n	8006aea <__kernel_rem_pio2+0x12a>
 8006b32:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	464a      	mov	r2, r9
 8006b3c:	f001 f990 	bl	8007e60 <scalbn>
 8006b40:	2200      	movs	r2, #0
 8006b42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006b46:	4604      	mov	r4, r0
 8006b48:	460d      	mov	r5, r1
 8006b4a:	f001 fc5f 	bl	800840c <__aeabi_dmul>
 8006b4e:	f001 f8f7 	bl	8007d40 <floor>
 8006b52:	2200      	movs	r2, #0
 8006b54:	4b3c      	ldr	r3, [pc, #240]	; (8006c48 <__kernel_rem_pio2+0x288>)
 8006b56:	f001 fc59 	bl	800840c <__aeabi_dmul>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f001 fa9f 	bl	80080a4 <__aeabi_dsub>
 8006b66:	460d      	mov	r5, r1
 8006b68:	4604      	mov	r4, r0
 8006b6a:	f001 feff 	bl	800896c <__aeabi_d2iz>
 8006b6e:	4680      	mov	r8, r0
 8006b70:	f001 fbe6 	bl	8008340 <__aeabi_i2d>
 8006b74:	460b      	mov	r3, r1
 8006b76:	4602      	mov	r2, r0
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f001 fa92 	bl	80080a4 <__aeabi_dsub>
 8006b80:	464b      	mov	r3, r9
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	f340 80f5 	ble.w	8006d76 <__kernel_rem_pio2+0x3b6>
 8006b8c:	9a00      	ldr	r2, [sp, #0]
 8006b8e:	f1c9 0318 	rsb	r3, r9, #24
 8006b92:	1e51      	subs	r1, r2, #1
 8006b94:	aa0c      	add	r2, sp, #48	; 0x30
 8006b96:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8006b9a:	a80c      	add	r0, sp, #48	; 0x30
 8006b9c:	fa45 f203 	asr.w	r2, r5, r3
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	1aed      	subs	r5, r5, r3
 8006ba6:	f1c9 0317 	rsb	r3, r9, #23
 8006baa:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
 8006bae:	4490      	add	r8, r2
 8006bb0:	411d      	asrs	r5, r3
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	dd62      	ble.n	8006c7c <__kernel_rem_pio2+0x2bc>
 8006bb6:	9b00      	ldr	r3, [sp, #0]
 8006bb8:	f108 0801 	add.w	r8, r8, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f340 827f 	ble.w	80070c0 <__kernel_rem_pio2+0x700>
 8006bc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006bc4:	2c00      	cmp	r4, #0
 8006bc6:	f000 8318 	beq.w	80071fa <__kernel_rem_pio2+0x83a>
 8006bca:	2001      	movs	r0, #1
 8006bcc:	2300      	movs	r3, #0
 8006bce:	aa0c      	add	r2, sp, #48	; 0x30
 8006bd0:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 8006bd4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8006bd8:	9a00      	ldr	r2, [sp, #0]
 8006bda:	4282      	cmp	r2, r0
 8006bdc:	dd19      	ble.n	8006c12 <__kernel_rem_pio2+0x252>
 8006bde:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006be2:	aa0c      	add	r2, sp, #48	; 0x30
 8006be4:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006be8:	ac0c      	add	r4, sp, #48	; 0x30
 8006bea:	1a8a      	subs	r2, r1, r2
 8006bec:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
 8006bf0:	9a00      	ldr	r2, [sp, #0]
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	dd0c      	ble.n	8006c12 <__kernel_rem_pio2+0x252>
 8006bf8:	aa0c      	add	r2, sp, #48	; 0x30
 8006bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bfe:	9a00      	ldr	r2, [sp, #0]
 8006c00:	a80c      	add	r0, sp, #48	; 0x30
 8006c02:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	1a8a      	subs	r2, r1, r2
 8006c0a:	f843 2b04 	str.w	r2, [r3], #4
 8006c0e:	4283      	cmp	r3, r0
 8006c10:	d1f9      	bne.n	8006c06 <__kernel_rem_pio2+0x246>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dd19      	ble.n	8006c4c <__kernel_rem_pio2+0x28c>
 8006c18:	9b04      	ldr	r3, [sp, #16]
 8006c1a:	2401      	movs	r4, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	f040 8257 	bne.w	80070d0 <__kernel_rem_pio2+0x710>
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	a90c      	add	r1, sp, #48	; 0x30
 8006c26:	1e5a      	subs	r2, r3, #1
 8006c28:	ab0c      	add	r3, sp, #48	; 0x30
 8006c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c36:	e257      	b.n	80070e8 <__kernel_rem_pio2+0x728>
 8006c38:	2aaaaaab 	.word	0x2aaaaaab
 8006c3c:	0800bda0 	.word	0x0800bda0
 8006c40:	3e700000 	.word	0x3e700000
 8006c44:	41700000 	.word	0x41700000
 8006c48:	40200000 	.word	0x40200000
 8006c4c:	2d02      	cmp	r5, #2
 8006c4e:	d115      	bne.n	8006c7c <__kernel_rem_pio2+0x2bc>
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	2000      	movs	r0, #0
 8006c56:	4998      	ldr	r1, [pc, #608]	; (8006eb8 <__kernel_rem_pio2+0x4f8>)
 8006c58:	f001 fa24 	bl	80080a4 <__aeabi_dsub>
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	9a04      	ldr	r2, [sp, #16]
 8006c62:	2000      	movs	r0, #0
 8006c64:	4994      	ldr	r1, [pc, #592]	; (8006eb8 <__kernel_rem_pio2+0x4f8>)
 8006c66:	f001 f8fb 	bl	8007e60 <scalbn>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f001 fa17 	bl	80080a4 <__aeabi_dsub>
 8006c76:	2502      	movs	r5, #2
 8006c78:	4606      	mov	r6, r0
 8006c7a:	460f      	mov	r7, r1
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4630      	mov	r0, r6
 8006c82:	4639      	mov	r1, r7
 8006c84:	f001 fe2a 	bl	80088dc <__aeabi_dcmpeq>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f000 8251 	beq.w	8007130 <__kernel_rem_pio2+0x770>
 8006c8e:	9900      	ldr	r1, [sp, #0]
 8006c90:	9b05      	ldr	r3, [sp, #20]
 8006c92:	1e48      	subs	r0, r1, #1
 8006c94:	4283      	cmp	r3, r0
 8006c96:	dc0f      	bgt.n	8006cb8 <__kernel_rem_pio2+0x2f8>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	a90c      	add	r1, sp, #48	; 0x30
 8006ca2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006ca4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006ca8:	f853 1904 	ldr.w	r1, [r3], #-4
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	ea42 0201 	orr.w	r2, r2, r1
 8006cb2:	d1f9      	bne.n	8006ca8 <__kernel_rem_pio2+0x2e8>
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d16f      	bne.n	8006d98 <__kernel_rem_pio2+0x3d8>
 8006cb8:	9b05      	ldr	r3, [sp, #20]
 8006cba:	aa0c      	add	r2, sp, #48	; 0x30
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 8232 	bne.w	800712c <__kernel_rem_pio2+0x76c>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ccc:	f852 1904 	ldr.w	r1, [r2], #-4
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	d0fa      	beq.n	8006ccc <__kernel_rem_pio2+0x30c>
 8006cd6:	9a00      	ldr	r2, [sp, #0]
 8006cd8:	18d3      	adds	r3, r2, r3
 8006cda:	f102 0a01 	add.w	sl, r2, #1
 8006cde:	459a      	cmp	sl, r3
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	dc3d      	bgt.n	8006d60 <__kernel_rem_pio2+0x3a0>
 8006ce4:	9b00      	ldr	r3, [sp, #0]
 8006ce6:	9908      	ldr	r1, [sp, #32]
 8006ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cea:	440b      	add	r3, r1
 8006cec:	4699      	mov	r9, r3
 8006cee:	9907      	ldr	r1, [sp, #28]
 8006cf0:	eb0a 0802 	add.w	r8, sl, r2
 8006cf4:	ab20      	add	r3, sp, #128	; 0x80
 8006cf6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8006cfa:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006cfe:	188b      	adds	r3, r1, r2
 8006d00:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8006d02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006d06:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8006d0a:	aa70      	add	r2, sp, #448	; 0x1c0
 8006d0c:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 8006d10:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8006d12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8006d1c:	f001 fb10 	bl	8008340 <__aeabi_i2d>
 8006d20:	9b02      	ldr	r3, [sp, #8]
 8006d22:	e8e9 0102 	strd	r0, r1, [r9], #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	db1d      	blt.n	8006d66 <__kernel_rem_pio2+0x3a6>
 8006d2a:	464d      	mov	r5, r9
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	2700      	movs	r7, #0
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	f1a3 0408 	sub.w	r4, r3, #8
 8006d36:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006d3a:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 8006d3e:	f001 fb65 	bl	800840c <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4630      	mov	r0, r6
 8006d48:	4639      	mov	r1, r7
 8006d4a:	f001 f9ad 	bl	80080a8 <__adddf3>
 8006d4e:	455c      	cmp	r4, fp
 8006d50:	4606      	mov	r6, r0
 8006d52:	460f      	mov	r7, r1
 8006d54:	d1ef      	bne.n	8006d36 <__kernel_rem_pio2+0x376>
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	e8ea 6702 	strd	r6, r7, [sl], #8
 8006d5c:	4598      	cmp	r8, r3
 8006d5e:	d1db      	bne.n	8006d18 <__kernel_rem_pio2+0x358>
 8006d60:	9b07      	ldr	r3, [sp, #28]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	e6b0      	b.n	8006ac8 <__kernel_rem_pio2+0x108>
 8006d66:	2600      	movs	r6, #0
 8006d68:	2700      	movs	r7, #0
 8006d6a:	9b00      	ldr	r3, [sp, #0]
 8006d6c:	e8ea 6702 	strd	r6, r7, [sl], #8
 8006d70:	4598      	cmp	r8, r3
 8006d72:	d1d1      	bne.n	8006d18 <__kernel_rem_pio2+0x358>
 8006d74:	e7f4      	b.n	8006d60 <__kernel_rem_pio2+0x3a0>
 8006d76:	d106      	bne.n	8006d86 <__kernel_rem_pio2+0x3c6>
 8006d78:	9b00      	ldr	r3, [sp, #0]
 8006d7a:	aa0c      	add	r2, sp, #48	; 0x30
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006d82:	15ed      	asrs	r5, r5, #23
 8006d84:	e715      	b.n	8006bb2 <__kernel_rem_pio2+0x1f2>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b4c      	ldr	r3, [pc, #304]	; (8006ebc <__kernel_rem_pio2+0x4fc>)
 8006d8a:	f001 fdc5 	bl	8008918 <__aeabi_dcmpge>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f040 8181 	bne.w	8007096 <__kernel_rem_pio2+0x6d6>
 8006d94:	4605      	mov	r5, r0
 8006d96:	e771      	b.n	8006c7c <__kernel_rem_pio2+0x2bc>
 8006d98:	a90c      	add	r1, sp, #48	; 0x30
 8006d9a:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8006d9e:	9904      	ldr	r1, [sp, #16]
 8006da0:	9502      	str	r5, [sp, #8]
 8006da2:	3918      	subs	r1, #24
 8006da4:	f8cd 801c 	str.w	r8, [sp, #28]
 8006da8:	4602      	mov	r2, r0
 8006daa:	9000      	str	r0, [sp, #0]
 8006dac:	9104      	str	r1, [sp, #16]
 8006dae:	b96b      	cbnz	r3, 8006dcc <__kernel_rem_pio2+0x40c>
 8006db0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8006db4:	3b01      	subs	r3, #1
 8006db6:	a80c      	add	r0, sp, #48	; 0x30
 8006db8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006dbc:	f853 0904 	ldr.w	r0, [r3], #-4
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	3918      	subs	r1, #24
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d0f9      	beq.n	8006dbc <__kernel_rem_pio2+0x3fc>
 8006dc8:	9200      	str	r2, [sp, #0]
 8006dca:	9104      	str	r1, [sp, #16]
 8006dcc:	9a04      	ldr	r2, [sp, #16]
 8006dce:	2000      	movs	r0, #0
 8006dd0:	4939      	ldr	r1, [pc, #228]	; (8006eb8 <__kernel_rem_pio2+0x4f8>)
 8006dd2:	f001 f845 	bl	8007e60 <scalbn>
 8006dd6:	9b00      	ldr	r3, [sp, #0]
 8006dd8:	4604      	mov	r4, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	f2c0 8204 	blt.w	80071ea <__kernel_rem_pio2+0x82a>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	00da      	lsls	r2, r3, #3
 8006de8:	a970      	add	r1, sp, #448	; 0x1c0
 8006dea:	eb01 0b02 	add.w	fp, r1, r2
 8006dee:	9204      	str	r2, [sp, #16]
 8006df0:	aa0c      	add	r2, sp, #48	; 0x30
 8006df2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8006df6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8006ec0 <__kernel_rem_pio2+0x500>
 8006dfa:	f10b 0708 	add.w	r7, fp, #8
 8006dfe:	3604      	adds	r6, #4
 8006e00:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8006e04:	f001 fa9c 	bl	8008340 <__aeabi_i2d>
 8006e08:	4622      	mov	r2, r4
 8006e0a:	462b      	mov	r3, r5
 8006e0c:	f001 fafe 	bl	800840c <__aeabi_dmul>
 8006e10:	464b      	mov	r3, r9
 8006e12:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006e16:	4642      	mov	r2, r8
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	f001 faf6 	bl	800840c <__aeabi_dmul>
 8006e20:	ab0c      	add	r3, sp, #48	; 0x30
 8006e22:	429e      	cmp	r6, r3
 8006e24:	4604      	mov	r4, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	d1ea      	bne.n	8006e00 <__kernel_rem_pio2+0x440>
 8006e2a:	f04f 0900 	mov.w	r9, #0
 8006e2e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8006e32:	f8cd a00c 	str.w	sl, [sp, #12]
 8006e36:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	f2c0 813c 	blt.w	80070ba <__kernel_rem_pio2+0x6fa>
 8006e42:	a11b      	add	r1, pc, #108	; (adr r1, 8006eb0 <__kernel_rem_pio2+0x4f0>)
 8006e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e48:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006ec4 <__kernel_rem_pio2+0x504>
 8006e4c:	465d      	mov	r5, fp
 8006e4e:	2600      	movs	r6, #0
 8006e50:	2700      	movs	r7, #0
 8006e52:	2400      	movs	r4, #0
 8006e54:	e003      	b.n	8006e5e <__kernel_rem_pio2+0x49e>
 8006e56:	454c      	cmp	r4, r9
 8006e58:	dc10      	bgt.n	8006e7c <__kernel_rem_pio2+0x4bc>
 8006e5a:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 8006e5e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e62:	f001 fad3 	bl	800840c <__aeabi_dmul>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f001 f91b 	bl	80080a8 <__adddf3>
 8006e72:	3401      	adds	r4, #1
 8006e74:	45a2      	cmp	sl, r4
 8006e76:	4606      	mov	r6, r0
 8006e78:	460f      	mov	r7, r1
 8006e7a:	daec      	bge.n	8006e56 <__kernel_rem_pio2+0x496>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	f1ab 0b08 	sub.w	fp, fp, #8
 8006e82:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006e86:	e9c3 6700 	strd	r6, r7, [r3]
 8006e8a:	ab6e      	add	r3, sp, #440	; 0x1b8
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	f109 0901 	add.w	r9, r9, #1
 8006e92:	d1d2      	bne.n	8006e3a <__kernel_rem_pio2+0x47a>
 8006e94:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006e96:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	f200 808d 	bhi.w	8006fba <__kernel_rem_pio2+0x5fa>
 8006ea0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006ea4:	009200d0 	.word	0x009200d0
 8006ea8:	00120092 	.word	0x00120092
 8006eac:	f3af 8000 	nop.w
 8006eb0:	40000000 	.word	0x40000000
 8006eb4:	3ff921fb 	.word	0x3ff921fb
 8006eb8:	3ff00000 	.word	0x3ff00000
 8006ebc:	3fe00000 	.word	0x3fe00000
 8006ec0:	3e700000 	.word	0x3e700000
 8006ec4:	0800bd68 	.word	0x0800bd68
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f340 81a3 	ble.w	8007216 <__kernel_rem_pio2+0x856>
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	46d3      	mov	fp, sl
 8006ed4:	4453      	add	r3, sl
 8006ed6:	4698      	mov	r8, r3
 8006ed8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006edc:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	f001 f8de 	bl	80080a8 <__adddf3>
 8006eec:	4604      	mov	r4, r0
 8006eee:	460d      	mov	r5, r1
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4648      	mov	r0, r9
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	f001 f8d4 	bl	80080a4 <__aeabi_dsub>
 8006efc:	4632      	mov	r2, r6
 8006efe:	463b      	mov	r3, r7
 8006f00:	f001 f8d2 	bl	80080a8 <__adddf3>
 8006f04:	e9c8 0100 	strd	r0, r1, [r8]
 8006f08:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8006f0c:	45c3      	cmp	fp, r8
 8006f0e:	4626      	mov	r6, r4
 8006f10:	462f      	mov	r7, r5
 8006f12:	d1e3      	bne.n	8006edc <__kernel_rem_pio2+0x51c>
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	46da      	mov	sl, fp
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f340 817c 	ble.w	8007216 <__kernel_rem_pio2+0x856>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	445b      	add	r3, fp
 8006f22:	4698      	mov	r8, r3
 8006f24:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f28:	4699      	mov	r9, r3
 8006f2a:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8006f2e:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	4621      	mov	r1, r4
 8006f36:	4632      	mov	r2, r6
 8006f38:	463b      	mov	r3, r7
 8006f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f3e:	f001 f8b3 	bl	80080a8 <__adddf3>
 8006f42:	4604      	mov	r4, r0
 8006f44:	460d      	mov	r5, r1
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f4e:	f001 f8a9 	bl	80080a4 <__aeabi_dsub>
 8006f52:	4632      	mov	r2, r6
 8006f54:	463b      	mov	r3, r7
 8006f56:	f001 f8a7 	bl	80080a8 <__adddf3>
 8006f5a:	e9c9 0100 	strd	r0, r1, [r9]
 8006f5e:	e969 4502 	strd	r4, r5, [r9, #-8]!
 8006f62:	45cb      	cmp	fp, r9
 8006f64:	4626      	mov	r6, r4
 8006f66:	462f      	mov	r7, r5
 8006f68:	d1e1      	bne.n	8006f2e <__kernel_rem_pio2+0x56e>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	f108 0808 	add.w	r8, r8, #8
 8006f72:	ac4c      	add	r4, sp, #304	; 0x130
 8006f74:	4618      	mov	r0, r3
 8006f76:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f001 f894 	bl	80080a8 <__adddf3>
 8006f80:	4544      	cmp	r4, r8
 8006f82:	4603      	mov	r3, r0
 8006f84:	460d      	mov	r5, r1
 8006f86:	d1f5      	bne.n	8006f74 <__kernel_rem_pio2+0x5b4>
 8006f88:	9a02      	ldr	r2, [sp, #8]
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	f000 811f 	beq.w	80071ce <__kernel_rem_pio2+0x80e>
 8006f90:	f8da 4004 	ldr.w	r4, [sl, #4]
 8006f94:	f8da 200c 	ldr.w	r2, [sl, #12]
 8006f98:	9f06      	ldr	r7, [sp, #24]
 8006f9a:	f8da 1000 	ldr.w	r1, [sl]
 8006f9e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8006fa2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8006fa6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8006faa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8006fae:	617d      	str	r5, [r7, #20]
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	607c      	str	r4, [r7, #4]
 8006fb4:	60fa      	str	r2, [r7, #12]
 8006fb6:	6039      	str	r1, [r7, #0]
 8006fb8:	60b8      	str	r0, [r7, #8]
 8006fba:	9b07      	ldr	r3, [sp, #28]
 8006fbc:	f003 0007 	and.w	r0, r3, #7
 8006fc0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc8:	2400      	movs	r4, #0
 8006fca:	4621      	mov	r1, r4
 8006fcc:	9d04      	ldr	r5, [sp, #16]
 8006fce:	3508      	adds	r5, #8
 8006fd0:	4455      	add	r5, sl
 8006fd2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f001 f866 	bl	80080a8 <__adddf3>
 8006fdc:	4555      	cmp	r5, sl
 8006fde:	4604      	mov	r4, r0
 8006fe0:	d1f7      	bne.n	8006fd2 <__kernel_rem_pio2+0x612>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80db 	beq.w	80071a0 <__kernel_rem_pio2+0x7e0>
 8006fea:	9f06      	ldr	r7, [sp, #24]
 8006fec:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ff6:	e887 0030 	stmia.w	r7, {r4, r5}
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	f001 f852 	bl	80080a4 <__aeabi_dsub>
 8007000:	9b00      	ldr	r3, [sp, #0]
 8007002:	4606      	mov	r6, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	460d      	mov	r5, r1
 8007008:	dd0e      	ble.n	8007028 <__kernel_rem_pio2+0x668>
 800700a:	2401      	movs	r4, #1
 800700c:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 8007010:	4630      	mov	r0, r6
 8007012:	4629      	mov	r1, r5
 8007014:	f001 f848 	bl	80080a8 <__adddf3>
 8007018:	9b00      	ldr	r3, [sp, #0]
 800701a:	3401      	adds	r4, #1
 800701c:	42a3      	cmp	r3, r4
 800701e:	4606      	mov	r6, r0
 8007020:	460d      	mov	r5, r1
 8007022:	daf3      	bge.n	800700c <__kernel_rem_pio2+0x64c>
 8007024:	9b02      	ldr	r3, [sp, #8]
 8007026:	b10b      	cbz	r3, 800702c <__kernel_rem_pio2+0x66c>
 8007028:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800702c:	4632      	mov	r2, r6
 800702e:	462b      	mov	r3, r5
 8007030:	9906      	ldr	r1, [sp, #24]
 8007032:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007036:	9b07      	ldr	r3, [sp, #28]
 8007038:	f003 0007 	and.w	r0, r3, #7
 800703c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	2300      	movs	r3, #0
 8007046:	461c      	mov	r4, r3
 8007048:	9d04      	ldr	r5, [sp, #16]
 800704a:	3508      	adds	r5, #8
 800704c:	4455      	add	r5, sl
 800704e:	4618      	mov	r0, r3
 8007050:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007054:	4621      	mov	r1, r4
 8007056:	f001 f827 	bl	80080a8 <__adddf3>
 800705a:	45aa      	cmp	sl, r5
 800705c:	4603      	mov	r3, r0
 800705e:	460c      	mov	r4, r1
 8007060:	d1f5      	bne.n	800704e <__kernel_rem_pio2+0x68e>
 8007062:	9a02      	ldr	r2, [sp, #8]
 8007064:	b10a      	cbz	r2, 800706a <__kernel_rem_pio2+0x6aa>
 8007066:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800706a:	4618      	mov	r0, r3
 800706c:	4621      	mov	r1, r4
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	e9c3 0100 	strd	r0, r1, [r3]
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	f003 0007 	and.w	r0, r3, #7
 800707a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	2600      	movs	r6, #0
 8007084:	2700      	movs	r7, #0
 8007086:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800708a:	45da      	cmp	sl, fp
 800708c:	f109 0908 	add.w	r9, r9, #8
 8007090:	f47f ace7 	bne.w	8006a62 <__kernel_rem_pio2+0xa2>
 8007094:	e505      	b.n	8006aa2 <__kernel_rem_pio2+0xe2>
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	f108 0801 	add.w	r8, r8, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	bfc8      	it	gt
 80070a0:	2502      	movgt	r5, #2
 80070a2:	f73f ad8e 	bgt.w	8006bc2 <__kernel_rem_pio2+0x202>
 80070a6:	4632      	mov	r2, r6
 80070a8:	463b      	mov	r3, r7
 80070aa:	2000      	movs	r0, #0
 80070ac:	4964      	ldr	r1, [pc, #400]	; (8007240 <__kernel_rem_pio2+0x880>)
 80070ae:	f000 fff9 	bl	80080a4 <__aeabi_dsub>
 80070b2:	2502      	movs	r5, #2
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	e5e0      	b.n	8006c7c <__kernel_rem_pio2+0x2bc>
 80070ba:	2600      	movs	r6, #0
 80070bc:	2700      	movs	r7, #0
 80070be:	e6dd      	b.n	8006e7c <__kernel_rem_pio2+0x4bc>
 80070c0:	9b04      	ldr	r3, [sp, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dd26      	ble.n	8007114 <__kernel_rem_pio2+0x754>
 80070c6:	2400      	movs	r4, #0
 80070c8:	9b04      	ldr	r3, [sp, #16]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	f43f ada9 	beq.w	8006c22 <__kernel_rem_pio2+0x262>
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d109      	bne.n	80070e8 <__kernel_rem_pio2+0x728>
 80070d4:	9b00      	ldr	r3, [sp, #0]
 80070d6:	a90c      	add	r1, sp, #48	; 0x30
 80070d8:	1e5a      	subs	r2, r3, #1
 80070da:	ab0c      	add	r3, sp, #48	; 0x30
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80070e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80070e8:	2d02      	cmp	r5, #2
 80070ea:	f47f adc7 	bne.w	8006c7c <__kernel_rem_pio2+0x2bc>
 80070ee:	4632      	mov	r2, r6
 80070f0:	463b      	mov	r3, r7
 80070f2:	2000      	movs	r0, #0
 80070f4:	4952      	ldr	r1, [pc, #328]	; (8007240 <__kernel_rem_pio2+0x880>)
 80070f6:	f000 ffd5 	bl	80080a4 <__aeabi_dsub>
 80070fa:	4606      	mov	r6, r0
 80070fc:	460f      	mov	r7, r1
 80070fe:	2c00      	cmp	r4, #0
 8007100:	f43f adbc 	beq.w	8006c7c <__kernel_rem_pio2+0x2bc>
 8007104:	e5ac      	b.n	8006c60 <__kernel_rem_pio2+0x2a0>
 8007106:	9900      	ldr	r1, [sp, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	4299      	cmp	r1, r3
 800710c:	d17a      	bne.n	8007204 <__kernel_rem_pio2+0x844>
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	dcd9      	bgt.n	80070c8 <__kernel_rem_pio2+0x708>
 8007114:	2d02      	cmp	r5, #2
 8007116:	f47f adb1 	bne.w	8006c7c <__kernel_rem_pio2+0x2bc>
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	2000      	movs	r0, #0
 8007120:	4947      	ldr	r1, [pc, #284]	; (8007240 <__kernel_rem_pio2+0x880>)
 8007122:	f000 ffbf 	bl	80080a4 <__aeabi_dsub>
 8007126:	4606      	mov	r6, r0
 8007128:	460f      	mov	r7, r1
 800712a:	e5a7      	b.n	8006c7c <__kernel_rem_pio2+0x2bc>
 800712c:	2301      	movs	r3, #1
 800712e:	e5d2      	b.n	8006cd6 <__kernel_rem_pio2+0x316>
 8007130:	4639      	mov	r1, r7
 8007132:	9f04      	ldr	r7, [sp, #16]
 8007134:	4630      	mov	r0, r6
 8007136:	427a      	negs	r2, r7
 8007138:	9502      	str	r5, [sp, #8]
 800713a:	f8cd 801c 	str.w	r8, [sp, #28]
 800713e:	f000 fe8f 	bl	8007e60 <scalbn>
 8007142:	2200      	movs	r2, #0
 8007144:	4b3f      	ldr	r3, [pc, #252]	; (8007244 <__kernel_rem_pio2+0x884>)
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	f001 fbe5 	bl	8008918 <__aeabi_dcmpge>
 800714e:	2800      	cmp	r0, #0
 8007150:	d064      	beq.n	800721c <__kernel_rem_pio2+0x85c>
 8007152:	2200      	movs	r2, #0
 8007154:	4b3c      	ldr	r3, [pc, #240]	; (8007248 <__kernel_rem_pio2+0x888>)
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f001 f957 	bl	800840c <__aeabi_dmul>
 800715e:	f001 fc05 	bl	800896c <__aeabi_d2iz>
 8007162:	4606      	mov	r6, r0
 8007164:	f001 f8ec 	bl	8008340 <__aeabi_i2d>
 8007168:	2200      	movs	r2, #0
 800716a:	4b36      	ldr	r3, [pc, #216]	; (8007244 <__kernel_rem_pio2+0x884>)
 800716c:	f001 f94e 	bl	800840c <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f000 ff94 	bl	80080a4 <__aeabi_dsub>
 800717c:	f001 fbf6 	bl	800896c <__aeabi_d2iz>
 8007180:	9900      	ldr	r1, [sp, #0]
 8007182:	460b      	mov	r3, r1
 8007184:	3301      	adds	r3, #1
 8007186:	461a      	mov	r2, r3
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	463b      	mov	r3, r7
 800718c:	3318      	adds	r3, #24
 800718e:	9304      	str	r3, [sp, #16]
 8007190:	460b      	mov	r3, r1
 8007192:	a90c      	add	r1, sp, #48	; 0x30
 8007194:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007198:	4613      	mov	r3, r2
 800719a:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
 800719e:	e615      	b.n	8006dcc <__kernel_rem_pio2+0x40c>
 80071a0:	4626      	mov	r6, r4
 80071a2:	460f      	mov	r7, r1
 80071a4:	4622      	mov	r2, r4
 80071a6:	9c06      	ldr	r4, [sp, #24]
 80071a8:	460b      	mov	r3, r1
 80071aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80071ae:	e9c4 6700 	strd	r6, r7, [r4]
 80071b2:	f000 ff77 	bl	80080a4 <__aeabi_dsub>
 80071b6:	9b00      	ldr	r3, [sp, #0]
 80071b8:	4606      	mov	r6, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	460d      	mov	r5, r1
 80071be:	f73f af24 	bgt.w	800700a <__kernel_rem_pio2+0x64a>
 80071c2:	4632      	mov	r2, r6
 80071c4:	462b      	mov	r3, r5
 80071c6:	9906      	ldr	r1, [sp, #24]
 80071c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80071cc:	e733      	b.n	8007036 <__kernel_rem_pio2+0x676>
 80071ce:	4618      	mov	r0, r3
 80071d0:	e9da 6700 	ldrd	r6, r7, [sl]
 80071d4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80071d8:	4629      	mov	r1, r5
 80071da:	9d06      	ldr	r5, [sp, #24]
 80071dc:	e9c5 6700 	strd	r6, r7, [r5]
 80071e0:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80071e4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80071e8:	e6e7      	b.n	8006fba <__kernel_rem_pio2+0x5fa>
 80071ea:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	f63f aee4 	bhi.w	8006fba <__kernel_rem_pio2+0x5fa>
 80071f2:	e8df f003 	tbb	[pc, r3]
 80071f6:	1c21      	.short	0x1c21
 80071f8:	0e1c      	.short	0x0e1c
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	dd86      	ble.n	800710e <__kernel_rem_pio2+0x74e>
 8007200:	2301      	movs	r3, #1
 8007202:	aa0c      	add	r2, sp, #48	; 0x30
 8007204:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8007208:	2c00      	cmp	r4, #0
 800720a:	f43f af7c 	beq.w	8007106 <__kernel_rem_pio2+0x746>
 800720e:	1c58      	adds	r0, r3, #1
 8007210:	e4dd      	b.n	8006bce <__kernel_rem_pio2+0x20e>
 8007212:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8007216:	2300      	movs	r3, #0
 8007218:	461d      	mov	r5, r3
 800721a:	e6b5      	b.n	8006f88 <__kernel_rem_pio2+0x5c8>
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f001 fba4 	bl	800896c <__aeabi_d2iz>
 8007224:	9b00      	ldr	r3, [sp, #0]
 8007226:	aa0c      	add	r2, sp, #48	; 0x30
 8007228:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800722c:	e5ce      	b.n	8006dcc <__kernel_rem_pio2+0x40c>
 800722e:	2400      	movs	r4, #0
 8007230:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8007234:	4621      	mov	r1, r4
 8007236:	e6d4      	b.n	8006fe2 <__kernel_rem_pio2+0x622>
 8007238:	2300      	movs	r3, #0
 800723a:	461c      	mov	r4, r3
 800723c:	e711      	b.n	8007062 <__kernel_rem_pio2+0x6a2>
 800723e:	bf00      	nop
 8007240:	3ff00000 	.word	0x3ff00000
 8007244:	41700000 	.word	0x41700000
 8007248:	3e700000 	.word	0x3e700000
 800724c:	00000000 	.word	0x00000000

08007250 <__kernel_sin>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007258:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800725c:	b085      	sub	sp, #20
 800725e:	460c      	mov	r4, r1
 8007260:	4690      	mov	r8, r2
 8007262:	4699      	mov	r9, r3
 8007264:	4605      	mov	r5, r0
 8007266:	da04      	bge.n	8007272 <__kernel_sin+0x22>
 8007268:	f001 fb80 	bl	800896c <__aeabi_d2iz>
 800726c:	2800      	cmp	r0, #0
 800726e:	f000 8085 	beq.w	800737c <__kernel_sin+0x12c>
 8007272:	462a      	mov	r2, r5
 8007274:	4623      	mov	r3, r4
 8007276:	4628      	mov	r0, r5
 8007278:	4621      	mov	r1, r4
 800727a:	f001 f8c7 	bl	800840c <__aeabi_dmul>
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4628      	mov	r0, r5
 8007288:	4621      	mov	r1, r4
 800728a:	f001 f8bf 	bl	800840c <__aeabi_dmul>
 800728e:	a33e      	add	r3, pc, #248	; (adr r3, 8007388 <__kernel_sin+0x138>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	4682      	mov	sl, r0
 8007296:	468b      	mov	fp, r1
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	f001 f8b6 	bl	800840c <__aeabi_dmul>
 80072a0:	a33b      	add	r3, pc, #236	; (adr r3, 8007390 <__kernel_sin+0x140>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f000 fefd 	bl	80080a4 <__aeabi_dsub>
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	f001 f8ad 	bl	800840c <__aeabi_dmul>
 80072b2:	a339      	add	r3, pc, #228	; (adr r3, 8007398 <__kernel_sin+0x148>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f000 fef6 	bl	80080a8 <__adddf3>
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	f001 f8a4 	bl	800840c <__aeabi_dmul>
 80072c4:	a336      	add	r3, pc, #216	; (adr r3, 80073a0 <__kernel_sin+0x150>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f000 feeb 	bl	80080a4 <__aeabi_dsub>
 80072ce:	4632      	mov	r2, r6
 80072d0:	463b      	mov	r3, r7
 80072d2:	f001 f89b 	bl	800840c <__aeabi_dmul>
 80072d6:	a334      	add	r3, pc, #208	; (adr r3, 80073a8 <__kernel_sin+0x158>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f000 fee4 	bl	80080a8 <__adddf3>
 80072e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072e2:	e9cd 0100 	strd	r0, r1, [sp]
 80072e6:	b39b      	cbz	r3, 8007350 <__kernel_sin+0x100>
 80072e8:	2200      	movs	r2, #0
 80072ea:	4b33      	ldr	r3, [pc, #204]	; (80073b8 <__kernel_sin+0x168>)
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	f001 f88c 	bl	800840c <__aeabi_dmul>
 80072f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fc:	4650      	mov	r0, sl
 80072fe:	4659      	mov	r1, fp
 8007300:	f001 f884 	bl	800840c <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730c:	f000 feca 	bl	80080a4 <__aeabi_dsub>
 8007310:	4632      	mov	r2, r6
 8007312:	463b      	mov	r3, r7
 8007314:	f001 f87a 	bl	800840c <__aeabi_dmul>
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	f000 fec2 	bl	80080a4 <__aeabi_dsub>
 8007320:	a323      	add	r3, pc, #140	; (adr r3, 80073b0 <__kernel_sin+0x160>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	4606      	mov	r6, r0
 8007328:	460f      	mov	r7, r1
 800732a:	4650      	mov	r0, sl
 800732c:	4659      	mov	r1, fp
 800732e:	f001 f86d 	bl	800840c <__aeabi_dmul>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4630      	mov	r0, r6
 8007338:	4639      	mov	r1, r7
 800733a:	f000 feb5 	bl	80080a8 <__adddf3>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4628      	mov	r0, r5
 8007344:	4621      	mov	r1, r4
 8007346:	f000 fead 	bl	80080a4 <__aeabi_dsub>
 800734a:	b005      	add	sp, #20
 800734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4630      	mov	r0, r6
 8007356:	4639      	mov	r1, r7
 8007358:	f001 f858 	bl	800840c <__aeabi_dmul>
 800735c:	a314      	add	r3, pc, #80	; (adr r3, 80073b0 <__kernel_sin+0x160>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f000 fe9f 	bl	80080a4 <__aeabi_dsub>
 8007366:	4652      	mov	r2, sl
 8007368:	465b      	mov	r3, fp
 800736a:	f001 f84f 	bl	800840c <__aeabi_dmul>
 800736e:	462a      	mov	r2, r5
 8007370:	4623      	mov	r3, r4
 8007372:	f000 fe99 	bl	80080a8 <__adddf3>
 8007376:	b005      	add	sp, #20
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4628      	mov	r0, r5
 800737e:	4621      	mov	r1, r4
 8007380:	b005      	add	sp, #20
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	bf00      	nop
 8007388:	5acfd57c 	.word	0x5acfd57c
 800738c:	3de5d93a 	.word	0x3de5d93a
 8007390:	8a2b9ceb 	.word	0x8a2b9ceb
 8007394:	3e5ae5e6 	.word	0x3e5ae5e6
 8007398:	57b1fe7d 	.word	0x57b1fe7d
 800739c:	3ec71de3 	.word	0x3ec71de3
 80073a0:	19c161d5 	.word	0x19c161d5
 80073a4:	3f2a01a0 	.word	0x3f2a01a0
 80073a8:	1110f8a6 	.word	0x1110f8a6
 80073ac:	3f811111 	.word	0x3f811111
 80073b0:	55555549 	.word	0x55555549
 80073b4:	3fc55555 	.word	0x3fc55555
 80073b8:	3fe00000 	.word	0x3fe00000

080073bc <__kernel_cosf>:
 80073bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80073c4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80073c8:	4606      	mov	r6, r0
 80073ca:	460f      	mov	r7, r1
 80073cc:	da49      	bge.n	8007462 <__kernel_cosf+0xa6>
 80073ce:	f001 fe2f 	bl	8009030 <__aeabi_f2iz>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f000 809d 	beq.w	8007512 <__kernel_cosf+0x156>
 80073d8:	4631      	mov	r1, r6
 80073da:	4630      	mov	r0, r6
 80073dc:	f001 fc4c 	bl	8008c78 <__aeabi_fmul>
 80073e0:	4605      	mov	r5, r0
 80073e2:	494e      	ldr	r1, [pc, #312]	; (800751c <__kernel_cosf+0x160>)
 80073e4:	f001 fc48 	bl	8008c78 <__aeabi_fmul>
 80073e8:	494d      	ldr	r1, [pc, #308]	; (8007520 <__kernel_cosf+0x164>)
 80073ea:	f001 fb3d 	bl	8008a68 <__addsf3>
 80073ee:	4629      	mov	r1, r5
 80073f0:	f001 fc42 	bl	8008c78 <__aeabi_fmul>
 80073f4:	494b      	ldr	r1, [pc, #300]	; (8007524 <__kernel_cosf+0x168>)
 80073f6:	f001 fb35 	bl	8008a64 <__aeabi_fsub>
 80073fa:	4629      	mov	r1, r5
 80073fc:	f001 fc3c 	bl	8008c78 <__aeabi_fmul>
 8007400:	4949      	ldr	r1, [pc, #292]	; (8007528 <__kernel_cosf+0x16c>)
 8007402:	f001 fb31 	bl	8008a68 <__addsf3>
 8007406:	4629      	mov	r1, r5
 8007408:	f001 fc36 	bl	8008c78 <__aeabi_fmul>
 800740c:	4947      	ldr	r1, [pc, #284]	; (800752c <__kernel_cosf+0x170>)
 800740e:	f001 fb29 	bl	8008a64 <__aeabi_fsub>
 8007412:	4629      	mov	r1, r5
 8007414:	f001 fc30 	bl	8008c78 <__aeabi_fmul>
 8007418:	4945      	ldr	r1, [pc, #276]	; (8007530 <__kernel_cosf+0x174>)
 800741a:	f001 fb25 	bl	8008a68 <__addsf3>
 800741e:	4629      	mov	r1, r5
 8007420:	f001 fc2a 	bl	8008c78 <__aeabi_fmul>
 8007424:	4680      	mov	r8, r0
 8007426:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800742a:	4628      	mov	r0, r5
 800742c:	f001 fc24 	bl	8008c78 <__aeabi_fmul>
 8007430:	4641      	mov	r1, r8
 8007432:	4604      	mov	r4, r0
 8007434:	4628      	mov	r0, r5
 8007436:	f001 fc1f 	bl	8008c78 <__aeabi_fmul>
 800743a:	4639      	mov	r1, r7
 800743c:	4605      	mov	r5, r0
 800743e:	4630      	mov	r0, r6
 8007440:	f001 fc1a 	bl	8008c78 <__aeabi_fmul>
 8007444:	4601      	mov	r1, r0
 8007446:	4628      	mov	r0, r5
 8007448:	f001 fb0c 	bl	8008a64 <__aeabi_fsub>
 800744c:	4601      	mov	r1, r0
 800744e:	4620      	mov	r0, r4
 8007450:	f001 fb08 	bl	8008a64 <__aeabi_fsub>
 8007454:	4601      	mov	r1, r0
 8007456:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800745a:	f001 fb03 	bl	8008a64 <__aeabi_fsub>
 800745e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007462:	4601      	mov	r1, r0
 8007464:	f001 fc08 	bl	8008c78 <__aeabi_fmul>
 8007468:	4605      	mov	r5, r0
 800746a:	492c      	ldr	r1, [pc, #176]	; (800751c <__kernel_cosf+0x160>)
 800746c:	f001 fc04 	bl	8008c78 <__aeabi_fmul>
 8007470:	492b      	ldr	r1, [pc, #172]	; (8007520 <__kernel_cosf+0x164>)
 8007472:	f001 faf9 	bl	8008a68 <__addsf3>
 8007476:	4629      	mov	r1, r5
 8007478:	f001 fbfe 	bl	8008c78 <__aeabi_fmul>
 800747c:	4929      	ldr	r1, [pc, #164]	; (8007524 <__kernel_cosf+0x168>)
 800747e:	f001 faf1 	bl	8008a64 <__aeabi_fsub>
 8007482:	4629      	mov	r1, r5
 8007484:	f001 fbf8 	bl	8008c78 <__aeabi_fmul>
 8007488:	4927      	ldr	r1, [pc, #156]	; (8007528 <__kernel_cosf+0x16c>)
 800748a:	f001 faed 	bl	8008a68 <__addsf3>
 800748e:	4629      	mov	r1, r5
 8007490:	f001 fbf2 	bl	8008c78 <__aeabi_fmul>
 8007494:	4925      	ldr	r1, [pc, #148]	; (800752c <__kernel_cosf+0x170>)
 8007496:	f001 fae5 	bl	8008a64 <__aeabi_fsub>
 800749a:	4629      	mov	r1, r5
 800749c:	f001 fbec 	bl	8008c78 <__aeabi_fmul>
 80074a0:	4923      	ldr	r1, [pc, #140]	; (8007530 <__kernel_cosf+0x174>)
 80074a2:	f001 fae1 	bl	8008a68 <__addsf3>
 80074a6:	4629      	mov	r1, r5
 80074a8:	f001 fbe6 	bl	8008c78 <__aeabi_fmul>
 80074ac:	4b21      	ldr	r3, [pc, #132]	; (8007534 <__kernel_cosf+0x178>)
 80074ae:	4680      	mov	r8, r0
 80074b0:	429c      	cmp	r4, r3
 80074b2:	ddb8      	ble.n	8007426 <__kernel_cosf+0x6a>
 80074b4:	4b20      	ldr	r3, [pc, #128]	; (8007538 <__kernel_cosf+0x17c>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	dc27      	bgt.n	800750a <__kernel_cosf+0x14e>
 80074ba:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 80074be:	4621      	mov	r1, r4
 80074c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80074c4:	f001 face 	bl	8008a64 <__aeabi_fsub>
 80074c8:	4681      	mov	r9, r0
 80074ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80074ce:	4628      	mov	r0, r5
 80074d0:	f001 fbd2 	bl	8008c78 <__aeabi_fmul>
 80074d4:	4621      	mov	r1, r4
 80074d6:	f001 fac5 	bl	8008a64 <__aeabi_fsub>
 80074da:	4641      	mov	r1, r8
 80074dc:	4604      	mov	r4, r0
 80074de:	4628      	mov	r0, r5
 80074e0:	f001 fbca 	bl	8008c78 <__aeabi_fmul>
 80074e4:	4639      	mov	r1, r7
 80074e6:	4605      	mov	r5, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	f001 fbc5 	bl	8008c78 <__aeabi_fmul>
 80074ee:	4601      	mov	r1, r0
 80074f0:	4628      	mov	r0, r5
 80074f2:	f001 fab7 	bl	8008a64 <__aeabi_fsub>
 80074f6:	4601      	mov	r1, r0
 80074f8:	4620      	mov	r0, r4
 80074fa:	f001 fab3 	bl	8008a64 <__aeabi_fsub>
 80074fe:	4601      	mov	r1, r0
 8007500:	4648      	mov	r0, r9
 8007502:	f001 faaf 	bl	8008a64 <__aeabi_fsub>
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8007540 <__kernel_cosf+0x184>
 800750e:	4c0b      	ldr	r4, [pc, #44]	; (800753c <__kernel_cosf+0x180>)
 8007510:	e7db      	b.n	80074ca <__kernel_cosf+0x10e>
 8007512:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751a:	bf00      	nop
 800751c:	ad47d74e 	.word	0xad47d74e
 8007520:	310f74f6 	.word	0x310f74f6
 8007524:	3493f27c 	.word	0x3493f27c
 8007528:	37d00d01 	.word	0x37d00d01
 800752c:	3ab60b61 	.word	0x3ab60b61
 8007530:	3d2aaaab 	.word	0x3d2aaaab
 8007534:	3e999999 	.word	0x3e999999
 8007538:	3f480000 	.word	0x3f480000
 800753c:	3e900000 	.word	0x3e900000
 8007540:	3f380000 	.word	0x3f380000

08007544 <__kernel_rem_pio2f>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	461c      	mov	r4, r3
 800754a:	b0dd      	sub	sp, #372	; 0x174
 800754c:	9107      	str	r1, [sp, #28]
 800754e:	1e61      	subs	r1, r4, #1
 8007550:	9101      	str	r1, [sp, #4]
 8007552:	9308      	str	r3, [sp, #32]
 8007554:	9966      	ldr	r1, [sp, #408]	; 0x198
 8007556:	4b8c      	ldr	r3, [pc, #560]	; (8007788 <__kernel_rem_pio2f+0x244>)
 8007558:	9002      	str	r0, [sp, #8]
 800755a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	1ed3      	subs	r3, r2, #3
 8007562:	bf48      	it	mi
 8007564:	1d13      	addmi	r3, r2, #4
 8007566:	10db      	asrs	r3, r3, #3
 8007568:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800756c:	4619      	mov	r1, r3
 800756e:	9309      	str	r3, [sp, #36]	; 0x24
 8007570:	3301      	adds	r3, #1
 8007572:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9a01      	ldr	r2, [sp, #4]
 800757a:	9b05      	ldr	r3, [sp, #20]
 800757c:	1a8e      	subs	r6, r1, r2
 800757e:	189c      	adds	r4, r3, r2
 8007580:	d417      	bmi.n	80075b2 <__kernel_rem_pio2f+0x6e>
 8007582:	4434      	add	r4, r6
 8007584:	2500      	movs	r5, #0
 8007586:	3401      	adds	r4, #1
 8007588:	af1f      	add	r7, sp, #124	; 0x7c
 800758a:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
 800758e:	e008      	b.n	80075a2 <__kernel_rem_pio2f+0x5e>
 8007590:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
 8007594:	f001 fb1c 	bl	8008bd0 <__aeabi_i2f>
 8007598:	3601      	adds	r6, #1
 800759a:	42a6      	cmp	r6, r4
 800759c:	f847 0f04 	str.w	r0, [r7, #4]!
 80075a0:	d007      	beq.n	80075b2 <__kernel_rem_pio2f+0x6e>
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	daf4      	bge.n	8007590 <__kernel_rem_pio2f+0x4c>
 80075a6:	4628      	mov	r0, r5
 80075a8:	3601      	adds	r6, #1
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	f847 0f04 	str.w	r0, [r7, #4]!
 80075b0:	d1f7      	bne.n	80075a2 <__kernel_rem_pio2f+0x5e>
 80075b2:	9b05      	ldr	r3, [sp, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db28      	blt.n	800760a <__kernel_rem_pio2f+0xc6>
 80075b8:	f04f 0900 	mov.w	r9, #0
 80075bc:	9b08      	ldr	r3, [sp, #32]
 80075be:	aa48      	add	r2, sp, #288	; 0x120
 80075c0:	009e      	lsls	r6, r3, #2
 80075c2:	9b02      	ldr	r3, [sp, #8]
 80075c4:	1f35      	subs	r5, r6, #4
 80075c6:	441d      	add	r5, r3
 80075c8:	ab20      	add	r3, sp, #128	; 0x80
 80075ca:	441e      	add	r6, r3
 80075cc:	9b05      	ldr	r3, [sp, #20]
 80075ce:	af47      	add	r7, sp, #284	; 0x11c
 80075d0:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f2c0 82b7 	blt.w	8007b4a <__kernel_rem_pio2f+0x606>
 80075dc:	46b3      	mov	fp, r6
 80075de:	46ca      	mov	sl, r9
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	1f1c      	subs	r4, r3, #4
 80075e4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80075e8:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80075ec:	f001 fb44 	bl	8008c78 <__aeabi_fmul>
 80075f0:	4601      	mov	r1, r0
 80075f2:	4650      	mov	r0, sl
 80075f4:	f001 fa38 	bl	8008a68 <__addsf3>
 80075f8:	42ac      	cmp	r4, r5
 80075fa:	4682      	mov	sl, r0
 80075fc:	d1f2      	bne.n	80075e4 <__kernel_rem_pio2f+0xa0>
 80075fe:	f847 af04 	str.w	sl, [r7, #4]!
 8007602:	4547      	cmp	r7, r8
 8007604:	f106 0604 	add.w	r6, r6, #4
 8007608:	d1e4      	bne.n	80075d4 <__kernel_rem_pio2f+0x90>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8007610:	469b      	mov	fp, r3
 8007612:	46d8      	mov	r8, fp
 8007614:	4413      	add	r3, r2
 8007616:	9908      	ldr	r1, [sp, #32]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	9802      	ldr	r0, [sp, #8]
 800761c:	440a      	add	r2, r1
 800761e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8007622:	1f19      	subs	r1, r3, #4
 8007624:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8007628:	4453      	add	r3, sl
 800762a:	eb0a 0201 	add.w	r2, sl, r1
 800762e:	920a      	str	r2, [sp, #40]	; 0x28
 8007630:	930b      	str	r3, [sp, #44]	; 0x2c
 8007632:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8007636:	aa5c      	add	r2, sp, #368	; 0x170
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	f1b8 0f00 	cmp.w	r8, #0
 800763e:	4413      	add	r3, r2
 8007640:	f853 9c50 	ldr.w	r9, [r3, #-80]
 8007644:	dd22      	ble.n	800768c <__kernel_rem_pio2f+0x148>
 8007646:	eb02 0488 	add.w	r4, r2, r8, lsl #2
 800764a:	3c54      	subs	r4, #84	; 0x54
 800764c:	ae0b      	add	r6, sp, #44	; 0x2c
 800764e:	af47      	add	r7, sp, #284	; 0x11c
 8007650:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007654:	4648      	mov	r0, r9
 8007656:	f001 fb0f 	bl	8008c78 <__aeabi_fmul>
 800765a:	f001 fce9 	bl	8009030 <__aeabi_f2iz>
 800765e:	f001 fab7 	bl	8008bd0 <__aeabi_i2f>
 8007662:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007666:	4683      	mov	fp, r0
 8007668:	f001 fb06 	bl	8008c78 <__aeabi_fmul>
 800766c:	4601      	mov	r1, r0
 800766e:	4648      	mov	r0, r9
 8007670:	f001 f9f8 	bl	8008a64 <__aeabi_fsub>
 8007674:	f001 fcdc 	bl	8009030 <__aeabi_f2iz>
 8007678:	f854 1904 	ldr.w	r1, [r4], #-4
 800767c:	f846 0f04 	str.w	r0, [r6, #4]!
 8007680:	4658      	mov	r0, fp
 8007682:	f001 f9f1 	bl	8008a68 <__addsf3>
 8007686:	42bc      	cmp	r4, r7
 8007688:	4681      	mov	r9, r0
 800768a:	d1e1      	bne.n	8007650 <__kernel_rem_pio2f+0x10c>
 800768c:	9e04      	ldr	r6, [sp, #16]
 800768e:	4648      	mov	r0, r9
 8007690:	4631      	mov	r1, r6
 8007692:	f000 fc9d 	bl	8007fd0 <scalbnf>
 8007696:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800769a:	4604      	mov	r4, r0
 800769c:	f001 faec 	bl	8008c78 <__aeabi_fmul>
 80076a0:	f000 fc50 	bl	8007f44 <floorf>
 80076a4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80076a8:	f001 fae6 	bl	8008c78 <__aeabi_fmul>
 80076ac:	4601      	mov	r1, r0
 80076ae:	4620      	mov	r0, r4
 80076b0:	f001 f9d8 	bl	8008a64 <__aeabi_fsub>
 80076b4:	4604      	mov	r4, r0
 80076b6:	f001 fcbb 	bl	8009030 <__aeabi_f2iz>
 80076ba:	4681      	mov	r9, r0
 80076bc:	9006      	str	r0, [sp, #24]
 80076be:	f001 fa87 	bl	8008bd0 <__aeabi_i2f>
 80076c2:	4601      	mov	r1, r0
 80076c4:	4620      	mov	r0, r4
 80076c6:	f001 f9cd 	bl	8008a64 <__aeabi_fsub>
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	4607      	mov	r7, r0
 80076ce:	f340 80e4 	ble.w	800789a <__kernel_rem_pio2f+0x356>
 80076d2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80076d6:	f85a 4021 	ldr.w	r4, [sl, r1, lsl #2]
 80076da:	f1c6 0308 	rsb	r3, r6, #8
 80076de:	fa44 f203 	asr.w	r2, r4, r3
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	1ae4      	subs	r4, r4, r3
 80076e8:	f84a 4021 	str.w	r4, [sl, r1, lsl #2]
 80076ec:	4649      	mov	r1, r9
 80076ee:	f1c6 0307 	rsb	r3, r6, #7
 80076f2:	4411      	add	r1, r2
 80076f4:	9106      	str	r1, [sp, #24]
 80076f6:	411c      	asrs	r4, r3
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	dd5a      	ble.n	80077b2 <__kernel_rem_pio2f+0x26e>
 80076fc:	9b06      	ldr	r3, [sp, #24]
 80076fe:	f1b8 0f00 	cmp.w	r8, #0
 8007702:	f103 0301 	add.w	r3, r3, #1
 8007706:	9306      	str	r3, [sp, #24]
 8007708:	f340 823a 	ble.w	8007b80 <__kernel_rem_pio2f+0x63c>
 800770c:	f8da 6000 	ldr.w	r6, [sl]
 8007710:	2e00      	cmp	r6, #0
 8007712:	f040 8293 	bne.w	8007c3c <__kernel_rem_pio2f+0x6f8>
 8007716:	f1b8 0f01 	cmp.w	r8, #1
 800771a:	f340 8254 	ble.w	8007bc6 <__kernel_rem_pio2f+0x682>
 800771e:	4652      	mov	r2, sl
 8007720:	2301      	movs	r3, #1
 8007722:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8007726:	2e00      	cmp	r6, #0
 8007728:	f000 8249 	beq.w	8007bbe <__kernel_rem_pio2f+0x67a>
 800772c:	1c59      	adds	r1, r3, #1
 800772e:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8007732:	4588      	cmp	r8, r1
 8007734:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
 8007738:	dd14      	ble.n	8007764 <__kernel_rem_pio2f+0x220>
 800773a:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
 800773e:	3302      	adds	r3, #2
 8007740:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007744:	4598      	cmp	r8, r3
 8007746:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
 800774a:	dd0b      	ble.n	8007764 <__kernel_rem_pio2f+0x220>
 800774c:	9a03      	ldr	r2, [sp, #12]
 800774e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8007752:	4452      	add	r2, sl
 8007754:	4691      	mov	r9, r2
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800775c:	f843 2b04 	str.w	r2, [r3], #4
 8007760:	454b      	cmp	r3, r9
 8007762:	d1f8      	bne.n	8007756 <__kernel_rem_pio2f+0x212>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd10      	ble.n	800778c <__kernel_rem_pio2f+0x248>
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	2601      	movs	r6, #1
 800776e:	2b01      	cmp	r3, #1
 8007770:	f040 820e 	bne.w	8007b90 <__kernel_rem_pio2f+0x64c>
 8007774:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8007778:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
 8007784:	e20e      	b.n	8007ba4 <__kernel_rem_pio2f+0x660>
 8007786:	bf00      	nop
 8007788:	0800bddc 	.word	0x0800bddc
 800778c:	2c02      	cmp	r4, #2
 800778e:	d110      	bne.n	80077b2 <__kernel_rem_pio2f+0x26e>
 8007790:	4639      	mov	r1, r7
 8007792:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007796:	f001 f965 	bl	8008a64 <__aeabi_fsub>
 800779a:	4607      	mov	r7, r0
 800779c:	9904      	ldr	r1, [sp, #16]
 800779e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80077a2:	f000 fc15 	bl	8007fd0 <scalbnf>
 80077a6:	4601      	mov	r1, r0
 80077a8:	4638      	mov	r0, r7
 80077aa:	f001 f95b 	bl	8008a64 <__aeabi_fsub>
 80077ae:	2402      	movs	r4, #2
 80077b0:	4607      	mov	r7, r0
 80077b2:	2100      	movs	r1, #0
 80077b4:	4638      	mov	r0, r7
 80077b6:	f001 fbf3 	bl	8008fa0 <__aeabi_fcmpeq>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f000 8083 	beq.w	80078c6 <__kernel_rem_pio2f+0x382>
 80077c0:	9b05      	ldr	r3, [sp, #20]
 80077c2:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 80077c6:	42bb      	cmp	r3, r7
 80077c8:	dc0f      	bgt.n	80077ea <__kernel_rem_pio2f+0x2a6>
 80077ca:	2200      	movs	r2, #0
 80077cc:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 80077d0:	3b01      	subs	r3, #1
 80077d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80077d4:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80077d8:	f853 1904 	ldr.w	r1, [r3], #-4
 80077dc:	4283      	cmp	r3, r0
 80077de:	ea42 0201 	orr.w	r2, r2, r1
 80077e2:	d1f9      	bne.n	80077d8 <__kernel_rem_pio2f+0x294>
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	f040 809d 	bne.w	8007924 <__kernel_rem_pio2f+0x3e0>
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f040 81f4 	bne.w	8007be0 <__kernel_rem_pio2f+0x69c>
 80077f8:	2301      	movs	r3, #1
 80077fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077fc:	f852 1904 	ldr.w	r1, [r2], #-4
 8007800:	3301      	adds	r3, #1
 8007802:	2900      	cmp	r1, #0
 8007804:	d0fa      	beq.n	80077fc <__kernel_rem_pio2f+0x2b8>
 8007806:	4443      	add	r3, r8
 8007808:	461a      	mov	r2, r3
 800780a:	9306      	str	r3, [sp, #24]
 800780c:	f108 0301 	add.w	r3, r8, #1
 8007810:	4293      	cmp	r3, r2
 8007812:	dc37      	bgt.n	8007884 <__kernel_rem_pio2f+0x340>
 8007814:	9908      	ldr	r1, [sp, #32]
 8007816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007818:	eb01 0708 	add.w	r7, r1, r8
 800781c:	a920      	add	r1, sp, #128	; 0x80
 800781e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007822:	9906      	ldr	r1, [sp, #24]
 8007824:	189e      	adds	r6, r3, r2
 8007826:	eb01 0902 	add.w	r9, r1, r2
 800782a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800782e:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8007830:	3e01      	subs	r6, #1
 8007832:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007836:	aa48      	add	r2, sp, #288	; 0x120
 8007838:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 800783c:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800783e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007842:	9303      	str	r3, [sp, #12]
 8007844:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8007848:	f001 f9c2 	bl	8008bd0 <__aeabi_i2f>
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	f847 0b04 	str.w	r0, [r7], #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	db19      	blt.n	800788a <__kernel_rem_pio2f+0x346>
 8007856:	46bb      	mov	fp, r7
 8007858:	f04f 0900 	mov.w	r9, #0
 800785c:	9b02      	ldr	r3, [sp, #8]
 800785e:	1f1c      	subs	r4, r3, #4
 8007860:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8007864:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8007868:	f001 fa06 	bl	8008c78 <__aeabi_fmul>
 800786c:	4601      	mov	r1, r0
 800786e:	4648      	mov	r0, r9
 8007870:	f001 f8fa 	bl	8008a68 <__addsf3>
 8007874:	42ac      	cmp	r4, r5
 8007876:	4681      	mov	r9, r0
 8007878:	d1f2      	bne.n	8007860 <__kernel_rem_pio2f+0x31c>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	f848 9b04 	str.w	r9, [r8], #4
 8007880:	429e      	cmp	r6, r3
 8007882:	d1df      	bne.n	8007844 <__kernel_rem_pio2f+0x300>
 8007884:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007888:	e6d3      	b.n	8007632 <__kernel_rem_pio2f+0xee>
 800788a:	f04f 0900 	mov.w	r9, #0
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	f848 9b04 	str.w	r9, [r8], #4
 8007894:	429e      	cmp	r6, r3
 8007896:	d1d5      	bne.n	8007844 <__kernel_rem_pio2f+0x300>
 8007898:	e7f4      	b.n	8007884 <__kernel_rem_pio2f+0x340>
 800789a:	d105      	bne.n	80078a8 <__kernel_rem_pio2f+0x364>
 800789c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80078a0:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 80078a4:	1224      	asrs	r4, r4, #8
 80078a6:	e727      	b.n	80076f8 <__kernel_rem_pio2f+0x1b4>
 80078a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80078ac:	f001 fb96 	bl	8008fdc <__aeabi_fcmpge>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f040 8153 	bne.w	8007b5c <__kernel_rem_pio2f+0x618>
 80078b6:	4604      	mov	r4, r0
 80078b8:	2100      	movs	r1, #0
 80078ba:	4638      	mov	r0, r7
 80078bc:	f001 fb70 	bl	8008fa0 <__aeabi_fcmpeq>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	f47f af7d 	bne.w	80077c0 <__kernel_rem_pio2f+0x27c>
 80078c6:	9e04      	ldr	r6, [sp, #16]
 80078c8:	4638      	mov	r0, r7
 80078ca:	4271      	negs	r1, r6
 80078cc:	f000 fb80 	bl	8007fd0 <scalbnf>
 80078d0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80078d4:	46a1      	mov	r9, r4
 80078d6:	4604      	mov	r4, r0
 80078d8:	f001 fb80 	bl	8008fdc <__aeabi_fcmpge>
 80078dc:	2800      	cmp	r0, #0
 80078de:	f000 818d 	beq.w	8007bfc <__kernel_rem_pio2f+0x6b8>
 80078e2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80078e6:	4620      	mov	r0, r4
 80078e8:	f001 f9c6 	bl	8008c78 <__aeabi_fmul>
 80078ec:	f001 fba0 	bl	8009030 <__aeabi_f2iz>
 80078f0:	f001 f96e 	bl	8008bd0 <__aeabi_i2f>
 80078f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80078f8:	4605      	mov	r5, r0
 80078fa:	f001 f9bd 	bl	8008c78 <__aeabi_fmul>
 80078fe:	4601      	mov	r1, r0
 8007900:	4620      	mov	r0, r4
 8007902:	f001 f8af 	bl	8008a64 <__aeabi_fsub>
 8007906:	f001 fb93 	bl	8009030 <__aeabi_f2iz>
 800790a:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
 800790e:	4628      	mov	r0, r5
 8007910:	f001 fb8e 	bl	8009030 <__aeabi_f2iz>
 8007914:	4633      	mov	r3, r6
 8007916:	f108 0701 	add.w	r7, r8, #1
 800791a:	3308      	adds	r3, #8
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
 8007922:	e012      	b.n	800794a <__kernel_rem_pio2f+0x406>
 8007924:	9a04      	ldr	r2, [sp, #16]
 8007926:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 800792a:	3a08      	subs	r2, #8
 800792c:	46a1      	mov	r9, r4
 800792e:	9204      	str	r2, [sp, #16]
 8007930:	b95b      	cbnz	r3, 800794a <__kernel_rem_pio2f+0x406>
 8007932:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8007936:	3b01      	subs	r3, #1
 8007938:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800793c:	f853 1904 	ldr.w	r1, [r3], #-4
 8007940:	3f01      	subs	r7, #1
 8007942:	3a08      	subs	r2, #8
 8007944:	2900      	cmp	r1, #0
 8007946:	d0f9      	beq.n	800793c <__kernel_rem_pio2f+0x3f8>
 8007948:	9204      	str	r2, [sp, #16]
 800794a:	9904      	ldr	r1, [sp, #16]
 800794c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007950:	f000 fb3e 	bl	8007fd0 <scalbnf>
 8007954:	2f00      	cmp	r7, #0
 8007956:	4604      	mov	r4, r0
 8007958:	f2c0 815c 	blt.w	8007c14 <__kernel_rem_pio2f+0x6d0>
 800795c:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8007960:	00bb      	lsls	r3, r7, #2
 8007962:	a948      	add	r1, sp, #288	; 0x120
 8007964:	1d1a      	adds	r2, r3, #4
 8007966:	eb01 0803 	add.w	r8, r1, r3
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	9202      	str	r2, [sp, #8]
 800796e:	eb0a 0b02 	add.w	fp, sl, r2
 8007972:	f108 0504 	add.w	r5, r8, #4
 8007976:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
 800797a:	f001 f929 	bl	8008bd0 <__aeabi_i2f>
 800797e:	4621      	mov	r1, r4
 8007980:	f001 f97a 	bl	8008c78 <__aeabi_fmul>
 8007984:	4631      	mov	r1, r6
 8007986:	f845 0d04 	str.w	r0, [r5, #-4]!
 800798a:	4620      	mov	r0, r4
 800798c:	f001 f974 	bl	8008c78 <__aeabi_fmul>
 8007990:	45d3      	cmp	fp, sl
 8007992:	4604      	mov	r4, r0
 8007994:	d1ef      	bne.n	8007976 <__kernel_rem_pio2f+0x432>
 8007996:	2600      	movs	r6, #0
 8007998:	46b2      	mov	sl, r6
 800799a:	f8dd b014 	ldr.w	fp, [sp, #20]
 800799e:	f1a8 0804 	sub.w	r8, r8, #4
 80079a2:	9703      	str	r7, [sp, #12]
 80079a4:	f1bb 0f00 	cmp.w	fp, #0
 80079a8:	bfb8      	it	lt
 80079aa:	2500      	movlt	r5, #0
 80079ac:	db15      	blt.n	80079da <__kernel_rem_pio2f+0x496>
 80079ae:	4ea5      	ldr	r6, [pc, #660]	; (8007c44 <__kernel_rem_pio2f+0x700>)
 80079b0:	4647      	mov	r7, r8
 80079b2:	48a5      	ldr	r0, [pc, #660]	; (8007c48 <__kernel_rem_pio2f+0x704>)
 80079b4:	2500      	movs	r5, #0
 80079b6:	2400      	movs	r4, #0
 80079b8:	e003      	b.n	80079c2 <__kernel_rem_pio2f+0x47e>
 80079ba:	4554      	cmp	r4, sl
 80079bc:	dc0d      	bgt.n	80079da <__kernel_rem_pio2f+0x496>
 80079be:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80079c2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80079c6:	f001 f957 	bl	8008c78 <__aeabi_fmul>
 80079ca:	4601      	mov	r1, r0
 80079cc:	4628      	mov	r0, r5
 80079ce:	f001 f84b 	bl	8008a68 <__addsf3>
 80079d2:	3401      	adds	r4, #1
 80079d4:	45a3      	cmp	fp, r4
 80079d6:	4605      	mov	r5, r0
 80079d8:	daef      	bge.n	80079ba <__kernel_rem_pio2f+0x476>
 80079da:	ab5c      	add	r3, sp, #368	; 0x170
 80079dc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80079e0:	f1a8 0804 	sub.w	r8, r8, #4
 80079e4:	f843 5ca0 	str.w	r5, [r3, #-160]
 80079e8:	ab46      	add	r3, sp, #280	; 0x118
 80079ea:	4543      	cmp	r3, r8
 80079ec:	f10a 0a01 	add.w	sl, sl, #1
 80079f0:	d1d8      	bne.n	80079a4 <__kernel_rem_pio2f+0x460>
 80079f2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80079f4:	9f03      	ldr	r7, [sp, #12]
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d85a      	bhi.n	8007ab0 <__kernel_rem_pio2f+0x56c>
 80079fa:	e8df f003 	tbb	[pc, r3]
 80079fe:	5f8e      	.short	0x5f8e
 8007a00:	025f      	.short	0x025f
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	f340 8104 	ble.w	8007c10 <__kernel_rem_pio2f+0x6cc>
 8007a08:	9a01      	ldr	r2, [sp, #4]
 8007a0a:	a95c      	add	r1, sp, #368	; 0x170
 8007a0c:	188b      	adds	r3, r1, r2
 8007a0e:	ad34      	add	r5, sp, #208	; 0xd0
 8007a10:	f853 6ca0 	ldr.w	r6, [r3, #-160]
 8007a14:	18ac      	adds	r4, r5, r2
 8007a16:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	f001 f823 	bl	8008a68 <__addsf3>
 8007a22:	4680      	mov	r8, r0
 8007a24:	4601      	mov	r1, r0
 8007a26:	4650      	mov	r0, sl
 8007a28:	f001 f81c 	bl	8008a64 <__aeabi_fsub>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	f001 f81b 	bl	8008a68 <__addsf3>
 8007a32:	6020      	str	r0, [r4, #0]
 8007a34:	f844 8d04 	str.w	r8, [r4, #-4]!
 8007a38:	42a5      	cmp	r5, r4
 8007a3a:	4646      	mov	r6, r8
 8007a3c:	d1eb      	bne.n	8007a16 <__kernel_rem_pio2f+0x4d2>
 8007a3e:	2f01      	cmp	r7, #1
 8007a40:	f340 80e6 	ble.w	8007c10 <__kernel_rem_pio2f+0x6cc>
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	aa5c      	add	r2, sp, #368	; 0x170
 8007a48:	18ec      	adds	r4, r5, r3
 8007a4a:	4625      	mov	r5, r4
 8007a4c:	18d3      	adds	r3, r2, r3
 8007a4e:	f853 6ca0 	ldr.w	r6, [r3, #-160]
 8007a52:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
 8007a56:	f855 8c04 	ldr.w	r8, [r5, #-4]
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	f001 f803 	bl	8008a68 <__addsf3>
 8007a62:	4607      	mov	r7, r0
 8007a64:	4601      	mov	r1, r0
 8007a66:	4640      	mov	r0, r8
 8007a68:	f000 fffc 	bl	8008a64 <__aeabi_fsub>
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	f000 fffb 	bl	8008a68 <__addsf3>
 8007a72:	6028      	str	r0, [r5, #0]
 8007a74:	f845 7d04 	str.w	r7, [r5, #-4]!
 8007a78:	45aa      	cmp	sl, r5
 8007a7a:	463e      	mov	r6, r7
 8007a7c:	d1eb      	bne.n	8007a56 <__kernel_rem_pio2f+0x512>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	3404      	adds	r4, #4
 8007a82:	ad36      	add	r5, sp, #216	; 0xd8
 8007a84:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007a88:	f000 ffee 	bl	8008a68 <__addsf3>
 8007a8c:	42a5      	cmp	r5, r4
 8007a8e:	d1f9      	bne.n	8007a84 <__kernel_rem_pio2f+0x540>
 8007a90:	f1b9 0f00 	cmp.w	r9, #0
 8007a94:	f000 80b9 	beq.w	8007c0a <__kernel_rem_pio2f+0x6c6>
 8007a98:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8007a9a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8007a9c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007aa0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8007aa4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007aa8:	9c07      	ldr	r4, [sp, #28]
 8007aaa:	60a0      	str	r0, [r4, #8]
 8007aac:	6022      	str	r2, [r4, #0]
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	f003 0007 	and.w	r0, r3, #7
 8007ab6:	b05d      	add	sp, #372	; 0x174
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	2000      	movs	r0, #0
 8007abe:	9c01      	ldr	r4, [sp, #4]
 8007ac0:	ad34      	add	r5, sp, #208	; 0xd0
 8007ac2:	3404      	adds	r4, #4
 8007ac4:	442c      	add	r4, r5
 8007ac6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007aca:	f000 ffcd 	bl	8008a68 <__addsf3>
 8007ace:	42ac      	cmp	r4, r5
 8007ad0:	d1f9      	bne.n	8007ac6 <__kernel_rem_pio2f+0x582>
 8007ad2:	f1b9 0f00 	cmp.w	r9, #0
 8007ad6:	f000 8085 	beq.w	8007be4 <__kernel_rem_pio2f+0x6a0>
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8007ae6:	f000 ffbd 	bl	8008a64 <__aeabi_fsub>
 8007aea:	2f00      	cmp	r7, #0
 8007aec:	dd0b      	ble.n	8007b06 <__kernel_rem_pio2f+0x5c2>
 8007aee:	2401      	movs	r4, #1
 8007af0:	ad34      	add	r5, sp, #208	; 0xd0
 8007af2:	3401      	adds	r4, #1
 8007af4:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8007af8:	f000 ffb6 	bl	8008a68 <__addsf3>
 8007afc:	42a7      	cmp	r7, r4
 8007afe:	daf8      	bge.n	8007af2 <__kernel_rem_pio2f+0x5ae>
 8007b00:	f1b9 0f00 	cmp.w	r9, #0
 8007b04:	d001      	beq.n	8007b0a <__kernel_rem_pio2f+0x5c6>
 8007b06:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007b0a:	9b07      	ldr	r3, [sp, #28]
 8007b0c:	6058      	str	r0, [r3, #4]
 8007b0e:	9b06      	ldr	r3, [sp, #24]
 8007b10:	f003 0007 	and.w	r0, r3, #7
 8007b14:	b05d      	add	sp, #372	; 0x174
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	ad34      	add	r5, sp, #208	; 0xd0
 8007b1e:	442b      	add	r3, r5
 8007b20:	2000      	movs	r0, #0
 8007b22:	461c      	mov	r4, r3
 8007b24:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007b28:	f000 ff9e 	bl	8008a68 <__addsf3>
 8007b2c:	42a5      	cmp	r5, r4
 8007b2e:	d1f9      	bne.n	8007b24 <__kernel_rem_pio2f+0x5e0>
 8007b30:	f1b9 0f00 	cmp.w	r9, #0
 8007b34:	d001      	beq.n	8007b3a <__kernel_rem_pio2f+0x5f6>
 8007b36:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	6018      	str	r0, [r3, #0]
 8007b3e:	9b06      	ldr	r3, [sp, #24]
 8007b40:	f003 0007 	and.w	r0, r3, #7
 8007b44:	b05d      	add	sp, #372	; 0x174
 8007b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4a:	46ca      	mov	sl, r9
 8007b4c:	f847 af04 	str.w	sl, [r7, #4]!
 8007b50:	4547      	cmp	r7, r8
 8007b52:	f106 0604 	add.w	r6, r6, #4
 8007b56:	f47f ad3d 	bne.w	80075d4 <__kernel_rem_pio2f+0x90>
 8007b5a:	e556      	b.n	800760a <__kernel_rem_pio2f+0xc6>
 8007b5c:	9b06      	ldr	r3, [sp, #24]
 8007b5e:	f1b8 0f00 	cmp.w	r8, #0
 8007b62:	f103 0301 	add.w	r3, r3, #1
 8007b66:	9306      	str	r3, [sp, #24]
 8007b68:	bfc8      	it	gt
 8007b6a:	2402      	movgt	r4, #2
 8007b6c:	f73f adce 	bgt.w	800770c <__kernel_rem_pio2f+0x1c8>
 8007b70:	4639      	mov	r1, r7
 8007b72:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007b76:	f000 ff75 	bl	8008a64 <__aeabi_fsub>
 8007b7a:	2402      	movs	r4, #2
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	e618      	b.n	80077b2 <__kernel_rem_pio2f+0x26e>
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	dd22      	ble.n	8007bcc <__kernel_rem_pio2f+0x688>
 8007b86:	2600      	movs	r6, #0
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	f43f adf2 	beq.w	8007774 <__kernel_rem_pio2f+0x230>
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d107      	bne.n	8007ba4 <__kernel_rem_pio2f+0x660>
 8007b94:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8007b98:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 8007b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
 8007ba4:	2c02      	cmp	r4, #2
 8007ba6:	f47f ae04 	bne.w	80077b2 <__kernel_rem_pio2f+0x26e>
 8007baa:	4639      	mov	r1, r7
 8007bac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007bb0:	f000 ff58 	bl	8008a64 <__aeabi_fsub>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	f43f adfb 	beq.w	80077b2 <__kernel_rem_pio2f+0x26e>
 8007bbc:	e5ee      	b.n	800779c <__kernel_rem_pio2f+0x258>
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4598      	cmp	r8, r3
 8007bc2:	f47f adae 	bne.w	8007722 <__kernel_rem_pio2f+0x1de>
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dcdd      	bgt.n	8007b88 <__kernel_rem_pio2f+0x644>
 8007bcc:	2c02      	cmp	r4, #2
 8007bce:	f47f adf0 	bne.w	80077b2 <__kernel_rem_pio2f+0x26e>
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007bd8:	f000 ff44 	bl	8008a64 <__aeabi_fsub>
 8007bdc:	4607      	mov	r7, r0
 8007bde:	e5e8      	b.n	80077b2 <__kernel_rem_pio2f+0x26e>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e610      	b.n	8007806 <__kernel_rem_pio2f+0x2c2>
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	4601      	mov	r1, r0
 8007be8:	6018      	str	r0, [r3, #0]
 8007bea:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8007bec:	f000 ff3a 	bl	8008a64 <__aeabi_fsub>
 8007bf0:	2f00      	cmp	r7, #0
 8007bf2:	f73f af7c 	bgt.w	8007aee <__kernel_rem_pio2f+0x5aa>
 8007bf6:	9b07      	ldr	r3, [sp, #28]
 8007bf8:	6058      	str	r0, [r3, #4]
 8007bfa:	e788      	b.n	8007b0e <__kernel_rem_pio2f+0x5ca>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f001 fa17 	bl	8009030 <__aeabi_f2iz>
 8007c02:	4647      	mov	r7, r8
 8007c04:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
 8007c08:	e69f      	b.n	800794a <__kernel_rem_pio2f+0x406>
 8007c0a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8007c0c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8007c0e:	e74b      	b.n	8007aa8 <__kernel_rem_pio2f+0x564>
 8007c10:	2000      	movs	r0, #0
 8007c12:	e73d      	b.n	8007a90 <__kernel_rem_pio2f+0x54c>
 8007c14:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	f63f af4a 	bhi.w	8007ab0 <__kernel_rem_pio2f+0x56c>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <__kernel_rem_pio2f+0x6e0>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007c35 	.word	0x08007c35
 8007c2c:	08007c35 	.word	0x08007c35
 8007c30:	08007c11 	.word	0x08007c11
 8007c34:	2000      	movs	r0, #0
 8007c36:	e74c      	b.n	8007ad2 <__kernel_rem_pio2f+0x58e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e779      	b.n	8007b30 <__kernel_rem_pio2f+0x5ec>
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e575      	b.n	800772e <__kernel_rem_pio2f+0x1ea>
 8007c42:	bf00      	nop
 8007c44:	0800bdb0 	.word	0x0800bdb0
 8007c48:	3fc90000 	.word	0x3fc90000

08007c4c <__kernel_sinf>:
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007c54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	4690      	mov	r8, r2
 8007c5e:	da03      	bge.n	8007c68 <__kernel_sinf+0x1c>
 8007c60:	f001 f9e6 	bl	8009030 <__aeabi_f2iz>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d058      	beq.n	8007d1a <__kernel_sinf+0xce>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f001 f804 	bl	8008c78 <__aeabi_fmul>
 8007c70:	4605      	mov	r5, r0
 8007c72:	4601      	mov	r1, r0
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 ffff 	bl	8008c78 <__aeabi_fmul>
 8007c7a:	4929      	ldr	r1, [pc, #164]	; (8007d20 <__kernel_sinf+0xd4>)
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fffa 	bl	8008c78 <__aeabi_fmul>
 8007c84:	4927      	ldr	r1, [pc, #156]	; (8007d24 <__kernel_sinf+0xd8>)
 8007c86:	f000 feed 	bl	8008a64 <__aeabi_fsub>
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f000 fff4 	bl	8008c78 <__aeabi_fmul>
 8007c90:	4925      	ldr	r1, [pc, #148]	; (8007d28 <__kernel_sinf+0xdc>)
 8007c92:	f000 fee9 	bl	8008a68 <__addsf3>
 8007c96:	4629      	mov	r1, r5
 8007c98:	f000 ffee 	bl	8008c78 <__aeabi_fmul>
 8007c9c:	4923      	ldr	r1, [pc, #140]	; (8007d2c <__kernel_sinf+0xe0>)
 8007c9e:	f000 fee1 	bl	8008a64 <__aeabi_fsub>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f000 ffe8 	bl	8008c78 <__aeabi_fmul>
 8007ca8:	4921      	ldr	r1, [pc, #132]	; (8007d30 <__kernel_sinf+0xe4>)
 8007caa:	f000 fedd 	bl	8008a68 <__addsf3>
 8007cae:	4681      	mov	r9, r0
 8007cb0:	f1b8 0f00 	cmp.w	r8, #0
 8007cb4:	d022      	beq.n	8007cfc <__kernel_sinf+0xb0>
 8007cb6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f000 ffdc 	bl	8008c78 <__aeabi_fmul>
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f000 ffd7 	bl	8008c78 <__aeabi_fmul>
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4640      	mov	r0, r8
 8007cce:	f000 fec9 	bl	8008a64 <__aeabi_fsub>
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f000 ffd0 	bl	8008c78 <__aeabi_fmul>
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f000 fec3 	bl	8008a64 <__aeabi_fsub>
 8007cde:	4915      	ldr	r1, [pc, #84]	; (8007d34 <__kernel_sinf+0xe8>)
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 ffc8 	bl	8008c78 <__aeabi_fmul>
 8007ce8:	4601      	mov	r1, r0
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 febc 	bl	8008a68 <__addsf3>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 feb6 	bl	8008a64 <__aeabi_fsub>
 8007cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 ffba 	bl	8008c78 <__aeabi_fmul>
 8007d04:	490b      	ldr	r1, [pc, #44]	; (8007d34 <__kernel_sinf+0xe8>)
 8007d06:	f000 fead 	bl	8008a64 <__aeabi_fsub>
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	f000 ffb4 	bl	8008c78 <__aeabi_fmul>
 8007d10:	4621      	mov	r1, r4
 8007d12:	f000 fea9 	bl	8008a68 <__addsf3>
 8007d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d20:	2f2ec9d3 	.word	0x2f2ec9d3
 8007d24:	32d72f34 	.word	0x32d72f34
 8007d28:	3638ef1b 	.word	0x3638ef1b
 8007d2c:	39500d01 	.word	0x39500d01
 8007d30:	3c088889 	.word	0x3c088889
 8007d34:	3e2aaaab 	.word	0x3e2aaaab

08007d38 <fabs>:
 8007d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <floor>:
 8007d40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d48:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007d4c:	2e13      	cmp	r6, #19
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	4688      	mov	r8, r1
 8007d56:	4607      	mov	r7, r0
 8007d58:	dc1d      	bgt.n	8007d96 <floor+0x56>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	db40      	blt.n	8007de0 <floor+0xa0>
 8007d5e:	4a3c      	ldr	r2, [pc, #240]	; (8007e50 <floor+0x110>)
 8007d60:	4686      	mov	lr, r0
 8007d62:	fa42 f906 	asr.w	r9, r2, r6
 8007d66:	ea01 0209 	and.w	r2, r1, r9
 8007d6a:	4302      	orrs	r2, r0
 8007d6c:	d018      	beq.n	8007da0 <floor+0x60>
 8007d6e:	a336      	add	r3, pc, #216	; (adr r3, 8007e48 <floor+0x108>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f000 f998 	bl	80080a8 <__adddf3>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f000 fdd6 	bl	800892c <__aeabi_dcmpgt>
 8007d80:	b120      	cbz	r0, 8007d8c <floor+0x4c>
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	db42      	blt.n	8007e0c <floor+0xcc>
 8007d86:	2700      	movs	r7, #0
 8007d88:	ea28 0509 	bic.w	r5, r8, r9
 8007d8c:	463c      	mov	r4, r7
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4620      	mov	r0, r4
 8007d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d96:	2e33      	cmp	r6, #51	; 0x33
 8007d98:	dd06      	ble.n	8007da8 <floor+0x68>
 8007d9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d9e:	d02f      	beq.n	8007e00 <floor+0xc0>
 8007da0:	4619      	mov	r1, r3
 8007da2:	4620      	mov	r0, r4
 8007da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007dac:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007db0:	fa29 f902 	lsr.w	r9, r9, r2
 8007db4:	ea10 0f09 	tst.w	r0, r9
 8007db8:	d0f2      	beq.n	8007da0 <floor+0x60>
 8007dba:	a323      	add	r3, pc, #140	; (adr r3, 8007e48 <floor+0x108>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f000 f972 	bl	80080a8 <__adddf3>
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f000 fdb0 	bl	800892c <__aeabi_dcmpgt>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d0dd      	beq.n	8007d8c <floor+0x4c>
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	db21      	blt.n	8007e18 <floor+0xd8>
 8007dd4:	4645      	mov	r5, r8
 8007dd6:	ea27 0709 	bic.w	r7, r7, r9
 8007dda:	463c      	mov	r4, r7
 8007ddc:	4629      	mov	r1, r5
 8007dde:	e7d7      	b.n	8007d90 <floor+0x50>
 8007de0:	a319      	add	r3, pc, #100	; (adr r3, 8007e48 <floor+0x108>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f000 f95f 	bl	80080a8 <__adddf3>
 8007dea:	2200      	movs	r2, #0
 8007dec:	2300      	movs	r3, #0
 8007dee:	f000 fd9d 	bl	800892c <__aeabi_dcmpgt>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d0ca      	beq.n	8007d8c <floor+0x4c>
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	db19      	blt.n	8007e2e <floor+0xee>
 8007dfa:	2700      	movs	r7, #0
 8007dfc:	463d      	mov	r5, r7
 8007dfe:	e7c5      	b.n	8007d8c <floor+0x4c>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	f000 f950 	bl	80080a8 <__adddf3>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e7ca      	b.n	8007da2 <floor+0x62>
 8007e0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e10:	fa43 f606 	asr.w	r6, r3, r6
 8007e14:	44b0      	add	r8, r6
 8007e16:	e7b6      	b.n	8007d86 <floor+0x46>
 8007e18:	2e14      	cmp	r6, #20
 8007e1a:	d010      	beq.n	8007e3e <floor+0xfe>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007e22:	fa03 f606 	lsl.w	r6, r3, r6
 8007e26:	1937      	adds	r7, r6, r4
 8007e28:	bf28      	it	cs
 8007e2a:	4498      	addcs	r8, r3
 8007e2c:	e7d2      	b.n	8007dd4 <floor+0x94>
 8007e2e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <floor+0x114>)
 8007e34:	4322      	orrs	r2, r4
 8007e36:	bf18      	it	ne
 8007e38:	461d      	movne	r5, r3
 8007e3a:	2700      	movs	r7, #0
 8007e3c:	e7a6      	b.n	8007d8c <floor+0x4c>
 8007e3e:	f105 0801 	add.w	r8, r5, #1
 8007e42:	e7c7      	b.n	8007dd4 <floor+0x94>
 8007e44:	f3af 8000 	nop.w
 8007e48:	8800759c 	.word	0x8800759c
 8007e4c:	7e37e43c 	.word	0x7e37e43c
 8007e50:	000fffff 	.word	0x000fffff
 8007e54:	bff00000 	.word	0xbff00000

08007e58 <matherr>:
 8007e58:	2000      	movs	r0, #0
 8007e5a:	4770      	bx	lr
 8007e5c:	0000      	movs	r0, r0
	...

08007e60 <scalbn>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4617      	mov	r7, r2
 8007e6e:	bb0e      	cbnz	r6, 8007eb4 <scalbn+0x54>
 8007e70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e74:	4303      	orrs	r3, r0
 8007e76:	4686      	mov	lr, r0
 8007e78:	d025      	beq.n	8007ec6 <scalbn+0x66>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4b2e      	ldr	r3, [pc, #184]	; (8007f38 <scalbn+0xd8>)
 8007e7e:	f000 fac5 	bl	800840c <__aeabi_dmul>
 8007e82:	4a2e      	ldr	r2, [pc, #184]	; (8007f3c <scalbn+0xdc>)
 8007e84:	4604      	mov	r4, r0
 8007e86:	4297      	cmp	r7, r2
 8007e88:	460d      	mov	r5, r1
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	db2a      	blt.n	8007ee4 <scalbn+0x84>
 8007e8e:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007e92:	3e36      	subs	r6, #54	; 0x36
 8007e94:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007e98:	443e      	add	r6, r7
 8007e9a:	4296      	cmp	r6, r2
 8007e9c:	dc28      	bgt.n	8007ef0 <scalbn+0x90>
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	dd12      	ble.n	8007ec8 <scalbn+0x68>
 8007ea2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ea6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007eaa:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007eb8:	4296      	cmp	r6, r2
 8007eba:	d1eb      	bne.n	8007e94 <scalbn+0x34>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	f000 f8f2 	bl	80080a8 <__adddf3>
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec8:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8007ecc:	da1d      	bge.n	8007f0a <scalbn+0xaa>
 8007ece:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ed2:	429f      	cmp	r7, r3
 8007ed4:	dc0c      	bgt.n	8007ef0 <scalbn+0x90>
 8007ed6:	a114      	add	r1, pc, #80	; (adr r1, 8007f28 <scalbn+0xc8>)
 8007ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007edc:	4622      	mov	r2, r4
 8007ede:	462b      	mov	r3, r5
 8007ee0:	f000 f8ce 	bl	8008080 <copysign>
 8007ee4:	a310      	add	r3, pc, #64	; (adr r3, 8007f28 <scalbn+0xc8>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f000 fa8f 	bl	800840c <__aeabi_dmul>
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	a10f      	add	r1, pc, #60	; (adr r1, 8007f30 <scalbn+0xd0>)
 8007ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef8:	462b      	mov	r3, r5
 8007efa:	f000 f8c1 	bl	8008080 <copysign>
 8007efe:	a30c      	add	r3, pc, #48	; (adr r3, 8007f30 <scalbn+0xd0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f000 fa82 	bl	800840c <__aeabi_dmul>
 8007f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f12:	3636      	adds	r6, #54	; 0x36
 8007f14:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8007f18:	4620      	mov	r0, r4
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <scalbn+0xe0>)
 8007f20:	f000 fa74 	bl	800840c <__aeabi_dmul>
 8007f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f26:	bf00      	nop
 8007f28:	c2f8f359 	.word	0xc2f8f359
 8007f2c:	01a56e1f 	.word	0x01a56e1f
 8007f30:	8800759c 	.word	0x8800759c
 8007f34:	7e37e43c 	.word	0x7e37e43c
 8007f38:	43500000 	.word	0x43500000
 8007f3c:	ffff3cb0 	.word	0xffff3cb0
 8007f40:	3c900000 	.word	0x3c900000

08007f44 <floorf>:
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8007f4c:	0dfc      	lsrs	r4, r7, #23
 8007f4e:	3c7f      	subs	r4, #127	; 0x7f
 8007f50:	2c16      	cmp	r4, #22
 8007f52:	4605      	mov	r5, r0
 8007f54:	dc13      	bgt.n	8007f7e <floorf+0x3a>
 8007f56:	2c00      	cmp	r4, #0
 8007f58:	4680      	mov	r8, r0
 8007f5a:	db1b      	blt.n	8007f94 <floorf+0x50>
 8007f5c:	4f19      	ldr	r7, [pc, #100]	; (8007fc4 <floorf+0x80>)
 8007f5e:	4127      	asrs	r7, r4
 8007f60:	4238      	tst	r0, r7
 8007f62:	d014      	beq.n	8007f8e <floorf+0x4a>
 8007f64:	4918      	ldr	r1, [pc, #96]	; (8007fc8 <floorf+0x84>)
 8007f66:	f000 fd7f 	bl	8008a68 <__addsf3>
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	f001 f840 	bl	8008ff0 <__aeabi_fcmpgt>
 8007f70:	b168      	cbz	r0, 8007f8e <floorf+0x4a>
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	db1b      	blt.n	8007fae <floorf+0x6a>
 8007f76:	ea28 0007 	bic.w	r0, r8, r7
 8007f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007f82:	d304      	bcc.n	8007f8e <floorf+0x4a>
 8007f84:	4601      	mov	r1, r0
 8007f86:	f000 fd6f 	bl	8008a68 <__addsf3>
 8007f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f8e:	4628      	mov	r0, r5
 8007f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f94:	490c      	ldr	r1, [pc, #48]	; (8007fc8 <floorf+0x84>)
 8007f96:	f000 fd67 	bl	8008a68 <__addsf3>
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	f001 f828 	bl	8008ff0 <__aeabi_fcmpgt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d0f4      	beq.n	8007f8e <floorf+0x4a>
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	db08      	blt.n	8007fba <floorf+0x76>
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fb2:	fa43 f404 	asr.w	r4, r3, r4
 8007fb6:	44a0      	add	r8, r4
 8007fb8:	e7dd      	b.n	8007f76 <floorf+0x32>
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	d0e7      	beq.n	8007f8e <floorf+0x4a>
 8007fbe:	4803      	ldr	r0, [pc, #12]	; (8007fcc <floorf+0x88>)
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	007fffff 	.word	0x007fffff
 8007fc8:	7149f2ca 	.word	0x7149f2ca
 8007fcc:	bf800000 	.word	0xbf800000

08007fd0 <scalbnf>:
 8007fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	d016      	beq.n	8008008 <scalbnf+0x38>
 8007fda:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007fde:	d20f      	bcs.n	8008000 <scalbnf+0x30>
 8007fe0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	d310      	bcc.n	800800a <scalbnf+0x3a>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	0dd0      	lsrs	r0, r2, #23
 8007fec:	4428      	add	r0, r5
 8007fee:	28fe      	cmp	r0, #254	; 0xfe
 8007ff0:	dc2e      	bgt.n	8008050 <scalbnf+0x80>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	dd1d      	ble.n	8008032 <scalbnf+0x62>
 8007ff6:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8007ffa:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	4601      	mov	r1, r0
 8008002:	f000 fd31 	bl	8008a68 <__addsf3>
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	bd38      	pop	{r3, r4, r5, pc}
 800800a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800800e:	f000 fe33 	bl	8008c78 <__aeabi_fmul>
 8008012:	4a18      	ldr	r2, [pc, #96]	; (8008074 <scalbnf+0xa4>)
 8008014:	4603      	mov	r3, r0
 8008016:	4295      	cmp	r5, r2
 8008018:	db07      	blt.n	800802a <scalbnf+0x5a>
 800801a:	4604      	mov	r4, r0
 800801c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 8008020:	3819      	subs	r0, #25
 8008022:	e7e3      	b.n	8007fec <scalbnf+0x1c>
 8008024:	4814      	ldr	r0, [pc, #80]	; (8008078 <scalbnf+0xa8>)
 8008026:	f000 f833 	bl	8008090 <copysignf>
 800802a:	4913      	ldr	r1, [pc, #76]	; (8008078 <scalbnf+0xa8>)
 800802c:	f000 fe24 	bl	8008c78 <__aeabi_fmul>
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	f110 0f16 	cmn.w	r0, #22
 8008036:	da13      	bge.n	8008060 <scalbnf+0x90>
 8008038:	f24c 3250 	movw	r2, #50000	; 0xc350
 800803c:	4295      	cmp	r5, r2
 800803e:	4619      	mov	r1, r3
 8008040:	ddf0      	ble.n	8008024 <scalbnf+0x54>
 8008042:	480e      	ldr	r0, [pc, #56]	; (800807c <scalbnf+0xac>)
 8008044:	f000 f824 	bl	8008090 <copysignf>
 8008048:	490c      	ldr	r1, [pc, #48]	; (800807c <scalbnf+0xac>)
 800804a:	f000 fe15 	bl	8008c78 <__aeabi_fmul>
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	4619      	mov	r1, r3
 8008052:	480a      	ldr	r0, [pc, #40]	; (800807c <scalbnf+0xac>)
 8008054:	f000 f81c 	bl	8008090 <copysignf>
 8008058:	4908      	ldr	r1, [pc, #32]	; (800807c <scalbnf+0xac>)
 800805a:	f000 fe0d 	bl	8008c78 <__aeabi_fmul>
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008064:	3019      	adds	r0, #25
 8008066:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800806a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800806e:	f000 fe03 	bl	8008c78 <__aeabi_fmul>
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	ffff3cb0 	.word	0xffff3cb0
 8008078:	0da24260 	.word	0x0da24260
 800807c:	7149f2ca 	.word	0x7149f2ca

08008080 <copysign>:
 8008080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008084:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008088:	ea42 0103 	orr.w	r1, r2, r3
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <copysignf>:
 8008090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008094:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008098:	4308      	orrs	r0, r1
 800809a:	4770      	bx	lr

0800809c <__aeabi_drsub>:
 800809c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080a0:	e002      	b.n	80080a8 <__adddf3>
 80080a2:	bf00      	nop

080080a4 <__aeabi_dsub>:
 80080a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080a8 <__adddf3>:
 80080a8:	b530      	push	{r4, r5, lr}
 80080aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080b2:	ea94 0f05 	teq	r4, r5
 80080b6:	bf08      	it	eq
 80080b8:	ea90 0f02 	teqeq	r0, r2
 80080bc:	bf1f      	itttt	ne
 80080be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80080c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80080c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80080ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80080ce:	f000 80e2 	beq.w	8008296 <__adddf3+0x1ee>
 80080d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80080d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80080da:	bfb8      	it	lt
 80080dc:	426d      	neglt	r5, r5
 80080de:	dd0c      	ble.n	80080fa <__adddf3+0x52>
 80080e0:	442c      	add	r4, r5
 80080e2:	ea80 0202 	eor.w	r2, r0, r2
 80080e6:	ea81 0303 	eor.w	r3, r1, r3
 80080ea:	ea82 0000 	eor.w	r0, r2, r0
 80080ee:	ea83 0101 	eor.w	r1, r3, r1
 80080f2:	ea80 0202 	eor.w	r2, r0, r2
 80080f6:	ea81 0303 	eor.w	r3, r1, r3
 80080fa:	2d36      	cmp	r5, #54	; 0x36
 80080fc:	bf88      	it	hi
 80080fe:	bd30      	pophi	{r4, r5, pc}
 8008100:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008104:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008108:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800810c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008110:	d002      	beq.n	8008118 <__adddf3+0x70>
 8008112:	4240      	negs	r0, r0
 8008114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008118:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800811c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008120:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008124:	d002      	beq.n	800812c <__adddf3+0x84>
 8008126:	4252      	negs	r2, r2
 8008128:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800812c:	ea94 0f05 	teq	r4, r5
 8008130:	f000 80a7 	beq.w	8008282 <__adddf3+0x1da>
 8008134:	f1a4 0401 	sub.w	r4, r4, #1
 8008138:	f1d5 0e20 	rsbs	lr, r5, #32
 800813c:	db0d      	blt.n	800815a <__adddf3+0xb2>
 800813e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008142:	fa22 f205 	lsr.w	r2, r2, r5
 8008146:	1880      	adds	r0, r0, r2
 8008148:	f141 0100 	adc.w	r1, r1, #0
 800814c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008150:	1880      	adds	r0, r0, r2
 8008152:	fa43 f305 	asr.w	r3, r3, r5
 8008156:	4159      	adcs	r1, r3
 8008158:	e00e      	b.n	8008178 <__adddf3+0xd0>
 800815a:	f1a5 0520 	sub.w	r5, r5, #32
 800815e:	f10e 0e20 	add.w	lr, lr, #32
 8008162:	2a01      	cmp	r2, #1
 8008164:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008168:	bf28      	it	cs
 800816a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800816e:	fa43 f305 	asr.w	r3, r3, r5
 8008172:	18c0      	adds	r0, r0, r3
 8008174:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800817c:	d507      	bpl.n	800818e <__adddf3+0xe6>
 800817e:	f04f 0e00 	mov.w	lr, #0
 8008182:	f1dc 0c00 	rsbs	ip, ip, #0
 8008186:	eb7e 0000 	sbcs.w	r0, lr, r0
 800818a:	eb6e 0101 	sbc.w	r1, lr, r1
 800818e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008192:	d31b      	bcc.n	80081cc <__adddf3+0x124>
 8008194:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008198:	d30c      	bcc.n	80081b4 <__adddf3+0x10c>
 800819a:	0849      	lsrs	r1, r1, #1
 800819c:	ea5f 0030 	movs.w	r0, r0, rrx
 80081a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081a4:	f104 0401 	add.w	r4, r4, #1
 80081a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081b0:	f080 809a 	bcs.w	80082e8 <__adddf3+0x240>
 80081b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081b8:	bf08      	it	eq
 80081ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80081be:	f150 0000 	adcs.w	r0, r0, #0
 80081c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80081c6:	ea41 0105 	orr.w	r1, r1, r5
 80081ca:	bd30      	pop	{r4, r5, pc}
 80081cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80081d0:	4140      	adcs	r0, r0
 80081d2:	eb41 0101 	adc.w	r1, r1, r1
 80081d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80081da:	f1a4 0401 	sub.w	r4, r4, #1
 80081de:	d1e9      	bne.n	80081b4 <__adddf3+0x10c>
 80081e0:	f091 0f00 	teq	r1, #0
 80081e4:	bf04      	itt	eq
 80081e6:	4601      	moveq	r1, r0
 80081e8:	2000      	moveq	r0, #0
 80081ea:	fab1 f381 	clz	r3, r1
 80081ee:	bf08      	it	eq
 80081f0:	3320      	addeq	r3, #32
 80081f2:	f1a3 030b 	sub.w	r3, r3, #11
 80081f6:	f1b3 0220 	subs.w	r2, r3, #32
 80081fa:	da0c      	bge.n	8008216 <__adddf3+0x16e>
 80081fc:	320c      	adds	r2, #12
 80081fe:	dd08      	ble.n	8008212 <__adddf3+0x16a>
 8008200:	f102 0c14 	add.w	ip, r2, #20
 8008204:	f1c2 020c 	rsb	r2, r2, #12
 8008208:	fa01 f00c 	lsl.w	r0, r1, ip
 800820c:	fa21 f102 	lsr.w	r1, r1, r2
 8008210:	e00c      	b.n	800822c <__adddf3+0x184>
 8008212:	f102 0214 	add.w	r2, r2, #20
 8008216:	bfd8      	it	le
 8008218:	f1c2 0c20 	rsble	ip, r2, #32
 800821c:	fa01 f102 	lsl.w	r1, r1, r2
 8008220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008224:	bfdc      	itt	le
 8008226:	ea41 010c 	orrle.w	r1, r1, ip
 800822a:	4090      	lslle	r0, r2
 800822c:	1ae4      	subs	r4, r4, r3
 800822e:	bfa2      	ittt	ge
 8008230:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008234:	4329      	orrge	r1, r5
 8008236:	bd30      	popge	{r4, r5, pc}
 8008238:	ea6f 0404 	mvn.w	r4, r4
 800823c:	3c1f      	subs	r4, #31
 800823e:	da1c      	bge.n	800827a <__adddf3+0x1d2>
 8008240:	340c      	adds	r4, #12
 8008242:	dc0e      	bgt.n	8008262 <__adddf3+0x1ba>
 8008244:	f104 0414 	add.w	r4, r4, #20
 8008248:	f1c4 0220 	rsb	r2, r4, #32
 800824c:	fa20 f004 	lsr.w	r0, r0, r4
 8008250:	fa01 f302 	lsl.w	r3, r1, r2
 8008254:	ea40 0003 	orr.w	r0, r0, r3
 8008258:	fa21 f304 	lsr.w	r3, r1, r4
 800825c:	ea45 0103 	orr.w	r1, r5, r3
 8008260:	bd30      	pop	{r4, r5, pc}
 8008262:	f1c4 040c 	rsb	r4, r4, #12
 8008266:	f1c4 0220 	rsb	r2, r4, #32
 800826a:	fa20 f002 	lsr.w	r0, r0, r2
 800826e:	fa01 f304 	lsl.w	r3, r1, r4
 8008272:	ea40 0003 	orr.w	r0, r0, r3
 8008276:	4629      	mov	r1, r5
 8008278:	bd30      	pop	{r4, r5, pc}
 800827a:	fa21 f004 	lsr.w	r0, r1, r4
 800827e:	4629      	mov	r1, r5
 8008280:	bd30      	pop	{r4, r5, pc}
 8008282:	f094 0f00 	teq	r4, #0
 8008286:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800828a:	bf06      	itte	eq
 800828c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008290:	3401      	addeq	r4, #1
 8008292:	3d01      	subne	r5, #1
 8008294:	e74e      	b.n	8008134 <__adddf3+0x8c>
 8008296:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800829a:	bf18      	it	ne
 800829c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082a0:	d029      	beq.n	80082f6 <__adddf3+0x24e>
 80082a2:	ea94 0f05 	teq	r4, r5
 80082a6:	bf08      	it	eq
 80082a8:	ea90 0f02 	teqeq	r0, r2
 80082ac:	d005      	beq.n	80082ba <__adddf3+0x212>
 80082ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80082b2:	bf04      	itt	eq
 80082b4:	4619      	moveq	r1, r3
 80082b6:	4610      	moveq	r0, r2
 80082b8:	bd30      	pop	{r4, r5, pc}
 80082ba:	ea91 0f03 	teq	r1, r3
 80082be:	bf1e      	ittt	ne
 80082c0:	2100      	movne	r1, #0
 80082c2:	2000      	movne	r0, #0
 80082c4:	bd30      	popne	{r4, r5, pc}
 80082c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80082ca:	d105      	bne.n	80082d8 <__adddf3+0x230>
 80082cc:	0040      	lsls	r0, r0, #1
 80082ce:	4149      	adcs	r1, r1
 80082d0:	bf28      	it	cs
 80082d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80082d6:	bd30      	pop	{r4, r5, pc}
 80082d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80082dc:	bf3c      	itt	cc
 80082de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80082e2:	bd30      	popcc	{r4, r5, pc}
 80082e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80082e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80082ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082f0:	f04f 0000 	mov.w	r0, #0
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082fa:	bf1a      	itte	ne
 80082fc:	4619      	movne	r1, r3
 80082fe:	4610      	movne	r0, r2
 8008300:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008304:	bf1c      	itt	ne
 8008306:	460b      	movne	r3, r1
 8008308:	4602      	movne	r2, r0
 800830a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800830e:	bf06      	itte	eq
 8008310:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008314:	ea91 0f03 	teqeq	r1, r3
 8008318:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800831c:	bd30      	pop	{r4, r5, pc}
 800831e:	bf00      	nop

08008320 <__aeabi_ui2d>:
 8008320:	f090 0f00 	teq	r0, #0
 8008324:	bf04      	itt	eq
 8008326:	2100      	moveq	r1, #0
 8008328:	4770      	bxeq	lr
 800832a:	b530      	push	{r4, r5, lr}
 800832c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008330:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008334:	f04f 0500 	mov.w	r5, #0
 8008338:	f04f 0100 	mov.w	r1, #0
 800833c:	e750      	b.n	80081e0 <__adddf3+0x138>
 800833e:	bf00      	nop

08008340 <__aeabi_i2d>:
 8008340:	f090 0f00 	teq	r0, #0
 8008344:	bf04      	itt	eq
 8008346:	2100      	moveq	r1, #0
 8008348:	4770      	bxeq	lr
 800834a:	b530      	push	{r4, r5, lr}
 800834c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008350:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008354:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008358:	bf48      	it	mi
 800835a:	4240      	negmi	r0, r0
 800835c:	f04f 0100 	mov.w	r1, #0
 8008360:	e73e      	b.n	80081e0 <__adddf3+0x138>
 8008362:	bf00      	nop

08008364 <__aeabi_f2d>:
 8008364:	0042      	lsls	r2, r0, #1
 8008366:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800836a:	ea4f 0131 	mov.w	r1, r1, rrx
 800836e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008372:	bf1f      	itttt	ne
 8008374:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008378:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800837c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008380:	4770      	bxne	lr
 8008382:	f092 0f00 	teq	r2, #0
 8008386:	bf14      	ite	ne
 8008388:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800839c:	e720      	b.n	80081e0 <__adddf3+0x138>
 800839e:	bf00      	nop

080083a0 <__aeabi_ul2d>:
 80083a0:	ea50 0201 	orrs.w	r2, r0, r1
 80083a4:	bf08      	it	eq
 80083a6:	4770      	bxeq	lr
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	f04f 0500 	mov.w	r5, #0
 80083ae:	e00a      	b.n	80083c6 <__aeabi_l2d+0x16>

080083b0 <__aeabi_l2d>:
 80083b0:	ea50 0201 	orrs.w	r2, r0, r1
 80083b4:	bf08      	it	eq
 80083b6:	4770      	bxeq	lr
 80083b8:	b530      	push	{r4, r5, lr}
 80083ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80083be:	d502      	bpl.n	80083c6 <__aeabi_l2d+0x16>
 80083c0:	4240      	negs	r0, r0
 80083c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80083c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80083d2:	f43f aedc 	beq.w	800818e <__adddf3+0xe6>
 80083d6:	f04f 0203 	mov.w	r2, #3
 80083da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80083de:	bf18      	it	ne
 80083e0:	3203      	addne	r2, #3
 80083e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80083e6:	bf18      	it	ne
 80083e8:	3203      	addne	r2, #3
 80083ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80083ee:	f1c2 0320 	rsb	r3, r2, #32
 80083f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80083f6:	fa20 f002 	lsr.w	r0, r0, r2
 80083fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80083fe:	ea40 000e 	orr.w	r0, r0, lr
 8008402:	fa21 f102 	lsr.w	r1, r1, r2
 8008406:	4414      	add	r4, r2
 8008408:	e6c1      	b.n	800818e <__adddf3+0xe6>
 800840a:	bf00      	nop

0800840c <__aeabi_dmul>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008412:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800841a:	bf1d      	ittte	ne
 800841c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008420:	ea94 0f0c 	teqne	r4, ip
 8008424:	ea95 0f0c 	teqne	r5, ip
 8008428:	f000 f8de 	bleq	80085e8 <__aeabi_dmul+0x1dc>
 800842c:	442c      	add	r4, r5
 800842e:	ea81 0603 	eor.w	r6, r1, r3
 8008432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800843a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800843e:	bf18      	it	ne
 8008440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800844c:	d038      	beq.n	80084c0 <__aeabi_dmul+0xb4>
 800844e:	fba0 ce02 	umull	ip, lr, r0, r2
 8008452:	f04f 0500 	mov.w	r5, #0
 8008456:	fbe1 e502 	umlal	lr, r5, r1, r2
 800845a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800845e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008462:	f04f 0600 	mov.w	r6, #0
 8008466:	fbe1 5603 	umlal	r5, r6, r1, r3
 800846a:	f09c 0f00 	teq	ip, #0
 800846e:	bf18      	it	ne
 8008470:	f04e 0e01 	orrne.w	lr, lr, #1
 8008474:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008478:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800847c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008480:	d204      	bcs.n	800848c <__aeabi_dmul+0x80>
 8008482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008486:	416d      	adcs	r5, r5
 8008488:	eb46 0606 	adc.w	r6, r6, r6
 800848c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800849c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084a4:	bf88      	it	hi
 80084a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084aa:	d81e      	bhi.n	80084ea <__aeabi_dmul+0xde>
 80084ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084b0:	bf08      	it	eq
 80084b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80084b6:	f150 0000 	adcs.w	r0, r0, #0
 80084ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80084c4:	ea46 0101 	orr.w	r1, r6, r1
 80084c8:	ea40 0002 	orr.w	r0, r0, r2
 80084cc:	ea81 0103 	eor.w	r1, r1, r3
 80084d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80084d4:	bfc2      	ittt	gt
 80084d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80084da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80084de:	bd70      	popgt	{r4, r5, r6, pc}
 80084e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084e4:	f04f 0e00 	mov.w	lr, #0
 80084e8:	3c01      	subs	r4, #1
 80084ea:	f300 80ab 	bgt.w	8008644 <__aeabi_dmul+0x238>
 80084ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80084f2:	bfde      	ittt	le
 80084f4:	2000      	movle	r0, #0
 80084f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80084fa:	bd70      	pople	{r4, r5, r6, pc}
 80084fc:	f1c4 0400 	rsb	r4, r4, #0
 8008500:	3c20      	subs	r4, #32
 8008502:	da35      	bge.n	8008570 <__aeabi_dmul+0x164>
 8008504:	340c      	adds	r4, #12
 8008506:	dc1b      	bgt.n	8008540 <__aeabi_dmul+0x134>
 8008508:	f104 0414 	add.w	r4, r4, #20
 800850c:	f1c4 0520 	rsb	r5, r4, #32
 8008510:	fa00 f305 	lsl.w	r3, r0, r5
 8008514:	fa20 f004 	lsr.w	r0, r0, r4
 8008518:	fa01 f205 	lsl.w	r2, r1, r5
 800851c:	ea40 0002 	orr.w	r0, r0, r2
 8008520:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800852c:	fa21 f604 	lsr.w	r6, r1, r4
 8008530:	eb42 0106 	adc.w	r1, r2, r6
 8008534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008538:	bf08      	it	eq
 800853a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f1c4 040c 	rsb	r4, r4, #12
 8008544:	f1c4 0520 	rsb	r5, r4, #32
 8008548:	fa00 f304 	lsl.w	r3, r0, r4
 800854c:	fa20 f005 	lsr.w	r0, r0, r5
 8008550:	fa01 f204 	lsl.w	r2, r1, r4
 8008554:	ea40 0002 	orr.w	r0, r0, r2
 8008558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800855c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008560:	f141 0100 	adc.w	r1, r1, #0
 8008564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008568:	bf08      	it	eq
 800856a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	f1c4 0520 	rsb	r5, r4, #32
 8008574:	fa00 f205 	lsl.w	r2, r0, r5
 8008578:	ea4e 0e02 	orr.w	lr, lr, r2
 800857c:	fa20 f304 	lsr.w	r3, r0, r4
 8008580:	fa01 f205 	lsl.w	r2, r1, r5
 8008584:	ea43 0302 	orr.w	r3, r3, r2
 8008588:	fa21 f004 	lsr.w	r0, r1, r4
 800858c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008590:	fa21 f204 	lsr.w	r2, r1, r4
 8008594:	ea20 0002 	bic.w	r0, r0, r2
 8008598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800859c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085a0:	bf08      	it	eq
 80085a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	f094 0f00 	teq	r4, #0
 80085ac:	d10f      	bne.n	80085ce <__aeabi_dmul+0x1c2>
 80085ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085b2:	0040      	lsls	r0, r0, #1
 80085b4:	eb41 0101 	adc.w	r1, r1, r1
 80085b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80085bc:	bf08      	it	eq
 80085be:	3c01      	subeq	r4, #1
 80085c0:	d0f7      	beq.n	80085b2 <__aeabi_dmul+0x1a6>
 80085c2:	ea41 0106 	orr.w	r1, r1, r6
 80085c6:	f095 0f00 	teq	r5, #0
 80085ca:	bf18      	it	ne
 80085cc:	4770      	bxne	lr
 80085ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80085d2:	0052      	lsls	r2, r2, #1
 80085d4:	eb43 0303 	adc.w	r3, r3, r3
 80085d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80085dc:	bf08      	it	eq
 80085de:	3d01      	subeq	r5, #1
 80085e0:	d0f7      	beq.n	80085d2 <__aeabi_dmul+0x1c6>
 80085e2:	ea43 0306 	orr.w	r3, r3, r6
 80085e6:	4770      	bx	lr
 80085e8:	ea94 0f0c 	teq	r4, ip
 80085ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085f0:	bf18      	it	ne
 80085f2:	ea95 0f0c 	teqne	r5, ip
 80085f6:	d00c      	beq.n	8008612 <__aeabi_dmul+0x206>
 80085f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085fc:	bf18      	it	ne
 80085fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008602:	d1d1      	bne.n	80085a8 <__aeabi_dmul+0x19c>
 8008604:	ea81 0103 	eor.w	r1, r1, r3
 8008608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800860c:	f04f 0000 	mov.w	r0, #0
 8008610:	bd70      	pop	{r4, r5, r6, pc}
 8008612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008616:	bf06      	itte	eq
 8008618:	4610      	moveq	r0, r2
 800861a:	4619      	moveq	r1, r3
 800861c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008620:	d019      	beq.n	8008656 <__aeabi_dmul+0x24a>
 8008622:	ea94 0f0c 	teq	r4, ip
 8008626:	d102      	bne.n	800862e <__aeabi_dmul+0x222>
 8008628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800862c:	d113      	bne.n	8008656 <__aeabi_dmul+0x24a>
 800862e:	ea95 0f0c 	teq	r5, ip
 8008632:	d105      	bne.n	8008640 <__aeabi_dmul+0x234>
 8008634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008638:	bf1c      	itt	ne
 800863a:	4610      	movne	r0, r2
 800863c:	4619      	movne	r1, r3
 800863e:	d10a      	bne.n	8008656 <__aeabi_dmul+0x24a>
 8008640:	ea81 0103 	eor.w	r1, r1, r3
 8008644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008648:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800864c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008650:	f04f 0000 	mov.w	r0, #0
 8008654:	bd70      	pop	{r4, r5, r6, pc}
 8008656:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800865a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800865e:	bd70      	pop	{r4, r5, r6, pc}

08008660 <__aeabi_ddiv>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800866a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800866e:	bf1d      	ittte	ne
 8008670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008674:	ea94 0f0c 	teqne	r4, ip
 8008678:	ea95 0f0c 	teqne	r5, ip
 800867c:	f000 f8a7 	bleq	80087ce <__aeabi_ddiv+0x16e>
 8008680:	eba4 0405 	sub.w	r4, r4, r5
 8008684:	ea81 0e03 	eor.w	lr, r1, r3
 8008688:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800868c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008690:	f000 8088 	beq.w	80087a4 <__aeabi_ddiv+0x144>
 8008694:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008698:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800869c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80086b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80086b8:	429d      	cmp	r5, r3
 80086ba:	bf08      	it	eq
 80086bc:	4296      	cmpeq	r6, r2
 80086be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80086c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80086c6:	d202      	bcs.n	80086ce <__aeabi_ddiv+0x6e>
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80086ce:	1ab6      	subs	r6, r6, r2
 80086d0:	eb65 0503 	sbc.w	r5, r5, r3
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80086da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80086de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80086e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80086e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086ea:	bf22      	ittt	cs
 80086ec:	1ab6      	subcs	r6, r6, r2
 80086ee:	4675      	movcs	r5, lr
 80086f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80086fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80086fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008702:	bf22      	ittt	cs
 8008704:	1ab6      	subcs	r6, r6, r2
 8008706:	4675      	movcs	r5, lr
 8008708:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008712:	ebb6 0e02 	subs.w	lr, r6, r2
 8008716:	eb75 0e03 	sbcs.w	lr, r5, r3
 800871a:	bf22      	ittt	cs
 800871c:	1ab6      	subcs	r6, r6, r2
 800871e:	4675      	movcs	r5, lr
 8008720:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	ebb6 0e02 	subs.w	lr, r6, r2
 800872e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008732:	bf22      	ittt	cs
 8008734:	1ab6      	subcs	r6, r6, r2
 8008736:	4675      	movcs	r5, lr
 8008738:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800873c:	ea55 0e06 	orrs.w	lr, r5, r6
 8008740:	d018      	beq.n	8008774 <__aeabi_ddiv+0x114>
 8008742:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008746:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800874a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800874e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008752:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008756:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800875a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800875e:	d1c0      	bne.n	80086e2 <__aeabi_ddiv+0x82>
 8008760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008764:	d10b      	bne.n	800877e <__aeabi_ddiv+0x11e>
 8008766:	ea41 0100 	orr.w	r1, r1, r0
 800876a:	f04f 0000 	mov.w	r0, #0
 800876e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008772:	e7b6      	b.n	80086e2 <__aeabi_ddiv+0x82>
 8008774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008778:	bf04      	itt	eq
 800877a:	4301      	orreq	r1, r0
 800877c:	2000      	moveq	r0, #0
 800877e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008782:	bf88      	it	hi
 8008784:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008788:	f63f aeaf 	bhi.w	80084ea <__aeabi_dmul+0xde>
 800878c:	ebb5 0c03 	subs.w	ip, r5, r3
 8008790:	bf04      	itt	eq
 8008792:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800879a:	f150 0000 	adcs.w	r0, r0, #0
 800879e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087b0:	bfc2      	ittt	gt
 80087b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80087b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80087ba:	bd70      	popgt	{r4, r5, r6, pc}
 80087bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087c0:	f04f 0e00 	mov.w	lr, #0
 80087c4:	3c01      	subs	r4, #1
 80087c6:	e690      	b.n	80084ea <__aeabi_dmul+0xde>
 80087c8:	ea45 0e06 	orr.w	lr, r5, r6
 80087cc:	e68d      	b.n	80084ea <__aeabi_dmul+0xde>
 80087ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80087d2:	ea94 0f0c 	teq	r4, ip
 80087d6:	bf08      	it	eq
 80087d8:	ea95 0f0c 	teqeq	r5, ip
 80087dc:	f43f af3b 	beq.w	8008656 <__aeabi_dmul+0x24a>
 80087e0:	ea94 0f0c 	teq	r4, ip
 80087e4:	d10a      	bne.n	80087fc <__aeabi_ddiv+0x19c>
 80087e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80087ea:	f47f af34 	bne.w	8008656 <__aeabi_dmul+0x24a>
 80087ee:	ea95 0f0c 	teq	r5, ip
 80087f2:	f47f af25 	bne.w	8008640 <__aeabi_dmul+0x234>
 80087f6:	4610      	mov	r0, r2
 80087f8:	4619      	mov	r1, r3
 80087fa:	e72c      	b.n	8008656 <__aeabi_dmul+0x24a>
 80087fc:	ea95 0f0c 	teq	r5, ip
 8008800:	d106      	bne.n	8008810 <__aeabi_ddiv+0x1b0>
 8008802:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008806:	f43f aefd 	beq.w	8008604 <__aeabi_dmul+0x1f8>
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	e722      	b.n	8008656 <__aeabi_dmul+0x24a>
 8008810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008814:	bf18      	it	ne
 8008816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800881a:	f47f aec5 	bne.w	80085a8 <__aeabi_dmul+0x19c>
 800881e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008822:	f47f af0d 	bne.w	8008640 <__aeabi_dmul+0x234>
 8008826:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800882a:	f47f aeeb 	bne.w	8008604 <__aeabi_dmul+0x1f8>
 800882e:	e712      	b.n	8008656 <__aeabi_dmul+0x24a>

08008830 <__gedf2>:
 8008830:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008834:	e006      	b.n	8008844 <__cmpdf2+0x4>
 8008836:	bf00      	nop

08008838 <__ledf2>:
 8008838:	f04f 0c01 	mov.w	ip, #1
 800883c:	e002      	b.n	8008844 <__cmpdf2+0x4>
 800883e:	bf00      	nop

08008840 <__cmpdf2>:
 8008840:	f04f 0c01 	mov.w	ip, #1
 8008844:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800884c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008854:	bf18      	it	ne
 8008856:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800885a:	d01b      	beq.n	8008894 <__cmpdf2+0x54>
 800885c:	b001      	add	sp, #4
 800885e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008862:	bf0c      	ite	eq
 8008864:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008868:	ea91 0f03 	teqne	r1, r3
 800886c:	bf02      	ittt	eq
 800886e:	ea90 0f02 	teqeq	r0, r2
 8008872:	2000      	moveq	r0, #0
 8008874:	4770      	bxeq	lr
 8008876:	f110 0f00 	cmn.w	r0, #0
 800887a:	ea91 0f03 	teq	r1, r3
 800887e:	bf58      	it	pl
 8008880:	4299      	cmppl	r1, r3
 8008882:	bf08      	it	eq
 8008884:	4290      	cmpeq	r0, r2
 8008886:	bf2c      	ite	cs
 8008888:	17d8      	asrcs	r0, r3, #31
 800888a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800888e:	f040 0001 	orr.w	r0, r0, #1
 8008892:	4770      	bx	lr
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	d102      	bne.n	80088a4 <__cmpdf2+0x64>
 800889e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088a2:	d107      	bne.n	80088b4 <__cmpdf2+0x74>
 80088a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	d1d6      	bne.n	800885c <__cmpdf2+0x1c>
 80088ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088b2:	d0d3      	beq.n	800885c <__cmpdf2+0x1c>
 80088b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop

080088bc <__aeabi_cdrcmple>:
 80088bc:	4684      	mov	ip, r0
 80088be:	4610      	mov	r0, r2
 80088c0:	4662      	mov	r2, ip
 80088c2:	468c      	mov	ip, r1
 80088c4:	4619      	mov	r1, r3
 80088c6:	4663      	mov	r3, ip
 80088c8:	e000      	b.n	80088cc <__aeabi_cdcmpeq>
 80088ca:	bf00      	nop

080088cc <__aeabi_cdcmpeq>:
 80088cc:	b501      	push	{r0, lr}
 80088ce:	f7ff ffb7 	bl	8008840 <__cmpdf2>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	bf48      	it	mi
 80088d6:	f110 0f00 	cmnmi.w	r0, #0
 80088da:	bd01      	pop	{r0, pc}

080088dc <__aeabi_dcmpeq>:
 80088dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088e0:	f7ff fff4 	bl	80088cc <__aeabi_cdcmpeq>
 80088e4:	bf0c      	ite	eq
 80088e6:	2001      	moveq	r0, #1
 80088e8:	2000      	movne	r0, #0
 80088ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80088ee:	bf00      	nop

080088f0 <__aeabi_dcmplt>:
 80088f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088f4:	f7ff ffea 	bl	80088cc <__aeabi_cdcmpeq>
 80088f8:	bf34      	ite	cc
 80088fa:	2001      	movcc	r0, #1
 80088fc:	2000      	movcs	r0, #0
 80088fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8008902:	bf00      	nop

08008904 <__aeabi_dcmple>:
 8008904:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008908:	f7ff ffe0 	bl	80088cc <__aeabi_cdcmpeq>
 800890c:	bf94      	ite	ls
 800890e:	2001      	movls	r0, #1
 8008910:	2000      	movhi	r0, #0
 8008912:	f85d fb08 	ldr.w	pc, [sp], #8
 8008916:	bf00      	nop

08008918 <__aeabi_dcmpge>:
 8008918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800891c:	f7ff ffce 	bl	80088bc <__aeabi_cdrcmple>
 8008920:	bf94      	ite	ls
 8008922:	2001      	movls	r0, #1
 8008924:	2000      	movhi	r0, #0
 8008926:	f85d fb08 	ldr.w	pc, [sp], #8
 800892a:	bf00      	nop

0800892c <__aeabi_dcmpgt>:
 800892c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008930:	f7ff ffc4 	bl	80088bc <__aeabi_cdrcmple>
 8008934:	bf34      	ite	cc
 8008936:	2001      	movcc	r0, #1
 8008938:	2000      	movcs	r0, #0
 800893a:	f85d fb08 	ldr.w	pc, [sp], #8
 800893e:	bf00      	nop

08008940 <__aeabi_dcmpun>:
 8008940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008948:	d102      	bne.n	8008950 <__aeabi_dcmpun+0x10>
 800894a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800894e:	d10a      	bne.n	8008966 <__aeabi_dcmpun+0x26>
 8008950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008958:	d102      	bne.n	8008960 <__aeabi_dcmpun+0x20>
 800895a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800895e:	d102      	bne.n	8008966 <__aeabi_dcmpun+0x26>
 8008960:	f04f 0000 	mov.w	r0, #0
 8008964:	4770      	bx	lr
 8008966:	f04f 0001 	mov.w	r0, #1
 800896a:	4770      	bx	lr

0800896c <__aeabi_d2iz>:
 800896c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008974:	d215      	bcs.n	80089a2 <__aeabi_d2iz+0x36>
 8008976:	d511      	bpl.n	800899c <__aeabi_d2iz+0x30>
 8008978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800897c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008980:	d912      	bls.n	80089a8 <__aeabi_d2iz+0x3c>
 8008982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800898a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800898e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008992:	fa23 f002 	lsr.w	r0, r3, r2
 8008996:	bf18      	it	ne
 8008998:	4240      	negne	r0, r0
 800899a:	4770      	bx	lr
 800899c:	f04f 0000 	mov.w	r0, #0
 80089a0:	4770      	bx	lr
 80089a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80089a6:	d105      	bne.n	80089b4 <__aeabi_d2iz+0x48>
 80089a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80089ac:	bf08      	it	eq
 80089ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80089b2:	4770      	bx	lr
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop

080089bc <__aeabi_d2f>:
 80089bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80089c4:	bf24      	itt	cs
 80089c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80089ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80089ce:	d90d      	bls.n	80089ec <__aeabi_d2f+0x30>
 80089d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80089d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80089d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80089dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80089e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80089e4:	bf08      	it	eq
 80089e6:	f020 0001 	biceq.w	r0, r0, #1
 80089ea:	4770      	bx	lr
 80089ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80089f0:	d121      	bne.n	8008a36 <__aeabi_d2f+0x7a>
 80089f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80089f6:	bfbc      	itt	lt
 80089f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80089fc:	4770      	bxlt	lr
 80089fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a06:	f1c2 0218 	rsb	r2, r2, #24
 8008a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8008a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a12:	fa20 f002 	lsr.w	r0, r0, r2
 8008a16:	bf18      	it	ne
 8008a18:	f040 0001 	orrne.w	r0, r0, #1
 8008a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a28:	ea40 000c 	orr.w	r0, r0, ip
 8008a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8008a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a34:	e7cc      	b.n	80089d0 <__aeabi_d2f+0x14>
 8008a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a3a:	d107      	bne.n	8008a4c <__aeabi_d2f+0x90>
 8008a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a40:	bf1e      	ittt	ne
 8008a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a4a:	4770      	bxne	lr
 8008a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop

08008a5c <__aeabi_frsub>:
 8008a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008a60:	e002      	b.n	8008a68 <__addsf3>
 8008a62:	bf00      	nop

08008a64 <__aeabi_fsub>:
 8008a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008a68 <__addsf3>:
 8008a68:	0042      	lsls	r2, r0, #1
 8008a6a:	bf1f      	itttt	ne
 8008a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008a70:	ea92 0f03 	teqne	r2, r3
 8008a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008a7c:	d06a      	beq.n	8008b54 <__addsf3+0xec>
 8008a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008a86:	bfc1      	itttt	gt
 8008a88:	18d2      	addgt	r2, r2, r3
 8008a8a:	4041      	eorgt	r1, r0
 8008a8c:	4048      	eorgt	r0, r1
 8008a8e:	4041      	eorgt	r1, r0
 8008a90:	bfb8      	it	lt
 8008a92:	425b      	neglt	r3, r3
 8008a94:	2b19      	cmp	r3, #25
 8008a96:	bf88      	it	hi
 8008a98:	4770      	bxhi	lr
 8008a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008aa6:	bf18      	it	ne
 8008aa8:	4240      	negne	r0, r0
 8008aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008ab6:	bf18      	it	ne
 8008ab8:	4249      	negne	r1, r1
 8008aba:	ea92 0f03 	teq	r2, r3
 8008abe:	d03f      	beq.n	8008b40 <__addsf3+0xd8>
 8008ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8008ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8008ac8:	eb10 000c 	adds.w	r0, r0, ip
 8008acc:	f1c3 0320 	rsb	r3, r3, #32
 8008ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8008ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008ad8:	d502      	bpl.n	8008ae0 <__addsf3+0x78>
 8008ada:	4249      	negs	r1, r1
 8008adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8008ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008ae4:	d313      	bcc.n	8008b0e <__addsf3+0xa6>
 8008ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008aea:	d306      	bcc.n	8008afa <__addsf3+0x92>
 8008aec:	0840      	lsrs	r0, r0, #1
 8008aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8008af2:	f102 0201 	add.w	r2, r2, #1
 8008af6:	2afe      	cmp	r2, #254	; 0xfe
 8008af8:	d251      	bcs.n	8008b9e <__addsf3+0x136>
 8008afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8008afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008b02:	bf08      	it	eq
 8008b04:	f020 0001 	biceq.w	r0, r0, #1
 8008b08:	ea40 0003 	orr.w	r0, r0, r3
 8008b0c:	4770      	bx	lr
 8008b0e:	0049      	lsls	r1, r1, #1
 8008b10:	eb40 0000 	adc.w	r0, r0, r0
 8008b14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8008b18:	f1a2 0201 	sub.w	r2, r2, #1
 8008b1c:	d1ed      	bne.n	8008afa <__addsf3+0x92>
 8008b1e:	fab0 fc80 	clz	ip, r0
 8008b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8008b26:	ebb2 020c 	subs.w	r2, r2, ip
 8008b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8008b2e:	bfaa      	itet	ge
 8008b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8008b34:	4252      	neglt	r2, r2
 8008b36:	4318      	orrge	r0, r3
 8008b38:	bfbc      	itt	lt
 8008b3a:	40d0      	lsrlt	r0, r2
 8008b3c:	4318      	orrlt	r0, r3
 8008b3e:	4770      	bx	lr
 8008b40:	f092 0f00 	teq	r2, #0
 8008b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8008b48:	bf06      	itte	eq
 8008b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8008b4e:	3201      	addeq	r2, #1
 8008b50:	3b01      	subne	r3, #1
 8008b52:	e7b5      	b.n	8008ac0 <__addsf3+0x58>
 8008b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008b5c:	bf18      	it	ne
 8008b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008b62:	d021      	beq.n	8008ba8 <__addsf3+0x140>
 8008b64:	ea92 0f03 	teq	r2, r3
 8008b68:	d004      	beq.n	8008b74 <__addsf3+0x10c>
 8008b6a:	f092 0f00 	teq	r2, #0
 8008b6e:	bf08      	it	eq
 8008b70:	4608      	moveq	r0, r1
 8008b72:	4770      	bx	lr
 8008b74:	ea90 0f01 	teq	r0, r1
 8008b78:	bf1c      	itt	ne
 8008b7a:	2000      	movne	r0, #0
 8008b7c:	4770      	bxne	lr
 8008b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8008b82:	d104      	bne.n	8008b8e <__addsf3+0x126>
 8008b84:	0040      	lsls	r0, r0, #1
 8008b86:	bf28      	it	cs
 8008b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8008b8c:	4770      	bx	lr
 8008b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8008b92:	bf3c      	itt	cc
 8008b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8008b98:	4770      	bxcc	lr
 8008b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8008ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ba6:	4770      	bx	lr
 8008ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8008bac:	bf16      	itet	ne
 8008bae:	4608      	movne	r0, r1
 8008bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8008bb4:	4601      	movne	r1, r0
 8008bb6:	0242      	lsls	r2, r0, #9
 8008bb8:	bf06      	itte	eq
 8008bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8008bbe:	ea90 0f01 	teqeq	r0, r1
 8008bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8008bc6:	4770      	bx	lr

08008bc8 <__aeabi_ui2f>:
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	e004      	b.n	8008bd8 <__aeabi_i2f+0x8>
 8008bce:	bf00      	nop

08008bd0 <__aeabi_i2f>:
 8008bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8008bd4:	bf48      	it	mi
 8008bd6:	4240      	negmi	r0, r0
 8008bd8:	ea5f 0c00 	movs.w	ip, r0
 8008bdc:	bf08      	it	eq
 8008bde:	4770      	bxeq	lr
 8008be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8008be4:	4601      	mov	r1, r0
 8008be6:	f04f 0000 	mov.w	r0, #0
 8008bea:	e01c      	b.n	8008c26 <__aeabi_l2f+0x2a>

08008bec <__aeabi_ul2f>:
 8008bec:	ea50 0201 	orrs.w	r2, r0, r1
 8008bf0:	bf08      	it	eq
 8008bf2:	4770      	bxeq	lr
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	e00a      	b.n	8008c10 <__aeabi_l2f+0x14>
 8008bfa:	bf00      	nop

08008bfc <__aeabi_l2f>:
 8008bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8008c00:	bf08      	it	eq
 8008c02:	4770      	bxeq	lr
 8008c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8008c08:	d502      	bpl.n	8008c10 <__aeabi_l2f+0x14>
 8008c0a:	4240      	negs	r0, r0
 8008c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008c10:	ea5f 0c01 	movs.w	ip, r1
 8008c14:	bf02      	ittt	eq
 8008c16:	4684      	moveq	ip, r0
 8008c18:	4601      	moveq	r1, r0
 8008c1a:	2000      	moveq	r0, #0
 8008c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8008c20:	bf08      	it	eq
 8008c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8008c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008c2a:	fabc f28c 	clz	r2, ip
 8008c2e:	3a08      	subs	r2, #8
 8008c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8008c34:	db10      	blt.n	8008c58 <__aeabi_l2f+0x5c>
 8008c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8008c3a:	4463      	add	r3, ip
 8008c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8008c40:	f1c2 0220 	rsb	r2, r2, #32
 8008c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008c48:	fa20 f202 	lsr.w	r2, r0, r2
 8008c4c:	eb43 0002 	adc.w	r0, r3, r2
 8008c50:	bf08      	it	eq
 8008c52:	f020 0001 	biceq.w	r0, r0, #1
 8008c56:	4770      	bx	lr
 8008c58:	f102 0220 	add.w	r2, r2, #32
 8008c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8008c60:	f1c2 0220 	rsb	r2, r2, #32
 8008c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8008c68:	fa21 f202 	lsr.w	r2, r1, r2
 8008c6c:	eb43 0002 	adc.w	r0, r3, r2
 8008c70:	bf08      	it	eq
 8008c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_fmul>:
 8008c78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008c80:	bf1e      	ittt	ne
 8008c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008c86:	ea92 0f0c 	teqne	r2, ip
 8008c8a:	ea93 0f0c 	teqne	r3, ip
 8008c8e:	d06f      	beq.n	8008d70 <__aeabi_fmul+0xf8>
 8008c90:	441a      	add	r2, r3
 8008c92:	ea80 0c01 	eor.w	ip, r0, r1
 8008c96:	0240      	lsls	r0, r0, #9
 8008c98:	bf18      	it	ne
 8008c9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008c9e:	d01e      	beq.n	8008cde <__aeabi_fmul+0x66>
 8008ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ca4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8008ca8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008cac:	fba0 3101 	umull	r3, r1, r0, r1
 8008cb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008cb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008cb8:	bf3e      	ittt	cc
 8008cba:	0049      	lslcc	r1, r1, #1
 8008cbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8008cc0:	005b      	lslcc	r3, r3, #1
 8008cc2:	ea40 0001 	orr.w	r0, r0, r1
 8008cc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8008cca:	2afd      	cmp	r2, #253	; 0xfd
 8008ccc:	d81d      	bhi.n	8008d0a <__aeabi_fmul+0x92>
 8008cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008cd6:	bf08      	it	eq
 8008cd8:	f020 0001 	biceq.w	r0, r0, #1
 8008cdc:	4770      	bx	lr
 8008cde:	f090 0f00 	teq	r0, #0
 8008ce2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008ce6:	bf08      	it	eq
 8008ce8:	0249      	lsleq	r1, r1, #9
 8008cea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008cee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8008cf2:	3a7f      	subs	r2, #127	; 0x7f
 8008cf4:	bfc2      	ittt	gt
 8008cf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008cfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008cfe:	4770      	bxgt	lr
 8008d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	3a01      	subs	r2, #1
 8008d0a:	dc5d      	bgt.n	8008dc8 <__aeabi_fmul+0x150>
 8008d0c:	f112 0f19 	cmn.w	r2, #25
 8008d10:	bfdc      	itt	le
 8008d12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008d16:	4770      	bxle	lr
 8008d18:	f1c2 0200 	rsb	r2, r2, #0
 8008d1c:	0041      	lsls	r1, r0, #1
 8008d1e:	fa21 f102 	lsr.w	r1, r1, r2
 8008d22:	f1c2 0220 	rsb	r2, r2, #32
 8008d26:	fa00 fc02 	lsl.w	ip, r0, r2
 8008d2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8008d2e:	f140 0000 	adc.w	r0, r0, #0
 8008d32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008d36:	bf08      	it	eq
 8008d38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008d3c:	4770      	bx	lr
 8008d3e:	f092 0f00 	teq	r2, #0
 8008d42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008d46:	bf02      	ittt	eq
 8008d48:	0040      	lsleq	r0, r0, #1
 8008d4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008d4e:	3a01      	subeq	r2, #1
 8008d50:	d0f9      	beq.n	8008d46 <__aeabi_fmul+0xce>
 8008d52:	ea40 000c 	orr.w	r0, r0, ip
 8008d56:	f093 0f00 	teq	r3, #0
 8008d5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008d5e:	bf02      	ittt	eq
 8008d60:	0049      	lsleq	r1, r1, #1
 8008d62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008d66:	3b01      	subeq	r3, #1
 8008d68:	d0f9      	beq.n	8008d5e <__aeabi_fmul+0xe6>
 8008d6a:	ea41 010c 	orr.w	r1, r1, ip
 8008d6e:	e78f      	b.n	8008c90 <__aeabi_fmul+0x18>
 8008d70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008d74:	ea92 0f0c 	teq	r2, ip
 8008d78:	bf18      	it	ne
 8008d7a:	ea93 0f0c 	teqne	r3, ip
 8008d7e:	d00a      	beq.n	8008d96 <__aeabi_fmul+0x11e>
 8008d80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008d84:	bf18      	it	ne
 8008d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008d8a:	d1d8      	bne.n	8008d3e <__aeabi_fmul+0xc6>
 8008d8c:	ea80 0001 	eor.w	r0, r0, r1
 8008d90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008d94:	4770      	bx	lr
 8008d96:	f090 0f00 	teq	r0, #0
 8008d9a:	bf17      	itett	ne
 8008d9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008da0:	4608      	moveq	r0, r1
 8008da2:	f091 0f00 	teqne	r1, #0
 8008da6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8008daa:	d014      	beq.n	8008dd6 <__aeabi_fmul+0x15e>
 8008dac:	ea92 0f0c 	teq	r2, ip
 8008db0:	d101      	bne.n	8008db6 <__aeabi_fmul+0x13e>
 8008db2:	0242      	lsls	r2, r0, #9
 8008db4:	d10f      	bne.n	8008dd6 <__aeabi_fmul+0x15e>
 8008db6:	ea93 0f0c 	teq	r3, ip
 8008dba:	d103      	bne.n	8008dc4 <__aeabi_fmul+0x14c>
 8008dbc:	024b      	lsls	r3, r1, #9
 8008dbe:	bf18      	it	ne
 8008dc0:	4608      	movne	r0, r1
 8008dc2:	d108      	bne.n	8008dd6 <__aeabi_fmul+0x15e>
 8008dc4:	ea80 0001 	eor.w	r0, r0, r1
 8008dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008dcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008dd4:	4770      	bx	lr
 8008dd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008dda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8008dde:	4770      	bx	lr

08008de0 <__aeabi_fdiv>:
 8008de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008de8:	bf1e      	ittt	ne
 8008dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008dee:	ea92 0f0c 	teqne	r2, ip
 8008df2:	ea93 0f0c 	teqne	r3, ip
 8008df6:	d069      	beq.n	8008ecc <__aeabi_fdiv+0xec>
 8008df8:	eba2 0203 	sub.w	r2, r2, r3
 8008dfc:	ea80 0c01 	eor.w	ip, r0, r1
 8008e00:	0249      	lsls	r1, r1, #9
 8008e02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008e06:	d037      	beq.n	8008e78 <__aeabi_fdiv+0x98>
 8008e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008e10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008e14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf38      	it	cc
 8008e1c:	005b      	lslcc	r3, r3, #1
 8008e1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8008e22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008e26:	428b      	cmp	r3, r1
 8008e28:	bf24      	itt	cs
 8008e2a:	1a5b      	subcs	r3, r3, r1
 8008e2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008e30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008e34:	bf24      	itt	cs
 8008e36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008e3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008e3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8008e42:	bf24      	itt	cs
 8008e44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008e48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008e4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8008e50:	bf24      	itt	cs
 8008e52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008e56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	bf18      	it	ne
 8008e5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8008e62:	d1e0      	bne.n	8008e26 <__aeabi_fdiv+0x46>
 8008e64:	2afd      	cmp	r2, #253	; 0xfd
 8008e66:	f63f af50 	bhi.w	8008d0a <__aeabi_fmul+0x92>
 8008e6a:	428b      	cmp	r3, r1
 8008e6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008e70:	bf08      	it	eq
 8008e72:	f020 0001 	biceq.w	r0, r0, #1
 8008e76:	4770      	bx	lr
 8008e78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008e7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008e80:	327f      	adds	r2, #127	; 0x7f
 8008e82:	bfc2      	ittt	gt
 8008e84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008e88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008e8c:	4770      	bxgt	lr
 8008e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	3a01      	subs	r2, #1
 8008e98:	e737      	b.n	8008d0a <__aeabi_fmul+0x92>
 8008e9a:	f092 0f00 	teq	r2, #0
 8008e9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008ea2:	bf02      	ittt	eq
 8008ea4:	0040      	lsleq	r0, r0, #1
 8008ea6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008eaa:	3a01      	subeq	r2, #1
 8008eac:	d0f9      	beq.n	8008ea2 <__aeabi_fdiv+0xc2>
 8008eae:	ea40 000c 	orr.w	r0, r0, ip
 8008eb2:	f093 0f00 	teq	r3, #0
 8008eb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008eba:	bf02      	ittt	eq
 8008ebc:	0049      	lsleq	r1, r1, #1
 8008ebe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008ec2:	3b01      	subeq	r3, #1
 8008ec4:	d0f9      	beq.n	8008eba <__aeabi_fdiv+0xda>
 8008ec6:	ea41 010c 	orr.w	r1, r1, ip
 8008eca:	e795      	b.n	8008df8 <__aeabi_fdiv+0x18>
 8008ecc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008ed0:	ea92 0f0c 	teq	r2, ip
 8008ed4:	d108      	bne.n	8008ee8 <__aeabi_fdiv+0x108>
 8008ed6:	0242      	lsls	r2, r0, #9
 8008ed8:	f47f af7d 	bne.w	8008dd6 <__aeabi_fmul+0x15e>
 8008edc:	ea93 0f0c 	teq	r3, ip
 8008ee0:	f47f af70 	bne.w	8008dc4 <__aeabi_fmul+0x14c>
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	e776      	b.n	8008dd6 <__aeabi_fmul+0x15e>
 8008ee8:	ea93 0f0c 	teq	r3, ip
 8008eec:	d104      	bne.n	8008ef8 <__aeabi_fdiv+0x118>
 8008eee:	024b      	lsls	r3, r1, #9
 8008ef0:	f43f af4c 	beq.w	8008d8c <__aeabi_fmul+0x114>
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	e76e      	b.n	8008dd6 <__aeabi_fmul+0x15e>
 8008ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008efc:	bf18      	it	ne
 8008efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008f02:	d1ca      	bne.n	8008e9a <__aeabi_fdiv+0xba>
 8008f04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008f08:	f47f af5c 	bne.w	8008dc4 <__aeabi_fmul+0x14c>
 8008f0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8008f10:	f47f af3c 	bne.w	8008d8c <__aeabi_fmul+0x114>
 8008f14:	e75f      	b.n	8008dd6 <__aeabi_fmul+0x15e>
 8008f16:	bf00      	nop

08008f18 <__gesf2>:
 8008f18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008f1c:	e006      	b.n	8008f2c <__cmpsf2+0x4>
 8008f1e:	bf00      	nop

08008f20 <__lesf2>:
 8008f20:	f04f 0c01 	mov.w	ip, #1
 8008f24:	e002      	b.n	8008f2c <__cmpsf2+0x4>
 8008f26:	bf00      	nop

08008f28 <__cmpsf2>:
 8008f28:	f04f 0c01 	mov.w	ip, #1
 8008f2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8008f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008f3c:	bf18      	it	ne
 8008f3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008f42:	d011      	beq.n	8008f68 <__cmpsf2+0x40>
 8008f44:	b001      	add	sp, #4
 8008f46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8008f4a:	bf18      	it	ne
 8008f4c:	ea90 0f01 	teqne	r0, r1
 8008f50:	bf58      	it	pl
 8008f52:	ebb2 0003 	subspl.w	r0, r2, r3
 8008f56:	bf88      	it	hi
 8008f58:	17c8      	asrhi	r0, r1, #31
 8008f5a:	bf38      	it	cc
 8008f5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8008f60:	bf18      	it	ne
 8008f62:	f040 0001 	orrne.w	r0, r0, #1
 8008f66:	4770      	bx	lr
 8008f68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008f6c:	d102      	bne.n	8008f74 <__cmpsf2+0x4c>
 8008f6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8008f72:	d105      	bne.n	8008f80 <__cmpsf2+0x58>
 8008f74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8008f78:	d1e4      	bne.n	8008f44 <__cmpsf2+0x1c>
 8008f7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8008f7e:	d0e1      	beq.n	8008f44 <__cmpsf2+0x1c>
 8008f80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop

08008f88 <__aeabi_cfrcmple>:
 8008f88:	4684      	mov	ip, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4661      	mov	r1, ip
 8008f8e:	e7ff      	b.n	8008f90 <__aeabi_cfcmpeq>

08008f90 <__aeabi_cfcmpeq>:
 8008f90:	b50f      	push	{r0, r1, r2, r3, lr}
 8008f92:	f7ff ffc9 	bl	8008f28 <__cmpsf2>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	bf48      	it	mi
 8008f9a:	f110 0f00 	cmnmi.w	r0, #0
 8008f9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08008fa0 <__aeabi_fcmpeq>:
 8008fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008fa4:	f7ff fff4 	bl	8008f90 <__aeabi_cfcmpeq>
 8008fa8:	bf0c      	ite	eq
 8008faa:	2001      	moveq	r0, #1
 8008fac:	2000      	movne	r0, #0
 8008fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8008fb2:	bf00      	nop

08008fb4 <__aeabi_fcmplt>:
 8008fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008fb8:	f7ff ffea 	bl	8008f90 <__aeabi_cfcmpeq>
 8008fbc:	bf34      	ite	cc
 8008fbe:	2001      	movcc	r0, #1
 8008fc0:	2000      	movcs	r0, #0
 8008fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008fc6:	bf00      	nop

08008fc8 <__aeabi_fcmple>:
 8008fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008fcc:	f7ff ffe0 	bl	8008f90 <__aeabi_cfcmpeq>
 8008fd0:	bf94      	ite	ls
 8008fd2:	2001      	movls	r0, #1
 8008fd4:	2000      	movhi	r0, #0
 8008fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008fda:	bf00      	nop

08008fdc <__aeabi_fcmpge>:
 8008fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008fe0:	f7ff ffd2 	bl	8008f88 <__aeabi_cfrcmple>
 8008fe4:	bf94      	ite	ls
 8008fe6:	2001      	movls	r0, #1
 8008fe8:	2000      	movhi	r0, #0
 8008fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8008fee:	bf00      	nop

08008ff0 <__aeabi_fcmpgt>:
 8008ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ff4:	f7ff ffc8 	bl	8008f88 <__aeabi_cfrcmple>
 8008ff8:	bf34      	ite	cc
 8008ffa:	2001      	movcc	r0, #1
 8008ffc:	2000      	movcs	r0, #0
 8008ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8009002:	bf00      	nop

08009004 <__aeabi_fcmpun>:
 8009004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8009008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800900c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8009010:	d102      	bne.n	8009018 <__aeabi_fcmpun+0x14>
 8009012:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8009016:	d108      	bne.n	800902a <__aeabi_fcmpun+0x26>
 8009018:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800901c:	d102      	bne.n	8009024 <__aeabi_fcmpun+0x20>
 800901e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8009022:	d102      	bne.n	800902a <__aeabi_fcmpun+0x26>
 8009024:	f04f 0000 	mov.w	r0, #0
 8009028:	4770      	bx	lr
 800902a:	f04f 0001 	mov.w	r0, #1
 800902e:	4770      	bx	lr

08009030 <__aeabi_f2iz>:
 8009030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8009034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8009038:	d30f      	bcc.n	800905a <__aeabi_f2iz+0x2a>
 800903a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800903e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8009042:	d90d      	bls.n	8009060 <__aeabi_f2iz+0x30>
 8009044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8009048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800904c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8009050:	fa23 f002 	lsr.w	r0, r3, r2
 8009054:	bf18      	it	ne
 8009056:	4240      	negne	r0, r0
 8009058:	4770      	bx	lr
 800905a:	f04f 0000 	mov.w	r0, #0
 800905e:	4770      	bx	lr
 8009060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8009064:	d101      	bne.n	800906a <__aeabi_f2iz+0x3a>
 8009066:	0242      	lsls	r2, r0, #9
 8009068:	d105      	bne.n	8009076 <__aeabi_f2iz+0x46>
 800906a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800906e:	bf08      	it	eq
 8009070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009074:	4770      	bx	lr
 8009076:	f04f 0000 	mov.w	r0, #0
 800907a:	4770      	bx	lr

0800907c <selfrel_offset31>:
 800907c:	6803      	ldr	r3, [r0, #0]
 800907e:	005a      	lsls	r2, r3, #1
 8009080:	bf4c      	ite	mi
 8009082:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009086:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800908a:	4418      	add	r0, r3
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop

08009090 <search_EIT_table>:
 8009090:	b361      	cbz	r1, 80090ec <search_EIT_table+0x5c>
 8009092:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009096:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800909a:	4690      	mov	r8, r2
 800909c:	4606      	mov	r6, r0
 800909e:	46d1      	mov	r9, sl
 80090a0:	2700      	movs	r7, #0
 80090a2:	eb07 0409 	add.w	r4, r7, r9
 80090a6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80090aa:	1064      	asrs	r4, r4, #1
 80090ac:	00e5      	lsls	r5, r4, #3
 80090ae:	1971      	adds	r1, r6, r5
 80090b0:	4608      	mov	r0, r1
 80090b2:	f7ff ffe3 	bl	800907c <selfrel_offset31>
 80090b6:	45a2      	cmp	sl, r4
 80090b8:	4683      	mov	fp, r0
 80090ba:	f105 0008 	add.w	r0, r5, #8
 80090be:	4430      	add	r0, r6
 80090c0:	d009      	beq.n	80090d6 <search_EIT_table+0x46>
 80090c2:	f7ff ffdb 	bl	800907c <selfrel_offset31>
 80090c6:	45c3      	cmp	fp, r8
 80090c8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80090cc:	d805      	bhi.n	80090da <search_EIT_table+0x4a>
 80090ce:	4540      	cmp	r0, r8
 80090d0:	d209      	bcs.n	80090e6 <search_EIT_table+0x56>
 80090d2:	1c67      	adds	r7, r4, #1
 80090d4:	e7e5      	b.n	80090a2 <search_EIT_table+0x12>
 80090d6:	45c3      	cmp	fp, r8
 80090d8:	d905      	bls.n	80090e6 <search_EIT_table+0x56>
 80090da:	42a7      	cmp	r7, r4
 80090dc:	d002      	beq.n	80090e4 <search_EIT_table+0x54>
 80090de:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80090e2:	e7de      	b.n	80090a2 <search_EIT_table+0x12>
 80090e4:	2100      	movs	r1, #0
 80090e6:	4608      	mov	r0, r1
 80090e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	4608      	mov	r0, r1
 80090ee:	4770      	bx	lr

080090f0 <__gnu_unwind_get_pr_addr>:
 80090f0:	2801      	cmp	r0, #1
 80090f2:	d007      	beq.n	8009104 <__gnu_unwind_get_pr_addr+0x14>
 80090f4:	2802      	cmp	r0, #2
 80090f6:	d007      	beq.n	8009108 <__gnu_unwind_get_pr_addr+0x18>
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <__gnu_unwind_get_pr_addr+0x1c>)
 80090fa:	2800      	cmp	r0, #0
 80090fc:	bf0c      	ite	eq
 80090fe:	4618      	moveq	r0, r3
 8009100:	2000      	movne	r0, #0
 8009102:	4770      	bx	lr
 8009104:	4802      	ldr	r0, [pc, #8]	; (8009110 <__gnu_unwind_get_pr_addr+0x20>)
 8009106:	4770      	bx	lr
 8009108:	4802      	ldr	r0, [pc, #8]	; (8009114 <__gnu_unwind_get_pr_addr+0x24>)
 800910a:	4770      	bx	lr
 800910c:	08009801 	.word	0x08009801
 8009110:	08009805 	.word	0x08009805
 8009114:	08009809 	.word	0x08009809

08009118 <get_eit_entry>:
 8009118:	b530      	push	{r4, r5, lr}
 800911a:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <get_eit_entry+0x98>)
 800911c:	b083      	sub	sp, #12
 800911e:	4604      	mov	r4, r0
 8009120:	1e8d      	subs	r5, r1, #2
 8009122:	b373      	cbz	r3, 8009182 <get_eit_entry+0x6a>
 8009124:	a901      	add	r1, sp, #4
 8009126:	4628      	mov	r0, r5
 8009128:	f3af 8000 	nop.w
 800912c:	b318      	cbz	r0, 8009176 <get_eit_entry+0x5e>
 800912e:	9901      	ldr	r1, [sp, #4]
 8009130:	462a      	mov	r2, r5
 8009132:	f7ff ffad 	bl	8009090 <search_EIT_table>
 8009136:	4601      	mov	r1, r0
 8009138:	b1e8      	cbz	r0, 8009176 <get_eit_entry+0x5e>
 800913a:	f7ff ff9f 	bl	800907c <selfrel_offset31>
 800913e:	684b      	ldr	r3, [r1, #4]
 8009140:	64a0      	str	r0, [r4, #72]	; 0x48
 8009142:	2b01      	cmp	r3, #1
 8009144:	d011      	beq.n	800916a <get_eit_entry+0x52>
 8009146:	2b00      	cmp	r3, #0
 8009148:	db22      	blt.n	8009190 <get_eit_entry+0x78>
 800914a:	1d08      	adds	r0, r1, #4
 800914c:	f7ff ff96 	bl	800907c <selfrel_offset31>
 8009150:	2300      	movs	r3, #0
 8009152:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009154:	6523      	str	r3, [r4, #80]	; 0x50
 8009156:	6803      	ldr	r3, [r0, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	db1e      	blt.n	800919a <get_eit_entry+0x82>
 800915c:	f7ff ff8e 	bl	800907c <selfrel_offset31>
 8009160:	2300      	movs	r3, #0
 8009162:	6120      	str	r0, [r4, #16]
 8009164:	4618      	mov	r0, r3
 8009166:	b003      	add	sp, #12
 8009168:	bd30      	pop	{r4, r5, pc}
 800916a:	2305      	movs	r3, #5
 800916c:	2200      	movs	r2, #0
 800916e:	4618      	mov	r0, r3
 8009170:	6122      	str	r2, [r4, #16]
 8009172:	b003      	add	sp, #12
 8009174:	bd30      	pop	{r4, r5, pc}
 8009176:	2309      	movs	r3, #9
 8009178:	2200      	movs	r2, #0
 800917a:	4618      	mov	r0, r3
 800917c:	6122      	str	r2, [r4, #16]
 800917e:	b003      	add	sp, #12
 8009180:	bd30      	pop	{r4, r5, pc}
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <get_eit_entry+0x9c>)
 8009184:	490c      	ldr	r1, [pc, #48]	; (80091b8 <get_eit_entry+0xa0>)
 8009186:	4618      	mov	r0, r3
 8009188:	1ac9      	subs	r1, r1, r3
 800918a:	10c9      	asrs	r1, r1, #3
 800918c:	9101      	str	r1, [sp, #4]
 800918e:	e7cf      	b.n	8009130 <get_eit_entry+0x18>
 8009190:	2301      	movs	r3, #1
 8009192:	1d08      	adds	r0, r1, #4
 8009194:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009196:	6523      	str	r3, [r4, #80]	; 0x50
 8009198:	e7dd      	b.n	8009156 <get_eit_entry+0x3e>
 800919a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800919e:	f7ff ffa7 	bl	80090f0 <__gnu_unwind_get_pr_addr>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	6120      	str	r0, [r4, #16]
 80091a6:	bf14      	ite	ne
 80091a8:	2300      	movne	r3, #0
 80091aa:	2309      	moveq	r3, #9
 80091ac:	e7da      	b.n	8009164 <get_eit_entry+0x4c>
 80091ae:	bf00      	nop
 80091b0:	00000000 	.word	0x00000000
 80091b4:	0800bef8 	.word	0x0800bef8
 80091b8:	0800c168 	.word	0x0800c168

080091bc <restore_non_core_regs>:
 80091bc:	6803      	ldr	r3, [r0, #0]
 80091be:	b510      	push	{r4, lr}
 80091c0:	07da      	lsls	r2, r3, #31
 80091c2:	4604      	mov	r4, r0
 80091c4:	d406      	bmi.n	80091d4 <restore_non_core_regs+0x18>
 80091c6:	079b      	lsls	r3, r3, #30
 80091c8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80091cc:	d509      	bpl.n	80091e2 <restore_non_core_regs+0x26>
 80091ce:	f000 fc57 	bl	8009a80 <__gnu_Unwind_Restore_VFP_D>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	0759      	lsls	r1, r3, #29
 80091d6:	d509      	bpl.n	80091ec <restore_non_core_regs+0x30>
 80091d8:	071a      	lsls	r2, r3, #28
 80091da:	d50e      	bpl.n	80091fa <restore_non_core_regs+0x3e>
 80091dc:	06db      	lsls	r3, r3, #27
 80091de:	d513      	bpl.n	8009208 <restore_non_core_regs+0x4c>
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	f000 fc45 	bl	8009a70 <__gnu_Unwind_Restore_VFP>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	0759      	lsls	r1, r3, #29
 80091ea:	d4f5      	bmi.n	80091d8 <restore_non_core_regs+0x1c>
 80091ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091f0:	f000 fc4e 	bl	8009a90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	071a      	lsls	r2, r3, #28
 80091f8:	d4f0      	bmi.n	80091dc <restore_non_core_regs+0x20>
 80091fa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80091fe:	f000 fc4f 	bl	8009aa0 <__gnu_Unwind_Restore_WMMXD>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	06db      	lsls	r3, r3, #27
 8009206:	d4eb      	bmi.n	80091e0 <restore_non_core_regs+0x24>
 8009208:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009210:	f000 bc8a 	b.w	8009b28 <__gnu_Unwind_Restore_WMMXC>

08009214 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8009214:	6803      	ldr	r3, [r0, #0]
 8009216:	b103      	cbz	r3, 800921a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8009218:	4403      	add	r3, r0
 800921a:	4618      	mov	r0, r3
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop

08009220 <__gnu_unwind_24bit.isra.1>:
 8009220:	2009      	movs	r0, #9
 8009222:	4770      	bx	lr

08009224 <_Unwind_DebugHook>:
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop

08009228 <unwind_phase2>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4604      	mov	r4, r0
 800922c:	460d      	mov	r5, r1
 800922e:	e008      	b.n	8009242 <unwind_phase2+0x1a>
 8009230:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	6162      	str	r2, [r4, #20]
 8009236:	4621      	mov	r1, r4
 8009238:	462a      	mov	r2, r5
 800923a:	2001      	movs	r0, #1
 800923c:	4798      	blx	r3
 800923e:	2808      	cmp	r0, #8
 8009240:	d108      	bne.n	8009254 <unwind_phase2+0x2c>
 8009242:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8009244:	4620      	mov	r0, r4
 8009246:	f7ff ff67 	bl	8009118 <get_eit_entry>
 800924a:	4606      	mov	r6, r0
 800924c:	2800      	cmp	r0, #0
 800924e:	d0ef      	beq.n	8009230 <unwind_phase2+0x8>
 8009250:	f7fb fb36 	bl	80048c0 <abort>
 8009254:	2807      	cmp	r0, #7
 8009256:	d1fb      	bne.n	8009250 <unwind_phase2+0x28>
 8009258:	4630      	mov	r0, r6
 800925a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800925c:	f7ff ffe2 	bl	8009224 <_Unwind_DebugHook>
 8009260:	1d28      	adds	r0, r5, #4
 8009262:	f000 fbf9 	bl	8009a58 <__restore_core_regs>
 8009266:	bf00      	nop

08009268 <unwind_phase2_forced>:
 8009268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	4605      	mov	r5, r0
 800926e:	2700      	movs	r7, #0
 8009270:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8009274:	ac03      	add	r4, sp, #12
 8009276:	1d0e      	adds	r6, r1, #4
 8009278:	4692      	mov	sl, r2
 800927a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800927c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800927e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009282:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009286:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800928a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800928e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8009292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009296:	ac02      	add	r4, sp, #8
 8009298:	4628      	mov	r0, r5
 800929a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800929c:	6027      	str	r7, [r4, #0]
 800929e:	f7ff ff3b 	bl	8009118 <get_eit_entry>
 80092a2:	f1ba 0f00 	cmp.w	sl, #0
 80092a6:	4607      	mov	r7, r0
 80092a8:	bf14      	ite	ne
 80092aa:	260a      	movne	r6, #10
 80092ac:	2609      	moveq	r6, #9
 80092ae:	b17f      	cbz	r7, 80092d0 <unwind_phase2_forced+0x68>
 80092b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092b2:	f046 0110 	orr.w	r1, r6, #16
 80092b6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80092ba:	462a      	mov	r2, r5
 80092bc:	6463      	str	r3, [r4, #68]	; 0x44
 80092be:	2001      	movs	r0, #1
 80092c0:	462b      	mov	r3, r5
 80092c2:	47c0      	blx	r8
 80092c4:	bb78      	cbnz	r0, 8009326 <unwind_phase2_forced+0xbe>
 80092c6:	4638      	mov	r0, r7
 80092c8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80092cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80092d6:	616b      	str	r3, [r5, #20]
 80092d8:	4621      	mov	r1, r4
 80092da:	a87a      	add	r0, sp, #488	; 0x1e8
 80092dc:	f001 f934 	bl	800a548 <memcpy>
 80092e0:	692b      	ldr	r3, [r5, #16]
 80092e2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	4798      	blx	r3
 80092ea:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80092ec:	4682      	mov	sl, r0
 80092ee:	e88d 0210 	stmia.w	sp, {r4, r9}
 80092f2:	4631      	mov	r1, r6
 80092f4:	6463      	str	r3, [r4, #68]	; 0x44
 80092f6:	462a      	mov	r2, r5
 80092f8:	462b      	mov	r3, r5
 80092fa:	2001      	movs	r0, #1
 80092fc:	47c0      	blx	r8
 80092fe:	b990      	cbnz	r0, 8009326 <unwind_phase2_forced+0xbe>
 8009300:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009304:	a97a      	add	r1, sp, #488	; 0x1e8
 8009306:	4620      	mov	r0, r4
 8009308:	f001 f91e 	bl	800a548 <memcpy>
 800930c:	f1ba 0f08 	cmp.w	sl, #8
 8009310:	d106      	bne.n	8009320 <unwind_phase2_forced+0xb8>
 8009312:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009314:	4628      	mov	r0, r5
 8009316:	f7ff feff 	bl	8009118 <get_eit_entry>
 800931a:	2609      	movs	r6, #9
 800931c:	4607      	mov	r7, r0
 800931e:	e7c6      	b.n	80092ae <unwind_phase2_forced+0x46>
 8009320:	f1ba 0f07 	cmp.w	sl, #7
 8009324:	d005      	beq.n	8009332 <unwind_phase2_forced+0xca>
 8009326:	2709      	movs	r7, #9
 8009328:	4638      	mov	r0, r7
 800932a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800932e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009332:	4638      	mov	r0, r7
 8009334:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009336:	f7ff ff75 	bl	8009224 <_Unwind_DebugHook>
 800933a:	a803      	add	r0, sp, #12
 800933c:	f000 fb8c 	bl	8009a58 <__restore_core_regs>

08009340 <_Unwind_GetCFA>:
 8009340:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8009342:	4770      	bx	lr

08009344 <__gnu_Unwind_RaiseException>:
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800934a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800934c:	b0f9      	sub	sp, #484	; 0x1e4
 800934e:	640b      	str	r3, [r1, #64]	; 0x40
 8009350:	1d0e      	adds	r6, r1, #4
 8009352:	ad01      	add	r5, sp, #4
 8009354:	460f      	mov	r7, r1
 8009356:	4604      	mov	r4, r0
 8009358:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800935a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800935c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800935e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009360:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009364:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009368:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800936c:	f8cd e000 	str.w	lr, [sp]
 8009370:	e006      	b.n	8009380 <__gnu_Unwind_RaiseException+0x3c>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	466a      	mov	r2, sp
 8009376:	4621      	mov	r1, r4
 8009378:	4798      	blx	r3
 800937a:	2808      	cmp	r0, #8
 800937c:	4605      	mov	r5, r0
 800937e:	d108      	bne.n	8009392 <__gnu_Unwind_RaiseException+0x4e>
 8009380:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009382:	4620      	mov	r0, r4
 8009384:	f7ff fec8 	bl	8009118 <get_eit_entry>
 8009388:	2800      	cmp	r0, #0
 800938a:	d0f2      	beq.n	8009372 <__gnu_Unwind_RaiseException+0x2e>
 800938c:	2009      	movs	r0, #9
 800938e:	b079      	add	sp, #484	; 0x1e4
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009392:	4668      	mov	r0, sp
 8009394:	f7ff ff12 	bl	80091bc <restore_non_core_regs>
 8009398:	2d06      	cmp	r5, #6
 800939a:	d1f7      	bne.n	800938c <__gnu_Unwind_RaiseException+0x48>
 800939c:	4639      	mov	r1, r7
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff ff42 	bl	8009228 <unwind_phase2>

080093a4 <__gnu_Unwind_ForcedUnwind>:
 80093a4:	b430      	push	{r4, r5}
 80093a6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80093a8:	60c1      	str	r1, [r0, #12]
 80093aa:	6182      	str	r2, [r0, #24]
 80093ac:	4619      	mov	r1, r3
 80093ae:	641d      	str	r5, [r3, #64]	; 0x40
 80093b0:	2200      	movs	r2, #0
 80093b2:	bc30      	pop	{r4, r5}
 80093b4:	e758      	b.n	8009268 <unwind_phase2_forced>
 80093b6:	bf00      	nop

080093b8 <__gnu_Unwind_Resume>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	6943      	ldr	r3, [r0, #20]
 80093bc:	68c6      	ldr	r6, [r0, #12]
 80093be:	640b      	str	r3, [r1, #64]	; 0x40
 80093c0:	b126      	cbz	r6, 80093cc <__gnu_Unwind_Resume+0x14>
 80093c2:	2201      	movs	r2, #1
 80093c4:	f7ff ff50 	bl	8009268 <unwind_phase2_forced>
 80093c8:	f7fb fa7a 	bl	80048c0 <abort>
 80093cc:	6903      	ldr	r3, [r0, #16]
 80093ce:	460a      	mov	r2, r1
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	4601      	mov	r1, r0
 80093d6:	2002      	movs	r0, #2
 80093d8:	4798      	blx	r3
 80093da:	2807      	cmp	r0, #7
 80093dc:	d007      	beq.n	80093ee <__gnu_Unwind_Resume+0x36>
 80093de:	2808      	cmp	r0, #8
 80093e0:	d103      	bne.n	80093ea <__gnu_Unwind_Resume+0x32>
 80093e2:	4629      	mov	r1, r5
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff ff1f 	bl	8009228 <unwind_phase2>
 80093ea:	f7fb fa69 	bl	80048c0 <abort>
 80093ee:	4630      	mov	r0, r6
 80093f0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80093f2:	f7ff ff17 	bl	8009224 <_Unwind_DebugHook>
 80093f6:	1d28      	adds	r0, r5, #4
 80093f8:	f000 fb2e 	bl	8009a58 <__restore_core_regs>

080093fc <__gnu_Unwind_Resume_or_Rethrow>:
 80093fc:	68c2      	ldr	r2, [r0, #12]
 80093fe:	b12a      	cbz	r2, 800940c <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8009400:	b410      	push	{r4}
 8009402:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8009404:	2200      	movs	r2, #0
 8009406:	640c      	str	r4, [r1, #64]	; 0x40
 8009408:	bc10      	pop	{r4}
 800940a:	e72d      	b.n	8009268 <unwind_phase2_forced>
 800940c:	e79a      	b.n	8009344 <__gnu_Unwind_RaiseException>
 800940e:	bf00      	nop

08009410 <_Unwind_Complete>:
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop

08009414 <_Unwind_DeleteException>:
 8009414:	6883      	ldr	r3, [r0, #8]
 8009416:	b113      	cbz	r3, 800941e <_Unwind_DeleteException+0xa>
 8009418:	4601      	mov	r1, r0
 800941a:	2001      	movs	r0, #1
 800941c:	4718      	bx	r3
 800941e:	4770      	bx	lr

08009420 <_Unwind_VRS_Get>:
 8009420:	b500      	push	{lr}
 8009422:	2904      	cmp	r1, #4
 8009424:	d807      	bhi.n	8009436 <_Unwind_VRS_Get+0x16>
 8009426:	e8df f001 	tbb	[pc, r1]
 800942a:	0903      	.short	0x0903
 800942c:	0906      	.short	0x0906
 800942e:	09          	.byte	0x09
 800942f:	00          	.byte	0x00
 8009430:	b90b      	cbnz	r3, 8009436 <_Unwind_VRS_Get+0x16>
 8009432:	2a0f      	cmp	r2, #15
 8009434:	d905      	bls.n	8009442 <_Unwind_VRS_Get+0x22>
 8009436:	2002      	movs	r0, #2
 8009438:	f85d fb04 	ldr.w	pc, [sp], #4
 800943c:	2001      	movs	r0, #1
 800943e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009442:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009446:	6852      	ldr	r2, [r2, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009452:	bf00      	nop

08009454 <_Unwind_GetGR>:
 8009454:	2300      	movs	r3, #0
 8009456:	b510      	push	{r4, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	ac03      	add	r4, sp, #12
 800945c:	460a      	mov	r2, r1
 800945e:	9400      	str	r4, [sp, #0]
 8009460:	4619      	mov	r1, r3
 8009462:	f7ff ffdd 	bl	8009420 <_Unwind_VRS_Get>
 8009466:	9803      	ldr	r0, [sp, #12]
 8009468:	b004      	add	sp, #16
 800946a:	bd10      	pop	{r4, pc}

0800946c <_Unwind_VRS_Set>:
 800946c:	b500      	push	{lr}
 800946e:	2904      	cmp	r1, #4
 8009470:	d807      	bhi.n	8009482 <_Unwind_VRS_Set+0x16>
 8009472:	e8df f001 	tbb	[pc, r1]
 8009476:	0903      	.short	0x0903
 8009478:	0906      	.short	0x0906
 800947a:	09          	.byte	0x09
 800947b:	00          	.byte	0x00
 800947c:	b90b      	cbnz	r3, 8009482 <_Unwind_VRS_Set+0x16>
 800947e:	2a0f      	cmp	r2, #15
 8009480:	d905      	bls.n	800948e <_Unwind_VRS_Set+0x22>
 8009482:	2002      	movs	r0, #2
 8009484:	f85d fb04 	ldr.w	pc, [sp], #4
 8009488:	2001      	movs	r0, #1
 800948a:	f85d fb04 	ldr.w	pc, [sp], #4
 800948e:	9901      	ldr	r1, [sp, #4]
 8009490:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009494:	6809      	ldr	r1, [r1, #0]
 8009496:	4618      	mov	r0, r3
 8009498:	6051      	str	r1, [r2, #4]
 800949a:	f85d fb04 	ldr.w	pc, [sp], #4
 800949e:	bf00      	nop

080094a0 <_Unwind_SetGR>:
 80094a0:	2300      	movs	r3, #0
 80094a2:	b510      	push	{r4, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	ac04      	add	r4, sp, #16
 80094a8:	f844 2d04 	str.w	r2, [r4, #-4]!
 80094ac:	9400      	str	r4, [sp, #0]
 80094ae:	460a      	mov	r2, r1
 80094b0:	4619      	mov	r1, r3
 80094b2:	f7ff ffdb 	bl	800946c <_Unwind_VRS_Set>
 80094b6:	b004      	add	sp, #16
 80094b8:	bd10      	pop	{r4, pc}
 80094ba:	bf00      	nop

080094bc <__gnu_Unwind_Backtrace>:
 80094bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094be:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80094c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80094c4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80094c8:	6413      	str	r3, [r2, #64]	; 0x40
 80094ca:	1d15      	adds	r5, r2, #4
 80094cc:	ac17      	add	r4, sp, #92	; 0x5c
 80094ce:	4607      	mov	r7, r0
 80094d0:	460e      	mov	r6, r1
 80094d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80094e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80094e6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80094ea:	e012      	b.n	8009512 <__gnu_Unwind_Backtrace+0x56>
 80094ec:	210c      	movs	r1, #12
 80094ee:	a816      	add	r0, sp, #88	; 0x58
 80094f0:	466a      	mov	r2, sp
 80094f2:	f7ff ffd5 	bl	80094a0 <_Unwind_SetGR>
 80094f6:	4631      	mov	r1, r6
 80094f8:	a816      	add	r0, sp, #88	; 0x58
 80094fa:	47b8      	blx	r7
 80094fc:	b978      	cbnz	r0, 800951e <__gnu_Unwind_Backtrace+0x62>
 80094fe:	9b04      	ldr	r3, [sp, #16]
 8009500:	aa16      	add	r2, sp, #88	; 0x58
 8009502:	4669      	mov	r1, sp
 8009504:	2008      	movs	r0, #8
 8009506:	4798      	blx	r3
 8009508:	2805      	cmp	r0, #5
 800950a:	4604      	mov	r4, r0
 800950c:	d008      	beq.n	8009520 <__gnu_Unwind_Backtrace+0x64>
 800950e:	2809      	cmp	r0, #9
 8009510:	d005      	beq.n	800951e <__gnu_Unwind_Backtrace+0x62>
 8009512:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009514:	4668      	mov	r0, sp
 8009516:	f7ff fdff 	bl	8009118 <get_eit_entry>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0e6      	beq.n	80094ec <__gnu_Unwind_Backtrace+0x30>
 800951e:	2409      	movs	r4, #9
 8009520:	a816      	add	r0, sp, #88	; 0x58
 8009522:	f7ff fe4b 	bl	80091bc <restore_non_core_regs>
 8009526:	4620      	mov	r0, r4
 8009528:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952e:	bf00      	nop

08009530 <__gnu_unwind_pr_common>:
 8009530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009534:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8009536:	4691      	mov	r9, r2
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	b08b      	sub	sp, #44	; 0x2c
 800953c:	3404      	adds	r4, #4
 800953e:	460d      	mov	r5, r1
 8009540:	9207      	str	r2, [sp, #28]
 8009542:	9408      	str	r4, [sp, #32]
 8009544:	f000 0b03 	and.w	fp, r0, #3
 8009548:	461e      	mov	r6, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d160      	bne.n	8009610 <__gnu_unwind_pr_common+0xe0>
 800954e:	2303      	movs	r3, #3
 8009550:	0212      	lsls	r2, r2, #8
 8009552:	9207      	str	r2, [sp, #28]
 8009554:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8009558:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800955c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800955e:	f1bb 0f02 	cmp.w	fp, #2
 8009562:	bf08      	it	eq
 8009564:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8009566:	f013 0301 	ands.w	r3, r3, #1
 800956a:	d140      	bne.n	80095ee <__gnu_unwind_pr_common+0xbe>
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	f000 0308 	and.w	r3, r0, #8
 8009572:	9303      	str	r3, [sp, #12]
 8009574:	f8d4 8000 	ldr.w	r8, [r4]
 8009578:	f1b8 0f00 	cmp.w	r8, #0
 800957c:	d039      	beq.n	80095f2 <__gnu_unwind_pr_common+0xc2>
 800957e:	2e02      	cmp	r6, #2
 8009580:	d043      	beq.n	800960a <__gnu_unwind_pr_common+0xda>
 8009582:	f8b4 8000 	ldrh.w	r8, [r4]
 8009586:	8867      	ldrh	r7, [r4, #2]
 8009588:	3404      	adds	r4, #4
 800958a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800958c:	f027 0a01 	bic.w	sl, r7, #1
 8009590:	210f      	movs	r1, #15
 8009592:	4648      	mov	r0, r9
 8009594:	449a      	add	sl, r3
 8009596:	f7ff ff5d 	bl	8009454 <_Unwind_GetGR>
 800959a:	4582      	cmp	sl, r0
 800959c:	d833      	bhi.n	8009606 <__gnu_unwind_pr_common+0xd6>
 800959e:	f028 0301 	bic.w	r3, r8, #1
 80095a2:	449a      	add	sl, r3
 80095a4:	4550      	cmp	r0, sl
 80095a6:	bf2c      	ite	cs
 80095a8:	2000      	movcs	r0, #0
 80095aa:	2001      	movcc	r0, #1
 80095ac:	007f      	lsls	r7, r7, #1
 80095ae:	f007 0702 	and.w	r7, r7, #2
 80095b2:	f008 0801 	and.w	r8, r8, #1
 80095b6:	ea47 0708 	orr.w	r7, r7, r8
 80095ba:	2f01      	cmp	r7, #1
 80095bc:	d03e      	beq.n	800963c <__gnu_unwind_pr_common+0x10c>
 80095be:	d335      	bcc.n	800962c <__gnu_unwind_pr_common+0xfc>
 80095c0:	2f02      	cmp	r7, #2
 80095c2:	d11c      	bne.n	80095fe <__gnu_unwind_pr_common+0xce>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80095ca:	9202      	str	r2, [sp, #8]
 80095cc:	f1bb 0f00 	cmp.w	fp, #0
 80095d0:	d176      	bne.n	80096c0 <__gnu_unwind_pr_common+0x190>
 80095d2:	b128      	cbz	r0, 80095e0 <__gnu_unwind_pr_common+0xb0>
 80095d4:	9903      	ldr	r1, [sp, #12]
 80095d6:	2900      	cmp	r1, #0
 80095d8:	d07e      	beq.n	80096d8 <__gnu_unwind_pr_common+0x1a8>
 80095da:	2a00      	cmp	r2, #0
 80095dc:	f000 80a6 	beq.w	800972c <__gnu_unwind_pr_common+0x1fc>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	db77      	blt.n	80096d4 <__gnu_unwind_pr_common+0x1a4>
 80095e4:	9b02      	ldr	r3, [sp, #8]
 80095e6:	3301      	adds	r3, #1
 80095e8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80095ec:	e7c2      	b.n	8009574 <__gnu_unwind_pr_common+0x44>
 80095ee:	2300      	movs	r3, #0
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	2e02      	cmp	r6, #2
 80095f4:	dd3e      	ble.n	8009674 <__gnu_unwind_pr_common+0x144>
 80095f6:	f7ff fe13 	bl	8009220 <__gnu_unwind_24bit.isra.1>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d040      	beq.n	8009680 <__gnu_unwind_pr_common+0x150>
 80095fe:	2009      	movs	r0, #9
 8009600:	b00b      	add	sp, #44	; 0x2c
 8009602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	2000      	movs	r0, #0
 8009608:	e7d0      	b.n	80095ac <__gnu_unwind_pr_common+0x7c>
 800960a:	6867      	ldr	r7, [r4, #4]
 800960c:	3408      	adds	r4, #8
 800960e:	e7bc      	b.n	800958a <__gnu_unwind_pr_common+0x5a>
 8009610:	2b02      	cmp	r3, #2
 8009612:	dca3      	bgt.n	800955c <__gnu_unwind_pr_common+0x2c>
 8009614:	2102      	movs	r1, #2
 8009616:	0c13      	lsrs	r3, r2, #16
 8009618:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800961c:	0412      	lsls	r2, r2, #16
 800961e:	b2db      	uxtb	r3, r3
 8009620:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009624:	9207      	str	r2, [sp, #28]
 8009626:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800962a:	e797      	b.n	800955c <__gnu_unwind_pr_common+0x2c>
 800962c:	f1bb 0f00 	cmp.w	fp, #0
 8009630:	d002      	beq.n	8009638 <__gnu_unwind_pr_common+0x108>
 8009632:	2800      	cmp	r0, #0
 8009634:	f040 80bd 	bne.w	80097b2 <__gnu_unwind_pr_common+0x282>
 8009638:	3404      	adds	r4, #4
 800963a:	e79b      	b.n	8009574 <__gnu_unwind_pr_common+0x44>
 800963c:	f1bb 0f00 	cmp.w	fp, #0
 8009640:	d125      	bne.n	800968e <__gnu_unwind_pr_common+0x15e>
 8009642:	b1a8      	cbz	r0, 8009670 <__gnu_unwind_pr_common+0x140>
 8009644:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009648:	1c99      	adds	r1, r3, #2
 800964a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800964e:	d0d6      	beq.n	80095fe <__gnu_unwind_pr_common+0xce>
 8009650:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8009654:	3301      	adds	r3, #1
 8009656:	9106      	str	r1, [sp, #24]
 8009658:	f000 80a3 	beq.w	80097a2 <__gnu_unwind_pr_common+0x272>
 800965c:	1d20      	adds	r0, r4, #4
 800965e:	f7ff fdd9 	bl	8009214 <_Unwind_decode_typeinfo_ptr.isra.0>
 8009662:	ab06      	add	r3, sp, #24
 8009664:	4601      	mov	r1, r0
 8009666:	4628      	mov	r0, r5
 8009668:	f7fb fa04 	bl	8004a74 <__cxa_type_match>
 800966c:	2800      	cmp	r0, #0
 800966e:	d177      	bne.n	8009760 <__gnu_unwind_pr_common+0x230>
 8009670:	3408      	adds	r4, #8
 8009672:	e77f      	b.n	8009574 <__gnu_unwind_pr_common+0x44>
 8009674:	a907      	add	r1, sp, #28
 8009676:	4648      	mov	r0, r9
 8009678:	f000 faf0 	bl	8009c5c <__gnu_unwind_execute>
 800967c:	2800      	cmp	r0, #0
 800967e:	d1be      	bne.n	80095fe <__gnu_unwind_pr_common+0xce>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d15c      	bne.n	8009740 <__gnu_unwind_pr_common+0x210>
 8009686:	2008      	movs	r0, #8
 8009688:	b00b      	add	sp, #44	; 0x2c
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	210d      	movs	r1, #13
 8009690:	4648      	mov	r0, r9
 8009692:	6a2f      	ldr	r7, [r5, #32]
 8009694:	f7ff fede 	bl	8009454 <_Unwind_GetGR>
 8009698:	4287      	cmp	r7, r0
 800969a:	d1e9      	bne.n	8009670 <__gnu_unwind_pr_common+0x140>
 800969c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800969e:	429c      	cmp	r4, r3
 80096a0:	d1e6      	bne.n	8009670 <__gnu_unwind_pr_common+0x140>
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7ff fcea 	bl	800907c <selfrel_offset31>
 80096a8:	210f      	movs	r1, #15
 80096aa:	4602      	mov	r2, r0
 80096ac:	4648      	mov	r0, r9
 80096ae:	f7ff fef7 	bl	80094a0 <_Unwind_SetGR>
 80096b2:	4648      	mov	r0, r9
 80096b4:	462a      	mov	r2, r5
 80096b6:	2100      	movs	r1, #0
 80096b8:	f7ff fef2 	bl	80094a0 <_Unwind_SetGR>
 80096bc:	2007      	movs	r0, #7
 80096be:	e79f      	b.n	8009600 <__gnu_unwind_pr_common+0xd0>
 80096c0:	210d      	movs	r1, #13
 80096c2:	4648      	mov	r0, r9
 80096c4:	6a2f      	ldr	r7, [r5, #32]
 80096c6:	f7ff fec5 	bl	8009454 <_Unwind_GetGR>
 80096ca:	4287      	cmp	r7, r0
 80096cc:	d058      	beq.n	8009780 <__gnu_unwind_pr_common+0x250>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da87      	bge.n	80095e4 <__gnu_unwind_pr_common+0xb4>
 80096d4:	3404      	adds	r4, #4
 80096d6:	e785      	b.n	80095e4 <__gnu_unwind_pr_common+0xb4>
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	b33b      	cbz	r3, 800972c <__gnu_unwind_pr_common+0x1fc>
 80096dc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80096e0:	1d27      	adds	r7, r4, #4
 80096e2:	f8cd b010 	str.w	fp, [sp, #16]
 80096e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096ea:	46a3      	mov	fp, r4
 80096ec:	f8dd a008 	ldr.w	sl, [sp, #8]
 80096f0:	461c      	mov	r4, r3
 80096f2:	9605      	str	r6, [sp, #20]
 80096f4:	e002      	b.n	80096fc <__gnu_unwind_pr_common+0x1cc>
 80096f6:	45b2      	cmp	sl, r6
 80096f8:	46b0      	mov	r8, r6
 80096fa:	d016      	beq.n	800972a <__gnu_unwind_pr_common+0x1fa>
 80096fc:	4638      	mov	r0, r7
 80096fe:	9406      	str	r4, [sp, #24]
 8009700:	f7ff fd88 	bl	8009214 <_Unwind_decode_typeinfo_ptr.isra.0>
 8009704:	ab06      	add	r3, sp, #24
 8009706:	4601      	mov	r1, r0
 8009708:	2200      	movs	r2, #0
 800970a:	4628      	mov	r0, r5
 800970c:	f7fb f9b2 	bl	8004a74 <__cxa_type_match>
 8009710:	f108 0601 	add.w	r6, r8, #1
 8009714:	3704      	adds	r7, #4
 8009716:	2800      	cmp	r0, #0
 8009718:	d0ed      	beq.n	80096f6 <__gnu_unwind_pr_common+0x1c6>
 800971a:	9b02      	ldr	r3, [sp, #8]
 800971c:	465c      	mov	r4, fp
 800971e:	4543      	cmp	r3, r8
 8009720:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009724:	9e05      	ldr	r6, [sp, #20]
 8009726:	d1d2      	bne.n	80096ce <__gnu_unwind_pr_common+0x19e>
 8009728:	e000      	b.n	800972c <__gnu_unwind_pr_common+0x1fc>
 800972a:	465c      	mov	r4, fp
 800972c:	4648      	mov	r0, r9
 800972e:	210d      	movs	r1, #13
 8009730:	f7ff fe90 	bl	8009454 <_Unwind_GetGR>
 8009734:	9b06      	ldr	r3, [sp, #24]
 8009736:	6228      	str	r0, [r5, #32]
 8009738:	62ac      	str	r4, [r5, #40]	; 0x28
 800973a:	626b      	str	r3, [r5, #36]	; 0x24
 800973c:	2006      	movs	r0, #6
 800973e:	e75f      	b.n	8009600 <__gnu_unwind_pr_common+0xd0>
 8009740:	210f      	movs	r1, #15
 8009742:	4648      	mov	r0, r9
 8009744:	f7ff fe86 	bl	8009454 <_Unwind_GetGR>
 8009748:	210e      	movs	r1, #14
 800974a:	4602      	mov	r2, r0
 800974c:	4648      	mov	r0, r9
 800974e:	f7ff fea7 	bl	80094a0 <_Unwind_SetGR>
 8009752:	4648      	mov	r0, r9
 8009754:	4a29      	ldr	r2, [pc, #164]	; (80097fc <__gnu_unwind_pr_common+0x2cc>)
 8009756:	210f      	movs	r1, #15
 8009758:	f7ff fea2 	bl	80094a0 <_Unwind_SetGR>
 800975c:	2007      	movs	r0, #7
 800975e:	e74f      	b.n	8009600 <__gnu_unwind_pr_common+0xd0>
 8009760:	4607      	mov	r7, r0
 8009762:	210d      	movs	r1, #13
 8009764:	4648      	mov	r0, r9
 8009766:	f7ff fe75 	bl	8009454 <_Unwind_GetGR>
 800976a:	2f02      	cmp	r7, #2
 800976c:	6228      	str	r0, [r5, #32]
 800976e:	d11d      	bne.n	80097ac <__gnu_unwind_pr_common+0x27c>
 8009770:	462b      	mov	r3, r5
 8009772:	9a06      	ldr	r2, [sp, #24]
 8009774:	f843 2f2c 	str.w	r2, [r3, #44]!
 8009778:	626b      	str	r3, [r5, #36]	; 0x24
 800977a:	62ac      	str	r4, [r5, #40]	; 0x28
 800977c:	2006      	movs	r0, #6
 800977e:	e73f      	b.n	8009600 <__gnu_unwind_pr_common+0xd0>
 8009780:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009782:	429c      	cmp	r4, r3
 8009784:	d1a3      	bne.n	80096ce <__gnu_unwind_pr_common+0x19e>
 8009786:	2204      	movs	r2, #4
 8009788:	2700      	movs	r7, #0
 800978a:	9902      	ldr	r1, [sp, #8]
 800978c:	18a3      	adds	r3, r4, r2
 800978e:	62a9      	str	r1, [r5, #40]	; 0x28
 8009790:	62ef      	str	r7, [r5, #44]	; 0x2c
 8009792:	632a      	str	r2, [r5, #48]	; 0x30
 8009794:	636b      	str	r3, [r5, #52]	; 0x34
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	42bb      	cmp	r3, r7
 800979a:	db1d      	blt.n	80097d8 <__gnu_unwind_pr_common+0x2a8>
 800979c:	2301      	movs	r3, #1
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	e720      	b.n	80095e4 <__gnu_unwind_pr_common+0xb4>
 80097a2:	4648      	mov	r0, r9
 80097a4:	210d      	movs	r1, #13
 80097a6:	f7ff fe55 	bl	8009454 <_Unwind_GetGR>
 80097aa:	6228      	str	r0, [r5, #32]
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	626b      	str	r3, [r5, #36]	; 0x24
 80097b0:	e7e3      	b.n	800977a <__gnu_unwind_pr_common+0x24a>
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7ff fc62 	bl	800907c <selfrel_offset31>
 80097b8:	3404      	adds	r4, #4
 80097ba:	4606      	mov	r6, r0
 80097bc:	63ac      	str	r4, [r5, #56]	; 0x38
 80097be:	4628      	mov	r0, r5
 80097c0:	f7fb f9b4 	bl	8004b2c <__cxa_begin_cleanup>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f43f af1a 	beq.w	80095fe <__gnu_unwind_pr_common+0xce>
 80097ca:	4648      	mov	r0, r9
 80097cc:	4632      	mov	r2, r6
 80097ce:	210f      	movs	r1, #15
 80097d0:	f7ff fe66 	bl	80094a0 <_Unwind_SetGR>
 80097d4:	2007      	movs	r0, #7
 80097d6:	e713      	b.n	8009600 <__gnu_unwind_pr_common+0xd0>
 80097d8:	4608      	mov	r0, r1
 80097da:	3001      	adds	r0, #1
 80097dc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80097e0:	f7ff fc4c 	bl	800907c <selfrel_offset31>
 80097e4:	210f      	movs	r1, #15
 80097e6:	4602      	mov	r2, r0
 80097e8:	4648      	mov	r0, r9
 80097ea:	f7ff fe59 	bl	80094a0 <_Unwind_SetGR>
 80097ee:	4648      	mov	r0, r9
 80097f0:	462a      	mov	r2, r5
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7ff fe54 	bl	80094a0 <_Unwind_SetGR>
 80097f8:	2007      	movs	r0, #7
 80097fa:	e701      	b.n	8009600 <__gnu_unwind_pr_common+0xd0>
 80097fc:	080054b9 	.word	0x080054b9

08009800 <__aeabi_unwind_cpp_pr0>:
 8009800:	2300      	movs	r3, #0
 8009802:	e695      	b.n	8009530 <__gnu_unwind_pr_common>

08009804 <__aeabi_unwind_cpp_pr1>:
 8009804:	2301      	movs	r3, #1
 8009806:	e693      	b.n	8009530 <__gnu_unwind_pr_common>

08009808 <__aeabi_unwind_cpp_pr2>:
 8009808:	2302      	movs	r3, #2
 800980a:	e691      	b.n	8009530 <__gnu_unwind_pr_common>

0800980c <_Unwind_VRS_Pop>:
 800980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980e:	4604      	mov	r4, r0
 8009810:	b0c5      	sub	sp, #276	; 0x114
 8009812:	2904      	cmp	r1, #4
 8009814:	d80d      	bhi.n	8009832 <_Unwind_VRS_Pop+0x26>
 8009816:	e8df f001 	tbb	[pc, r1]
 800981a:	0355      	.short	0x0355
 800981c:	310c      	.short	0x310c
 800981e:	0f          	.byte	0x0f
 800981f:	00          	.byte	0x00
 8009820:	2b01      	cmp	r3, #1
 8009822:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8009826:	b295      	uxth	r5, r2
 8009828:	d164      	bne.n	80098f4 <_Unwind_VRS_Pop+0xe8>
 800982a:	1972      	adds	r2, r6, r5
 800982c:	2a10      	cmp	r2, #16
 800982e:	f240 809d 	bls.w	800996c <_Unwind_VRS_Pop+0x160>
 8009832:	2002      	movs	r0, #2
 8009834:	b045      	add	sp, #276	; 0x114
 8009836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1fa      	bne.n	8009832 <_Unwind_VRS_Pop+0x26>
 800983c:	2a10      	cmp	r2, #16
 800983e:	d8f8      	bhi.n	8009832 <_Unwind_VRS_Pop+0x26>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	06d8      	lsls	r0, r3, #27
 8009844:	f100 80c8 	bmi.w	80099d8 <_Unwind_VRS_Pop+0x1cc>
 8009848:	ae22      	add	r6, sp, #136	; 0x88
 800984a:	4630      	mov	r0, r6
 800984c:	9201      	str	r2, [sp, #4]
 800984e:	2501      	movs	r5, #1
 8009850:	f000 f974 	bl	8009b3c <__gnu_Unwind_Save_WMMXC>
 8009854:	2300      	movs	r3, #0
 8009856:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009858:	9a01      	ldr	r2, [sp, #4]
 800985a:	fa05 f103 	lsl.w	r1, r5, r3
 800985e:	4211      	tst	r1, r2
 8009860:	d003      	beq.n	800986a <_Unwind_VRS_Pop+0x5e>
 8009862:	6801      	ldr	r1, [r0, #0]
 8009864:	3004      	adds	r0, #4
 8009866:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800986a:	3301      	adds	r3, #1
 800986c:	2b04      	cmp	r3, #4
 800986e:	d1f4      	bne.n	800985a <_Unwind_VRS_Pop+0x4e>
 8009870:	63a0      	str	r0, [r4, #56]	; 0x38
 8009872:	4630      	mov	r0, r6
 8009874:	f000 f958 	bl	8009b28 <__gnu_Unwind_Restore_WMMXC>
 8009878:	2000      	movs	r0, #0
 800987a:	e7db      	b.n	8009834 <_Unwind_VRS_Pop+0x28>
 800987c:	2b03      	cmp	r3, #3
 800987e:	d1d8      	bne.n	8009832 <_Unwind_VRS_Pop+0x26>
 8009880:	0c15      	lsrs	r5, r2, #16
 8009882:	b297      	uxth	r7, r2
 8009884:	19eb      	adds	r3, r5, r7
 8009886:	2b10      	cmp	r3, #16
 8009888:	d8d3      	bhi.n	8009832 <_Unwind_VRS_Pop+0x26>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	071e      	lsls	r6, r3, #28
 800988e:	f100 80b7 	bmi.w	8009a00 <_Unwind_VRS_Pop+0x1f4>
 8009892:	ae22      	add	r6, sp, #136	; 0x88
 8009894:	4630      	mov	r0, r6
 8009896:	f000 f925 	bl	8009ae4 <__gnu_Unwind_Save_WMMXD>
 800989a:	00ed      	lsls	r5, r5, #3
 800989c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800989e:	b15f      	cbz	r7, 80098b8 <_Unwind_VRS_Pop+0xac>
 80098a0:	3d04      	subs	r5, #4
 80098a2:	4603      	mov	r3, r0
 80098a4:	1971      	adds	r1, r6, r5
 80098a6:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	4283      	cmp	r3, r0
 80098b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80098b4:	d1f9      	bne.n	80098aa <_Unwind_VRS_Pop+0x9e>
 80098b6:	4618      	mov	r0, r3
 80098b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 f8f0 	bl	8009aa0 <__gnu_Unwind_Restore_WMMXD>
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7b7      	b.n	8009834 <_Unwind_VRS_Pop+0x28>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1b4      	bne.n	8009832 <_Unwind_VRS_Pop+0x26>
 80098c8:	2701      	movs	r7, #1
 80098ca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80098cc:	b296      	uxth	r6, r2
 80098ce:	1d20      	adds	r0, r4, #4
 80098d0:	fa07 f103 	lsl.w	r1, r7, r3
 80098d4:	4231      	tst	r1, r6
 80098d6:	f103 0301 	add.w	r3, r3, #1
 80098da:	d002      	beq.n	80098e2 <_Unwind_VRS_Pop+0xd6>
 80098dc:	6829      	ldr	r1, [r5, #0]
 80098de:	3504      	adds	r5, #4
 80098e0:	6001      	str	r1, [r0, #0]
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	f100 0004 	add.w	r0, r0, #4
 80098e8:	d1f2      	bne.n	80098d0 <_Unwind_VRS_Pop+0xc4>
 80098ea:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80098ee:	d13b      	bne.n	8009968 <_Unwind_VRS_Pop+0x15c>
 80098f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80098f2:	e79f      	b.n	8009834 <_Unwind_VRS_Pop+0x28>
 80098f4:	2b05      	cmp	r3, #5
 80098f6:	d19c      	bne.n	8009832 <_Unwind_VRS_Pop+0x26>
 80098f8:	1977      	adds	r7, r6, r5
 80098fa:	2f20      	cmp	r7, #32
 80098fc:	d899      	bhi.n	8009832 <_Unwind_VRS_Pop+0x26>
 80098fe:	2e0f      	cmp	r6, #15
 8009900:	d966      	bls.n	80099d0 <_Unwind_VRS_Pop+0x1c4>
 8009902:	462f      	mov	r7, r5
 8009904:	2d00      	cmp	r5, #0
 8009906:	d13a      	bne.n	800997e <_Unwind_VRS_Pop+0x172>
 8009908:	462a      	mov	r2, r5
 800990a:	2700      	movs	r7, #0
 800990c:	2a00      	cmp	r2, #0
 800990e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009910:	dd72      	ble.n	80099f8 <_Unwind_VRS_Pop+0x1ec>
 8009912:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8009916:	4601      	mov	r1, r0
 8009918:	a844      	add	r0, sp, #272	; 0x110
 800991a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800991e:	388c      	subs	r0, #140	; 0x8c
 8009920:	f851 5b04 	ldr.w	r5, [r1], #4
 8009924:	4291      	cmp	r1, r2
 8009926:	f840 5f04 	str.w	r5, [r0, #4]!
 800992a:	d1f9      	bne.n	8009920 <_Unwind_VRS_Pop+0x114>
 800992c:	4608      	mov	r0, r1
 800992e:	b197      	cbz	r7, 8009956 <_Unwind_VRS_Pop+0x14a>
 8009930:	2e10      	cmp	r6, #16
 8009932:	4632      	mov	r2, r6
 8009934:	bf38      	it	cc
 8009936:	2210      	movcc	r2, #16
 8009938:	a944      	add	r1, sp, #272	; 0x110
 800993a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800993e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8009942:	0079      	lsls	r1, r7, #1
 8009944:	3a04      	subs	r2, #4
 8009946:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800994a:	f850 5b04 	ldr.w	r5, [r0], #4
 800994e:	4288      	cmp	r0, r1
 8009950:	f842 5f04 	str.w	r5, [r2, #4]!
 8009954:	d1f9      	bne.n	800994a <_Unwind_VRS_Pop+0x13e>
 8009956:	2b01      	cmp	r3, #1
 8009958:	d048      	beq.n	80099ec <_Unwind_VRS_Pop+0x1e0>
 800995a:	2e0f      	cmp	r6, #15
 800995c:	63a1      	str	r1, [r4, #56]	; 0x38
 800995e:	d933      	bls.n	80099c8 <_Unwind_VRS_Pop+0x1bc>
 8009960:	b117      	cbz	r7, 8009968 <_Unwind_VRS_Pop+0x15c>
 8009962:	a802      	add	r0, sp, #8
 8009964:	f000 f894 	bl	8009a90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8009968:	2000      	movs	r0, #0
 800996a:	e763      	b.n	8009834 <_Unwind_VRS_Pop+0x28>
 800996c:	2e0f      	cmp	r6, #15
 800996e:	f63f af60 	bhi.w	8009832 <_Unwind_VRS_Pop+0x26>
 8009972:	2700      	movs	r7, #0
 8009974:	6822      	ldr	r2, [r4, #0]
 8009976:	07d1      	lsls	r1, r2, #31
 8009978:	d417      	bmi.n	80099aa <_Unwind_VRS_Pop+0x19e>
 800997a:	2f00      	cmp	r7, #0
 800997c:	d060      	beq.n	8009a40 <_Unwind_VRS_Pop+0x234>
 800997e:	6822      	ldr	r2, [r4, #0]
 8009980:	0751      	lsls	r1, r2, #29
 8009982:	d445      	bmi.n	8009a10 <_Unwind_VRS_Pop+0x204>
 8009984:	2b01      	cmp	r3, #1
 8009986:	d04d      	beq.n	8009a24 <_Unwind_VRS_Pop+0x218>
 8009988:	2e0f      	cmp	r6, #15
 800998a:	d806      	bhi.n	800999a <_Unwind_VRS_Pop+0x18e>
 800998c:	a822      	add	r0, sp, #136	; 0x88
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	f000 f87a 	bl	8009a88 <__gnu_Unwind_Save_VFP_D>
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	2f00      	cmp	r7, #0
 8009998:	d0b6      	beq.n	8009908 <_Unwind_VRS_Pop+0xfc>
 800999a:	a802      	add	r0, sp, #8
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	f000 f87b 	bl	8009a98 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	f1c6 0210 	rsb	r2, r6, #16
 80099a8:	e7b0      	b.n	800990c <_Unwind_VRS_Pop+0x100>
 80099aa:	f022 0101 	bic.w	r1, r2, #1
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	6021      	str	r1, [r4, #0]
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	4620      	mov	r0, r4
 80099b6:	d03b      	beq.n	8009a30 <_Unwind_VRS_Pop+0x224>
 80099b8:	f022 0203 	bic.w	r2, r2, #3
 80099bc:	f840 2b48 	str.w	r2, [r0], #72
 80099c0:	f000 f85a 	bl	8009a78 <__gnu_Unwind_Save_VFP>
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	e7d8      	b.n	800997a <_Unwind_VRS_Pop+0x16e>
 80099c8:	a822      	add	r0, sp, #136	; 0x88
 80099ca:	f000 f859 	bl	8009a80 <__gnu_Unwind_Restore_VFP_D>
 80099ce:	e7c7      	b.n	8009960 <_Unwind_VRS_Pop+0x154>
 80099d0:	2f10      	cmp	r7, #16
 80099d2:	d9ce      	bls.n	8009972 <_Unwind_VRS_Pop+0x166>
 80099d4:	3f10      	subs	r7, #16
 80099d6:	e7cd      	b.n	8009974 <_Unwind_VRS_Pop+0x168>
 80099d8:	f023 0310 	bic.w	r3, r3, #16
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80099e2:	9201      	str	r2, [sp, #4]
 80099e4:	f000 f8aa 	bl	8009b3c <__gnu_Unwind_Save_WMMXC>
 80099e8:	9a01      	ldr	r2, [sp, #4]
 80099ea:	e72d      	b.n	8009848 <_Unwind_VRS_Pop+0x3c>
 80099ec:	3104      	adds	r1, #4
 80099ee:	63a1      	str	r1, [r4, #56]	; 0x38
 80099f0:	a822      	add	r0, sp, #136	; 0x88
 80099f2:	f000 f83d 	bl	8009a70 <__gnu_Unwind_Restore_VFP>
 80099f6:	e7b7      	b.n	8009968 <_Unwind_VRS_Pop+0x15c>
 80099f8:	2f00      	cmp	r7, #0
 80099fa:	d199      	bne.n	8009930 <_Unwind_VRS_Pop+0x124>
 80099fc:	4601      	mov	r1, r0
 80099fe:	e7aa      	b.n	8009956 <_Unwind_VRS_Pop+0x14a>
 8009a00:	f023 0308 	bic.w	r3, r3, #8
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8009a0a:	f000 f86b 	bl	8009ae4 <__gnu_Unwind_Save_WMMXD>
 8009a0e:	e740      	b.n	8009892 <_Unwind_VRS_Pop+0x86>
 8009a10:	4620      	mov	r0, r4
 8009a12:	f022 0204 	bic.w	r2, r2, #4
 8009a16:	f840 2bd0 	str.w	r2, [r0], #208
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	f000 f83c 	bl	8009a98 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	e7af      	b.n	8009984 <_Unwind_VRS_Pop+0x178>
 8009a24:	a822      	add	r0, sp, #136	; 0x88
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	f000 f826 	bl	8009a78 <__gnu_Unwind_Save_VFP>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	e7b9      	b.n	80099a4 <_Unwind_VRS_Pop+0x198>
 8009a30:	f041 0102 	orr.w	r1, r1, #2
 8009a34:	f840 1b48 	str.w	r1, [r0], #72
 8009a38:	f000 f826 	bl	8009a88 <__gnu_Unwind_Save_VFP_D>
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	e79c      	b.n	800997a <_Unwind_VRS_Pop+0x16e>
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d003      	beq.n	8009a4c <_Unwind_VRS_Pop+0x240>
 8009a44:	2e0f      	cmp	r6, #15
 8009a46:	f63f af5f 	bhi.w	8009908 <_Unwind_VRS_Pop+0xfc>
 8009a4a:	e79f      	b.n	800998c <_Unwind_VRS_Pop+0x180>
 8009a4c:	a822      	add	r0, sp, #136	; 0x88
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	f000 f812 	bl	8009a78 <__gnu_Unwind_Save_VFP>
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	e757      	b.n	8009908 <_Unwind_VRS_Pop+0xfc>

08009a58 <__restore_core_regs>:
 8009a58:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8009a5c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8009a60:	469c      	mov	ip, r3
 8009a62:	46a6      	mov	lr, r4
 8009a64:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8009a68:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009a6c:	46e5      	mov	sp, ip
 8009a6e:	bd00      	pop	{pc}

08009a70 <__gnu_Unwind_Restore_VFP>:
 8009a70:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop

08009a78 <__gnu_Unwind_Save_VFP>:
 8009a78:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop

08009a80 <__gnu_Unwind_Restore_VFP_D>:
 8009a80:	ec90 0b20 	vldmia	r0, {d0-d15}
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop

08009a88 <__gnu_Unwind_Save_VFP_D>:
 8009a88:	ec80 0b20 	vstmia	r0, {d0-d15}
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop

08009a90 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8009a90:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop

08009a98 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8009a98:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop

08009aa0 <__gnu_Unwind_Restore_WMMXD>:
 8009aa0:	ecf0 0102 	ldfe	f0, [r0], #8
 8009aa4:	ecf0 1102 	ldfe	f1, [r0], #8
 8009aa8:	ecf0 2102 	ldfe	f2, [r0], #8
 8009aac:	ecf0 3102 	ldfe	f3, [r0], #8
 8009ab0:	ecf0 4102 	ldfe	f4, [r0], #8
 8009ab4:	ecf0 5102 	ldfe	f5, [r0], #8
 8009ab8:	ecf0 6102 	ldfe	f6, [r0], #8
 8009abc:	ecf0 7102 	ldfe	f7, [r0], #8
 8009ac0:	ecf0 8102 	ldfp	f0, [r0], #8
 8009ac4:	ecf0 9102 	ldfp	f1, [r0], #8
 8009ac8:	ecf0 a102 	ldfp	f2, [r0], #8
 8009acc:	ecf0 b102 	ldfp	f3, [r0], #8
 8009ad0:	ecf0 c102 	ldfp	f4, [r0], #8
 8009ad4:	ecf0 d102 	ldfp	f5, [r0], #8
 8009ad8:	ecf0 e102 	ldfp	f6, [r0], #8
 8009adc:	ecf0 f102 	ldfp	f7, [r0], #8
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop

08009ae4 <__gnu_Unwind_Save_WMMXD>:
 8009ae4:	ece0 0102 	stfe	f0, [r0], #8
 8009ae8:	ece0 1102 	stfe	f1, [r0], #8
 8009aec:	ece0 2102 	stfe	f2, [r0], #8
 8009af0:	ece0 3102 	stfe	f3, [r0], #8
 8009af4:	ece0 4102 	stfe	f4, [r0], #8
 8009af8:	ece0 5102 	stfe	f5, [r0], #8
 8009afc:	ece0 6102 	stfe	f6, [r0], #8
 8009b00:	ece0 7102 	stfe	f7, [r0], #8
 8009b04:	ece0 8102 	stfp	f0, [r0], #8
 8009b08:	ece0 9102 	stfp	f1, [r0], #8
 8009b0c:	ece0 a102 	stfp	f2, [r0], #8
 8009b10:	ece0 b102 	stfp	f3, [r0], #8
 8009b14:	ece0 c102 	stfp	f4, [r0], #8
 8009b18:	ece0 d102 	stfp	f5, [r0], #8
 8009b1c:	ece0 e102 	stfp	f6, [r0], #8
 8009b20:	ece0 f102 	stfp	f7, [r0], #8
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop

08009b28 <__gnu_Unwind_Restore_WMMXC>:
 8009b28:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8009b2c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8009b30:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8009b34:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop

08009b3c <__gnu_Unwind_Save_WMMXC>:
 8009b3c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8009b40:	fca0 9101 	stc2	1, cr9, [r0], #4
 8009b44:	fca0 a101 	stc2	1, cr10, [r0], #4
 8009b48:	fca0 b101 	stc2	1, cr11, [r0], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop

08009b50 <_Unwind_RaiseException>:
 8009b50:	46ec      	mov	ip, sp
 8009b52:	b500      	push	{lr}
 8009b54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009b58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009b5c:	f04f 0300 	mov.w	r3, #0
 8009b60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009b64:	a901      	add	r1, sp, #4
 8009b66:	f7ff fbed 	bl	8009344 <__gnu_Unwind_RaiseException>
 8009b6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009b6e:	b012      	add	sp, #72	; 0x48
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop

08009b74 <_Unwind_Resume>:
 8009b74:	46ec      	mov	ip, sp
 8009b76:	b500      	push	{lr}
 8009b78:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009b7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009b88:	a901      	add	r1, sp, #4
 8009b8a:	f7ff fc15 	bl	80093b8 <__gnu_Unwind_Resume>
 8009b8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009b92:	b012      	add	sp, #72	; 0x48
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop

08009b98 <_Unwind_Resume_or_Rethrow>:
 8009b98:	46ec      	mov	ip, sp
 8009b9a:	b500      	push	{lr}
 8009b9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009ba0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009bac:	a901      	add	r1, sp, #4
 8009bae:	f7ff fc25 	bl	80093fc <__gnu_Unwind_Resume_or_Rethrow>
 8009bb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009bb6:	b012      	add	sp, #72	; 0x48
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop

08009bbc <_Unwind_ForcedUnwind>:
 8009bbc:	46ec      	mov	ip, sp
 8009bbe:	b500      	push	{lr}
 8009bc0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009bc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009bd0:	ab01      	add	r3, sp, #4
 8009bd2:	f7ff fbe7 	bl	80093a4 <__gnu_Unwind_ForcedUnwind>
 8009bd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009bda:	b012      	add	sp, #72	; 0x48
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop

08009be0 <_Unwind_Backtrace>:
 8009be0:	46ec      	mov	ip, sp
 8009be2:	b500      	push	{lr}
 8009be4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009be8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009bf4:	aa01      	add	r2, sp, #4
 8009bf6:	f7ff fc61 	bl	80094bc <__gnu_Unwind_Backtrace>
 8009bfa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009bfe:	b012      	add	sp, #72	; 0x48
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop

08009c04 <next_unwind_byte>:
 8009c04:	7a02      	ldrb	r2, [r0, #8]
 8009c06:	b91a      	cbnz	r2, 8009c10 <next_unwind_byte+0xc>
 8009c08:	7a43      	ldrb	r3, [r0, #9]
 8009c0a:	b943      	cbnz	r3, 8009c1e <next_unwind_byte+0x1a>
 8009c0c:	20b0      	movs	r0, #176	; 0xb0
 8009c0e:	4770      	bx	lr
 8009c10:	6803      	ldr	r3, [r0, #0]
 8009c12:	3a01      	subs	r2, #1
 8009c14:	7202      	strb	r2, [r0, #8]
 8009c16:	021a      	lsls	r2, r3, #8
 8009c18:	6002      	str	r2, [r0, #0]
 8009c1a:	0e18      	lsrs	r0, r3, #24
 8009c1c:	4770      	bx	lr
 8009c1e:	2103      	movs	r1, #3
 8009c20:	6842      	ldr	r2, [r0, #4]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b410      	push	{r4}
 8009c26:	7243      	strb	r3, [r0, #9]
 8009c28:	6813      	ldr	r3, [r2, #0]
 8009c2a:	1d14      	adds	r4, r2, #4
 8009c2c:	7201      	strb	r1, [r0, #8]
 8009c2e:	021a      	lsls	r2, r3, #8
 8009c30:	6044      	str	r4, [r0, #4]
 8009c32:	6002      	str	r2, [r0, #0]
 8009c34:	bc10      	pop	{r4}
 8009c36:	0e18      	lsrs	r0, r3, #24
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop

08009c3c <_Unwind_GetGR.constprop.0>:
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	b500      	push	{lr}
 8009c40:	b085      	sub	sp, #20
 8009c42:	aa03      	add	r2, sp, #12
 8009c44:	9200      	str	r2, [sp, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	220c      	movs	r2, #12
 8009c4a:	f7ff fbe9 	bl	8009420 <_Unwind_VRS_Get>
 8009c4e:	9803      	ldr	r0, [sp, #12]
 8009c50:	b005      	add	sp, #20
 8009c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c56:	bf00      	nop

08009c58 <unwind_UCB_from_context>:
 8009c58:	e7f0      	b.n	8009c3c <_Unwind_GetGR.constprop.0>
 8009c5a:	bf00      	nop

08009c5c <__gnu_unwind_execute>:
 8009c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c60:	4606      	mov	r6, r0
 8009c62:	460f      	mov	r7, r1
 8009c64:	f04f 0800 	mov.w	r8, #0
 8009c68:	b085      	sub	sp, #20
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7ff ffca 	bl	8009c04 <next_unwind_byte>
 8009c70:	28b0      	cmp	r0, #176	; 0xb0
 8009c72:	4604      	mov	r4, r0
 8009c74:	d023      	beq.n	8009cbe <__gnu_unwind_execute+0x62>
 8009c76:	0605      	lsls	r5, r0, #24
 8009c78:	d427      	bmi.n	8009cca <__gnu_unwind_execute+0x6e>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f10d 090c 	add.w	r9, sp, #12
 8009c80:	4619      	mov	r1, r3
 8009c82:	0085      	lsls	r5, r0, #2
 8009c84:	220d      	movs	r2, #13
 8009c86:	f8cd 9000 	str.w	r9, [sp]
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff fbc8 	bl	8009420 <_Unwind_VRS_Get>
 8009c90:	b2ed      	uxtb	r5, r5
 8009c92:	9b03      	ldr	r3, [sp, #12]
 8009c94:	0660      	lsls	r0, r4, #25
 8009c96:	f105 0504 	add.w	r5, r5, #4
 8009c9a:	bf4c      	ite	mi
 8009c9c:	1b5d      	submi	r5, r3, r5
 8009c9e:	18ed      	addpl	r5, r5, r3
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	220d      	movs	r2, #13
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f8cd 9000 	str.w	r9, [sp]
 8009caa:	4630      	mov	r0, r6
 8009cac:	9503      	str	r5, [sp, #12]
 8009cae:	f7ff fbdd 	bl	800946c <_Unwind_VRS_Set>
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	f7ff ffa6 	bl	8009c04 <next_unwind_byte>
 8009cb8:	28b0      	cmp	r0, #176	; 0xb0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	d1db      	bne.n	8009c76 <__gnu_unwind_execute+0x1a>
 8009cbe:	f1b8 0f00 	cmp.w	r8, #0
 8009cc2:	f000 8094 	beq.w	8009dee <__gnu_unwind_execute+0x192>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e01c      	b.n	8009d04 <__gnu_unwind_execute+0xa8>
 8009cca:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8009cce:	2b80      	cmp	r3, #128	; 0x80
 8009cd0:	d05c      	beq.n	8009d8c <__gnu_unwind_execute+0x130>
 8009cd2:	2b90      	cmp	r3, #144	; 0x90
 8009cd4:	d019      	beq.n	8009d0a <__gnu_unwind_execute+0xae>
 8009cd6:	2ba0      	cmp	r3, #160	; 0xa0
 8009cd8:	d02c      	beq.n	8009d34 <__gnu_unwind_execute+0xd8>
 8009cda:	2bb0      	cmp	r3, #176	; 0xb0
 8009cdc:	d03e      	beq.n	8009d5c <__gnu_unwind_execute+0x100>
 8009cde:	2bc0      	cmp	r3, #192	; 0xc0
 8009ce0:	d06b      	beq.n	8009dba <__gnu_unwind_execute+0x15e>
 8009ce2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009ce6:	2bd0      	cmp	r3, #208	; 0xd0
 8009ce8:	d10b      	bne.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009cea:	f000 0207 	and.w	r2, r0, #7
 8009cee:	3201      	adds	r2, #1
 8009cf0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009cf4:	2305      	movs	r3, #5
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff fd87 	bl	800980c <_Unwind_VRS_Pop>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d0b3      	beq.n	8009c6a <__gnu_unwind_execute+0xe>
 8009d02:	2009      	movs	r0, #9
 8009d04:	b005      	add	sp, #20
 8009d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	f000 030d 	and.w	r3, r0, #13
 8009d0e:	2b0d      	cmp	r3, #13
 8009d10:	d0f7      	beq.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009d12:	2300      	movs	r3, #0
 8009d14:	ad03      	add	r5, sp, #12
 8009d16:	f000 020f 	and.w	r2, r0, #15
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	9500      	str	r5, [sp, #0]
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff fb7e 	bl	8009420 <_Unwind_VRS_Get>
 8009d24:	2300      	movs	r3, #0
 8009d26:	9500      	str	r5, [sp, #0]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	220d      	movs	r2, #13
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff fb9d 	bl	800946c <_Unwind_VRS_Set>
 8009d32:	e79a      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009d34:	43c3      	mvns	r3, r0
 8009d36:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	411a      	asrs	r2, r3
 8009d40:	2300      	movs	r3, #0
 8009d42:	0701      	lsls	r1, r0, #28
 8009d44:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8009d48:	bf48      	it	mi
 8009d4a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff fd5b 	bl	800980c <_Unwind_VRS_Pop>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d1d3      	bne.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009d5a:	e786      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009d5c:	28b1      	cmp	r0, #177	; 0xb1
 8009d5e:	d057      	beq.n	8009e10 <__gnu_unwind_execute+0x1b4>
 8009d60:	28b2      	cmp	r0, #178	; 0xb2
 8009d62:	d068      	beq.n	8009e36 <__gnu_unwind_execute+0x1da>
 8009d64:	28b3      	cmp	r0, #179	; 0xb3
 8009d66:	f000 8095 	beq.w	8009e94 <__gnu_unwind_execute+0x238>
 8009d6a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8009d6e:	2bb4      	cmp	r3, #180	; 0xb4
 8009d70:	d0c7      	beq.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009d72:	2301      	movs	r3, #1
 8009d74:	f000 0207 	and.w	r2, r0, #7
 8009d78:	441a      	add	r2, r3
 8009d7a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fd43 	bl	800980c <_Unwind_VRS_Pop>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d1bb      	bne.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009d8a:	e76e      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff ff39 	bl	8009c04 <next_unwind_byte>
 8009d92:	0224      	lsls	r4, r4, #8
 8009d94:	4304      	orrs	r4, r0
 8009d96:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009d9a:	d0b2      	beq.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	0124      	lsls	r4, r4, #4
 8009da0:	b2a2      	uxth	r2, r4
 8009da2:	4619      	mov	r1, r3
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff fd31 	bl	800980c <_Unwind_VRS_Pop>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d1a9      	bne.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009dae:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8009db2:	bf18      	it	ne
 8009db4:	f04f 0801 	movne.w	r8, #1
 8009db8:	e757      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009dba:	28c6      	cmp	r0, #198	; 0xc6
 8009dbc:	d07d      	beq.n	8009eba <__gnu_unwind_execute+0x25e>
 8009dbe:	28c7      	cmp	r0, #199	; 0xc7
 8009dc0:	f000 8086 	beq.w	8009ed0 <__gnu_unwind_execute+0x274>
 8009dc4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009dc8:	2bc0      	cmp	r3, #192	; 0xc0
 8009dca:	f000 8094 	beq.w	8009ef6 <__gnu_unwind_execute+0x29a>
 8009dce:	28c8      	cmp	r0, #200	; 0xc8
 8009dd0:	f000 809f 	beq.w	8009f12 <__gnu_unwind_execute+0x2b6>
 8009dd4:	28c9      	cmp	r0, #201	; 0xc9
 8009dd6:	d194      	bne.n	8009d02 <__gnu_unwind_execute+0xa6>
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ff13 	bl	8009c04 <next_unwind_byte>
 8009dde:	0302      	lsls	r2, r0, #12
 8009de0:	f000 000f 	and.w	r0, r0, #15
 8009de4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8009de8:	3001      	adds	r0, #1
 8009dea:	4302      	orrs	r2, r0
 8009dec:	e782      	b.n	8009cf4 <__gnu_unwind_execute+0x98>
 8009dee:	ac03      	add	r4, sp, #12
 8009df0:	4643      	mov	r3, r8
 8009df2:	220e      	movs	r2, #14
 8009df4:	4641      	mov	r1, r8
 8009df6:	9400      	str	r4, [sp, #0]
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff fb11 	bl	8009420 <_Unwind_VRS_Get>
 8009dfe:	9400      	str	r4, [sp, #0]
 8009e00:	4630      	mov	r0, r6
 8009e02:	4643      	mov	r3, r8
 8009e04:	220f      	movs	r2, #15
 8009e06:	4641      	mov	r1, r8
 8009e08:	f7ff fb30 	bl	800946c <_Unwind_VRS_Set>
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	e779      	b.n	8009d04 <__gnu_unwind_execute+0xa8>
 8009e10:	4638      	mov	r0, r7
 8009e12:	f7ff fef7 	bl	8009c04 <next_unwind_byte>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f af73 	beq.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009e1c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009e20:	f47f af6f 	bne.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009e24:	4602      	mov	r2, r0
 8009e26:	4619      	mov	r1, r3
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7ff fcef 	bl	800980c <_Unwind_VRS_Pop>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f47f af67 	bne.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009e34:	e719      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009e36:	2300      	movs	r3, #0
 8009e38:	f10d 090c 	add.w	r9, sp, #12
 8009e3c:	220d      	movs	r2, #13
 8009e3e:	4619      	mov	r1, r3
 8009e40:	f8cd 9000 	str.w	r9, [sp]
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff faeb 	bl	8009420 <_Unwind_VRS_Get>
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f7ff feda 	bl	8009c04 <next_unwind_byte>
 8009e50:	0602      	lsls	r2, r0, #24
 8009e52:	f04f 0402 	mov.w	r4, #2
 8009e56:	d50c      	bpl.n	8009e72 <__gnu_unwind_execute+0x216>
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009e5e:	40a0      	lsls	r0, r4
 8009e60:	4403      	add	r3, r0
 8009e62:	4638      	mov	r0, r7
 8009e64:	9303      	str	r3, [sp, #12]
 8009e66:	f7ff fecd 	bl	8009c04 <next_unwind_byte>
 8009e6a:	0603      	lsls	r3, r0, #24
 8009e6c:	f104 0407 	add.w	r4, r4, #7
 8009e70:	d4f2      	bmi.n	8009e58 <__gnu_unwind_execute+0x1fc>
 8009e72:	2300      	movs	r3, #0
 8009e74:	9903      	ldr	r1, [sp, #12]
 8009e76:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8009e7a:	40a2      	lsls	r2, r4
 8009e7c:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8009e80:	188c      	adds	r4, r1, r2
 8009e82:	f8cd 9000 	str.w	r9, [sp]
 8009e86:	4619      	mov	r1, r3
 8009e88:	220d      	movs	r2, #13
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	9403      	str	r4, [sp, #12]
 8009e8e:	f7ff faed 	bl	800946c <_Unwind_VRS_Set>
 8009e92:	e6ea      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009e94:	4638      	mov	r0, r7
 8009e96:	f7ff feb5 	bl	8009c04 <next_unwind_byte>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	0301      	lsls	r1, r0, #12
 8009e9e:	f000 000f 	and.w	r0, r0, #15
 8009ea2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8009ea6:	18c2      	adds	r2, r0, r3
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4619      	mov	r1, r3
 8009eae:	f7ff fcad 	bl	800980c <_Unwind_VRS_Pop>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f47f af25 	bne.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009eb8:	e6d7      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7ff fea2 	bl	8009c04 <next_unwind_byte>
 8009ec0:	0301      	lsls	r1, r0, #12
 8009ec2:	f000 000f 	and.w	r0, r0, #15
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8009ecc:	1c42      	adds	r2, r0, #1
 8009ece:	e7eb      	b.n	8009ea8 <__gnu_unwind_execute+0x24c>
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f7ff fe97 	bl	8009c04 <next_unwind_byte>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f43f af13 	beq.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009edc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009ee0:	f47f af0f 	bne.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	2104      	movs	r1, #4
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff fc8f 	bl	800980c <_Unwind_VRS_Pop>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f47f af07 	bne.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009ef4:	e6b9      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	f000 020f 	and.w	r2, r0, #15
 8009efc:	3201      	adds	r2, #1
 8009efe:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8009f02:	4619      	mov	r1, r3
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff fc81 	bl	800980c <_Unwind_VRS_Pop>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f47f aef9 	bne.w	8009d02 <__gnu_unwind_execute+0xa6>
 8009f10:	e6ab      	b.n	8009c6a <__gnu_unwind_execute+0xe>
 8009f12:	4638      	mov	r0, r7
 8009f14:	f7ff fe76 	bl	8009c04 <next_unwind_byte>
 8009f18:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009f1c:	f000 030f 	and.w	r3, r0, #15
 8009f20:	3210      	adds	r2, #16
 8009f22:	3301      	adds	r3, #1
 8009f24:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009f28:	e6e4      	b.n	8009cf4 <__gnu_unwind_execute+0x98>
 8009f2a:	bf00      	nop

08009f2c <__gnu_unwind_frame>:
 8009f2c:	b530      	push	{r4, r5, lr}
 8009f2e:	2403      	movs	r4, #3
 8009f30:	460d      	mov	r5, r1
 8009f32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009f34:	b085      	sub	sp, #20
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	f88d 400c 	strb.w	r4, [sp, #12]
 8009f3c:	79dc      	ldrb	r4, [r3, #7]
 8009f3e:	0212      	lsls	r2, r2, #8
 8009f40:	3308      	adds	r3, #8
 8009f42:	a901      	add	r1, sp, #4
 8009f44:	4628      	mov	r0, r5
 8009f46:	9201      	str	r2, [sp, #4]
 8009f48:	f88d 400d 	strb.w	r4, [sp, #13]
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	f7ff fe85 	bl	8009c5c <__gnu_unwind_execute>
 8009f52:	b005      	add	sp, #20
 8009f54:	bd30      	pop	{r4, r5, pc}
 8009f56:	bf00      	nop

08009f58 <_Unwind_GetRegionStart>:
 8009f58:	b508      	push	{r3, lr}
 8009f5a:	f7ff fe7d 	bl	8009c58 <unwind_UCB_from_context>
 8009f5e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009f60:	bd08      	pop	{r3, pc}
 8009f62:	bf00      	nop

08009f64 <_Unwind_GetLanguageSpecificData>:
 8009f64:	b508      	push	{r3, lr}
 8009f66:	f7ff fe77 	bl	8009c58 <unwind_UCB_from_context>
 8009f6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009f6c:	79c3      	ldrb	r3, [r0, #7]
 8009f6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f72:	3008      	adds	r0, #8
 8009f74:	bd08      	pop	{r3, pc}
 8009f76:	bf00      	nop

08009f78 <_Unwind_GetTextRelBase>:
 8009f78:	b508      	push	{r3, lr}
 8009f7a:	f7fa fca1 	bl	80048c0 <abort>
 8009f7e:	bf00      	nop

08009f80 <_Unwind_GetDataRelBase>:
 8009f80:	b508      	push	{r3, lr}
 8009f82:	f7ff fff9 	bl	8009f78 <_Unwind_GetTextRelBase>
 8009f86:	bf00      	nop

08009f88 <__errno>:
 8009f88:	4b01      	ldr	r3, [pc, #4]	; (8009f90 <__errno+0x8>)
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20000038 	.word	0x20000038

08009f94 <__libc_init_array>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	4e0f      	ldr	r6, [pc, #60]	; (8009fd4 <__libc_init_array+0x40>)
 8009f98:	4d0f      	ldr	r5, [pc, #60]	; (8009fd8 <__libc_init_array+0x44>)
 8009f9a:	1b76      	subs	r6, r6, r5
 8009f9c:	10b6      	asrs	r6, r6, #2
 8009f9e:	bf18      	it	ne
 8009fa0:	2400      	movne	r4, #0
 8009fa2:	d005      	beq.n	8009fb0 <__libc_init_array+0x1c>
 8009fa4:	3401      	adds	r4, #1
 8009fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009faa:	4798      	blx	r3
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	d1f9      	bne.n	8009fa4 <__libc_init_array+0x10>
 8009fb0:	4e0a      	ldr	r6, [pc, #40]	; (8009fdc <__libc_init_array+0x48>)
 8009fb2:	4d0b      	ldr	r5, [pc, #44]	; (8009fe0 <__libc_init_array+0x4c>)
 8009fb4:	f7fa fc85 	bl	80048c2 <_init>
 8009fb8:	1b76      	subs	r6, r6, r5
 8009fba:	10b6      	asrs	r6, r6, #2
 8009fbc:	bf18      	it	ne
 8009fbe:	2400      	movne	r4, #0
 8009fc0:	d006      	beq.n	8009fd0 <__libc_init_array+0x3c>
 8009fc2:	3401      	adds	r4, #1
 8009fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc8:	4798      	blx	r3
 8009fca:	42a6      	cmp	r6, r4
 8009fcc:	d1f9      	bne.n	8009fc2 <__libc_init_array+0x2e>
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000878 	.word	0x20000878
 8009fd8:	20000878 	.word	0x20000878
 8009fdc:	20000880 	.word	0x20000880
 8009fe0:	20000878 	.word	0x20000878

08009fe4 <malloc>:
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <malloc+0xc>)
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f000 b80b 	b.w	800a004 <_malloc_r>
 8009fee:	bf00      	nop
 8009ff0:	20000038 	.word	0x20000038

08009ff4 <free>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	; (800a000 <free+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f000 be99 	b.w	800ad30 <_free_r>
 8009ffe:	bf00      	nop
 800a000:	20000038 	.word	0x20000038

0800a004 <_malloc_r>:
 800a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	f101 060b 	add.w	r6, r1, #11
 800a00c:	2e16      	cmp	r6, #22
 800a00e:	b083      	sub	sp, #12
 800a010:	4605      	mov	r5, r0
 800a012:	f240 809e 	bls.w	800a152 <_malloc_r+0x14e>
 800a016:	f036 0607 	bics.w	r6, r6, #7
 800a01a:	f100 80bd 	bmi.w	800a198 <_malloc_r+0x194>
 800a01e:	42b1      	cmp	r1, r6
 800a020:	f200 80ba 	bhi.w	800a198 <_malloc_r+0x194>
 800a024:	f000 fb54 	bl	800a6d0 <__malloc_lock>
 800a028:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 800a02c:	f0c0 8285 	bcc.w	800a53a <_malloc_r+0x536>
 800a030:	0a73      	lsrs	r3, r6, #9
 800a032:	f000 80b8 	beq.w	800a1a6 <_malloc_r+0x1a2>
 800a036:	2b04      	cmp	r3, #4
 800a038:	f200 816c 	bhi.w	800a314 <_malloc_r+0x310>
 800a03c:	09b3      	lsrs	r3, r6, #6
 800a03e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800a042:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 800a046:	00c1      	lsls	r1, r0, #3
 800a048:	4fb8      	ldr	r7, [pc, #736]	; (800a32c <_malloc_r+0x328>)
 800a04a:	4439      	add	r1, r7
 800a04c:	684c      	ldr	r4, [r1, #4]
 800a04e:	3908      	subs	r1, #8
 800a050:	42a1      	cmp	r1, r4
 800a052:	d106      	bne.n	800a062 <_malloc_r+0x5e>
 800a054:	e00c      	b.n	800a070 <_malloc_r+0x6c>
 800a056:	2a00      	cmp	r2, #0
 800a058:	f280 80ab 	bge.w	800a1b2 <_malloc_r+0x1ae>
 800a05c:	68e4      	ldr	r4, [r4, #12]
 800a05e:	42a1      	cmp	r1, r4
 800a060:	d006      	beq.n	800a070 <_malloc_r+0x6c>
 800a062:	6863      	ldr	r3, [r4, #4]
 800a064:	f023 0303 	bic.w	r3, r3, #3
 800a068:	1b9a      	subs	r2, r3, r6
 800a06a:	2a0f      	cmp	r2, #15
 800a06c:	ddf3      	ble.n	800a056 <_malloc_r+0x52>
 800a06e:	4670      	mov	r0, lr
 800a070:	693c      	ldr	r4, [r7, #16]
 800a072:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 800a340 <_malloc_r+0x33c>
 800a076:	4574      	cmp	r4, lr
 800a078:	f000 819e 	beq.w	800a3b8 <_malloc_r+0x3b4>
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	1b9a      	subs	r2, r3, r6
 800a084:	2a0f      	cmp	r2, #15
 800a086:	f300 8183 	bgt.w	800a390 <_malloc_r+0x38c>
 800a08a:	2a00      	cmp	r2, #0
 800a08c:	f8c7 e014 	str.w	lr, [r7, #20]
 800a090:	f8c7 e010 	str.w	lr, [r7, #16]
 800a094:	f280 8091 	bge.w	800a1ba <_malloc_r+0x1b6>
 800a098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a09c:	f080 8154 	bcs.w	800a348 <_malloc_r+0x344>
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	08db      	lsrs	r3, r3, #3
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
 800a0b0:	fa02 f20c 	lsl.w	r2, r2, ip
 800a0b4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	f1ac 0108 	sub.w	r1, ip, #8
 800a0be:	60e1      	str	r1, [r4, #12]
 800a0c0:	f8c4 8008 	str.w	r8, [r4, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
 800a0c6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
 800a0ca:	f8c8 400c 	str.w	r4, [r8, #12]
 800a0ce:	2401      	movs	r4, #1
 800a0d0:	1083      	asrs	r3, r0, #2
 800a0d2:	409c      	lsls	r4, r3
 800a0d4:	4294      	cmp	r4, r2
 800a0d6:	d87d      	bhi.n	800a1d4 <_malloc_r+0x1d0>
 800a0d8:	4214      	tst	r4, r2
 800a0da:	d106      	bne.n	800a0ea <_malloc_r+0xe6>
 800a0dc:	f020 0003 	bic.w	r0, r0, #3
 800a0e0:	0064      	lsls	r4, r4, #1
 800a0e2:	4214      	tst	r4, r2
 800a0e4:	f100 0004 	add.w	r0, r0, #4
 800a0e8:	d0fa      	beq.n	800a0e0 <_malloc_r+0xdc>
 800a0ea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800a0ee:	46cc      	mov	ip, r9
 800a0f0:	4680      	mov	r8, r0
 800a0f2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a0f6:	459c      	cmp	ip, r3
 800a0f8:	d107      	bne.n	800a10a <_malloc_r+0x106>
 800a0fa:	e15f      	b.n	800a3bc <_malloc_r+0x3b8>
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	f280 816d 	bge.w	800a3dc <_malloc_r+0x3d8>
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	459c      	cmp	ip, r3
 800a106:	f000 8159 	beq.w	800a3bc <_malloc_r+0x3b8>
 800a10a:	6859      	ldr	r1, [r3, #4]
 800a10c:	f021 0103 	bic.w	r1, r1, #3
 800a110:	1b8a      	subs	r2, r1, r6
 800a112:	2a0f      	cmp	r2, #15
 800a114:	ddf2      	ble.n	800a0fc <_malloc_r+0xf8>
 800a116:	68dc      	ldr	r4, [r3, #12]
 800a118:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800a11c:	f046 0801 	orr.w	r8, r6, #1
 800a120:	4628      	mov	r0, r5
 800a122:	441e      	add	r6, r3
 800a124:	f042 0501 	orr.w	r5, r2, #1
 800a128:	f8c3 8004 	str.w	r8, [r3, #4]
 800a12c:	f8cc 400c 	str.w	r4, [ip, #12]
 800a130:	f8c4 c008 	str.w	ip, [r4, #8]
 800a134:	617e      	str	r6, [r7, #20]
 800a136:	613e      	str	r6, [r7, #16]
 800a138:	f8c6 e00c 	str.w	lr, [r6, #12]
 800a13c:	f8c6 e008 	str.w	lr, [r6, #8]
 800a140:	6075      	str	r5, [r6, #4]
 800a142:	505a      	str	r2, [r3, r1]
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	f000 fac5 	bl	800a6d4 <__malloc_unlock>
 800a14a:	9b00      	ldr	r3, [sp, #0]
 800a14c:	f103 0408 	add.w	r4, r3, #8
 800a150:	e01e      	b.n	800a190 <_malloc_r+0x18c>
 800a152:	2910      	cmp	r1, #16
 800a154:	d820      	bhi.n	800a198 <_malloc_r+0x194>
 800a156:	f000 fabb 	bl	800a6d0 <__malloc_lock>
 800a15a:	2610      	movs	r6, #16
 800a15c:	2318      	movs	r3, #24
 800a15e:	2002      	movs	r0, #2
 800a160:	4f72      	ldr	r7, [pc, #456]	; (800a32c <_malloc_r+0x328>)
 800a162:	443b      	add	r3, r7
 800a164:	685c      	ldr	r4, [r3, #4]
 800a166:	f1a3 0208 	sub.w	r2, r3, #8
 800a16a:	4294      	cmp	r4, r2
 800a16c:	f000 812f 	beq.w	800a3ce <_malloc_r+0x3ca>
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	68e1      	ldr	r1, [r4, #12]
 800a174:	f023 0303 	bic.w	r3, r3, #3
 800a178:	4423      	add	r3, r4
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	68a6      	ldr	r6, [r4, #8]
 800a17e:	f042 0201 	orr.w	r2, r2, #1
 800a182:	60f1      	str	r1, [r6, #12]
 800a184:	4628      	mov	r0, r5
 800a186:	608e      	str	r6, [r1, #8]
 800a188:	605a      	str	r2, [r3, #4]
 800a18a:	f000 faa3 	bl	800a6d4 <__malloc_unlock>
 800a18e:	3408      	adds	r4, #8
 800a190:	4620      	mov	r0, r4
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	2400      	movs	r4, #0
 800a19a:	230c      	movs	r3, #12
 800a19c:	4620      	mov	r0, r4
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	b003      	add	sp, #12
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a6:	2040      	movs	r0, #64	; 0x40
 800a1a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1ac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800a1b0:	e74a      	b.n	800a048 <_malloc_r+0x44>
 800a1b2:	4423      	add	r3, r4
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	68e1      	ldr	r1, [r4, #12]
 800a1b8:	e7e0      	b.n	800a17c <_malloc_r+0x178>
 800a1ba:	4423      	add	r3, r4
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f042 0201 	orr.w	r2, r2, #1
 800a1c4:	605a      	str	r2, [r3, #4]
 800a1c6:	3408      	adds	r4, #8
 800a1c8:	f000 fa84 	bl	800a6d4 <__malloc_unlock>
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	b003      	add	sp, #12
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d4:	68bc      	ldr	r4, [r7, #8]
 800a1d6:	6863      	ldr	r3, [r4, #4]
 800a1d8:	f023 0803 	bic.w	r8, r3, #3
 800a1dc:	45b0      	cmp	r8, r6
 800a1de:	d304      	bcc.n	800a1ea <_malloc_r+0x1e6>
 800a1e0:	eba8 0306 	sub.w	r3, r8, r6
 800a1e4:	2b0f      	cmp	r3, #15
 800a1e6:	f300 8085 	bgt.w	800a2f4 <_malloc_r+0x2f0>
 800a1ea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800a344 <_malloc_r+0x340>
 800a1ee:	4b50      	ldr	r3, [pc, #320]	; (800a330 <_malloc_r+0x32c>)
 800a1f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	4433      	add	r3, r6
 800a1fa:	eb04 0a08 	add.w	sl, r4, r8
 800a1fe:	f000 8154 	beq.w	800a4aa <_malloc_r+0x4a6>
 800a202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a206:	330f      	adds	r3, #15
 800a208:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800a20c:	f02b 0b0f 	bic.w	fp, fp, #15
 800a210:	4659      	mov	r1, fp
 800a212:	4628      	mov	r0, r5
 800a214:	f000 fc1e 	bl	800aa54 <_sbrk_r>
 800a218:	1c41      	adds	r1, r0, #1
 800a21a:	4602      	mov	r2, r0
 800a21c:	f000 80fb 	beq.w	800a416 <_malloc_r+0x412>
 800a220:	4582      	cmp	sl, r0
 800a222:	f200 80f6 	bhi.w	800a412 <_malloc_r+0x40e>
 800a226:	4b43      	ldr	r3, [pc, #268]	; (800a334 <_malloc_r+0x330>)
 800a228:	6819      	ldr	r1, [r3, #0]
 800a22a:	4459      	add	r1, fp
 800a22c:	6019      	str	r1, [r3, #0]
 800a22e:	f000 814c 	beq.w	800a4ca <_malloc_r+0x4c6>
 800a232:	f8d9 0000 	ldr.w	r0, [r9]
 800a236:	3001      	adds	r0, #1
 800a238:	bf1b      	ittet	ne
 800a23a:	eba2 0a0a 	subne.w	sl, r2, sl
 800a23e:	4451      	addne	r1, sl
 800a240:	f8c9 2000 	streq.w	r2, [r9]
 800a244:	6019      	strne	r1, [r3, #0]
 800a246:	f012 0107 	ands.w	r1, r2, #7
 800a24a:	f000 8114 	beq.w	800a476 <_malloc_r+0x472>
 800a24e:	f1c1 0008 	rsb	r0, r1, #8
 800a252:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800a256:	4402      	add	r2, r0
 800a258:	3108      	adds	r1, #8
 800a25a:	eb02 090b 	add.w	r9, r2, fp
 800a25e:	f3c9 090b 	ubfx	r9, r9, #0, #12
 800a262:	eba1 0909 	sub.w	r9, r1, r9
 800a266:	4649      	mov	r1, r9
 800a268:	4628      	mov	r0, r5
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	9200      	str	r2, [sp, #0]
 800a26e:	f000 fbf1 	bl	800aa54 <_sbrk_r>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800a278:	f000 8142 	beq.w	800a500 <_malloc_r+0x4fc>
 800a27c:	1a80      	subs	r0, r0, r2
 800a27e:	4448      	add	r0, r9
 800a280:	f040 0001 	orr.w	r0, r0, #1
 800a284:	6819      	ldr	r1, [r3, #0]
 800a286:	42bc      	cmp	r4, r7
 800a288:	4449      	add	r1, r9
 800a28a:	60ba      	str	r2, [r7, #8]
 800a28c:	6019      	str	r1, [r3, #0]
 800a28e:	6050      	str	r0, [r2, #4]
 800a290:	d017      	beq.n	800a2c2 <_malloc_r+0x2be>
 800a292:	f1b8 0f0f 	cmp.w	r8, #15
 800a296:	f240 80fa 	bls.w	800a48e <_malloc_r+0x48a>
 800a29a:	f04f 0c05 	mov.w	ip, #5
 800a29e:	6862      	ldr	r2, [r4, #4]
 800a2a0:	f1a8 000c 	sub.w	r0, r8, #12
 800a2a4:	f020 0007 	bic.w	r0, r0, #7
 800a2a8:	f002 0201 	and.w	r2, r2, #1
 800a2ac:	eb04 0e00 	add.w	lr, r4, r0
 800a2b0:	4302      	orrs	r2, r0
 800a2b2:	280f      	cmp	r0, #15
 800a2b4:	6062      	str	r2, [r4, #4]
 800a2b6:	f8ce c004 	str.w	ip, [lr, #4]
 800a2ba:	f8ce c008 	str.w	ip, [lr, #8]
 800a2be:	f200 8116 	bhi.w	800a4ee <_malloc_r+0x4ea>
 800a2c2:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <_malloc_r+0x334>)
 800a2c4:	68bc      	ldr	r4, [r7, #8]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	4291      	cmp	r1, r2
 800a2ca:	bf88      	it	hi
 800a2cc:	6019      	strhi	r1, [r3, #0]
 800a2ce:	4b1b      	ldr	r3, [pc, #108]	; (800a33c <_malloc_r+0x338>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	6862      	ldr	r2, [r4, #4]
 800a2d6:	bf88      	it	hi
 800a2d8:	6019      	strhi	r1, [r3, #0]
 800a2da:	f022 0203 	bic.w	r2, r2, #3
 800a2de:	4296      	cmp	r6, r2
 800a2e0:	eba2 0306 	sub.w	r3, r2, r6
 800a2e4:	d801      	bhi.n	800a2ea <_malloc_r+0x2e6>
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	dc04      	bgt.n	800a2f4 <_malloc_r+0x2f0>
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 f9f2 	bl	800a6d4 <__malloc_unlock>
 800a2f0:	2400      	movs	r4, #0
 800a2f2:	e74d      	b.n	800a190 <_malloc_r+0x18c>
 800a2f4:	f046 0201 	orr.w	r2, r6, #1
 800a2f8:	f043 0301 	orr.w	r3, r3, #1
 800a2fc:	4426      	add	r6, r4
 800a2fe:	6062      	str	r2, [r4, #4]
 800a300:	4628      	mov	r0, r5
 800a302:	60be      	str	r6, [r7, #8]
 800a304:	3408      	adds	r4, #8
 800a306:	6073      	str	r3, [r6, #4]
 800a308:	f000 f9e4 	bl	800a6d4 <__malloc_unlock>
 800a30c:	4620      	mov	r0, r4
 800a30e:	b003      	add	sp, #12
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a314:	2b14      	cmp	r3, #20
 800a316:	d970      	bls.n	800a3fa <_malloc_r+0x3f6>
 800a318:	2b54      	cmp	r3, #84	; 0x54
 800a31a:	f200 80a2 	bhi.w	800a462 <_malloc_r+0x45e>
 800a31e:	0b33      	lsrs	r3, r6, #12
 800a320:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800a324:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 800a328:	00c1      	lsls	r1, r0, #3
 800a32a:	e68d      	b.n	800a048 <_malloc_r+0x44>
 800a32c:	20000468 	.word	0x20000468
 800a330:	20001b3c 	.word	0x20001b3c
 800a334:	20001b0c 	.word	0x20001b0c
 800a338:	20001b34 	.word	0x20001b34
 800a33c:	20001b38 	.word	0x20001b38
 800a340:	20000470 	.word	0x20000470
 800a344:	20000870 	.word	0x20000870
 800a348:	0a5a      	lsrs	r2, r3, #9
 800a34a:	2a04      	cmp	r2, #4
 800a34c:	d95b      	bls.n	800a406 <_malloc_r+0x402>
 800a34e:	2a14      	cmp	r2, #20
 800a350:	f200 80ae 	bhi.w	800a4b0 <_malloc_r+0x4ac>
 800a354:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800a358:	00c9      	lsls	r1, r1, #3
 800a35a:	325b      	adds	r2, #91	; 0x5b
 800a35c:	eb07 0c01 	add.w	ip, r7, r1
 800a360:	5879      	ldr	r1, [r7, r1]
 800a362:	f1ac 0c08 	sub.w	ip, ip, #8
 800a366:	458c      	cmp	ip, r1
 800a368:	f000 8088 	beq.w	800a47c <_malloc_r+0x478>
 800a36c:	684a      	ldr	r2, [r1, #4]
 800a36e:	f022 0203 	bic.w	r2, r2, #3
 800a372:	4293      	cmp	r3, r2
 800a374:	d273      	bcs.n	800a45e <_malloc_r+0x45a>
 800a376:	6889      	ldr	r1, [r1, #8]
 800a378:	458c      	cmp	ip, r1
 800a37a:	d1f7      	bne.n	800a36c <_malloc_r+0x368>
 800a37c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	60e3      	str	r3, [r4, #12]
 800a384:	f8c4 c008 	str.w	ip, [r4, #8]
 800a388:	609c      	str	r4, [r3, #8]
 800a38a:	f8cc 400c 	str.w	r4, [ip, #12]
 800a38e:	e69e      	b.n	800a0ce <_malloc_r+0xca>
 800a390:	f046 0c01 	orr.w	ip, r6, #1
 800a394:	f042 0101 	orr.w	r1, r2, #1
 800a398:	4426      	add	r6, r4
 800a39a:	f8c4 c004 	str.w	ip, [r4, #4]
 800a39e:	4628      	mov	r0, r5
 800a3a0:	617e      	str	r6, [r7, #20]
 800a3a2:	613e      	str	r6, [r7, #16]
 800a3a4:	f8c6 e00c 	str.w	lr, [r6, #12]
 800a3a8:	f8c6 e008 	str.w	lr, [r6, #8]
 800a3ac:	6071      	str	r1, [r6, #4]
 800a3ae:	50e2      	str	r2, [r4, r3]
 800a3b0:	f000 f990 	bl	800a6d4 <__malloc_unlock>
 800a3b4:	3408      	adds	r4, #8
 800a3b6:	e6eb      	b.n	800a190 <_malloc_r+0x18c>
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	e688      	b.n	800a0ce <_malloc_r+0xca>
 800a3bc:	f108 0801 	add.w	r8, r8, #1
 800a3c0:	f018 0f03 	tst.w	r8, #3
 800a3c4:	f10c 0c08 	add.w	ip, ip, #8
 800a3c8:	f47f ae93 	bne.w	800a0f2 <_malloc_r+0xee>
 800a3cc:	e02d      	b.n	800a42a <_malloc_r+0x426>
 800a3ce:	68dc      	ldr	r4, [r3, #12]
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	bf08      	it	eq
 800a3d4:	3002      	addeq	r0, #2
 800a3d6:	f43f ae4b 	beq.w	800a070 <_malloc_r+0x6c>
 800a3da:	e6c9      	b.n	800a170 <_malloc_r+0x16c>
 800a3dc:	461c      	mov	r4, r3
 800a3de:	4419      	add	r1, r3
 800a3e0:	684a      	ldr	r2, [r1, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f854 6f08 	ldr.w	r6, [r4, #8]!
 800a3e8:	f042 0201 	orr.w	r2, r2, #1
 800a3ec:	604a      	str	r2, [r1, #4]
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	60f3      	str	r3, [r6, #12]
 800a3f2:	609e      	str	r6, [r3, #8]
 800a3f4:	f000 f96e 	bl	800a6d4 <__malloc_unlock>
 800a3f8:	e6ca      	b.n	800a190 <_malloc_r+0x18c>
 800a3fa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a3fe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 800a402:	00c1      	lsls	r1, r0, #3
 800a404:	e620      	b.n	800a048 <_malloc_r+0x44>
 800a406:	099a      	lsrs	r2, r3, #6
 800a408:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800a40c:	00c9      	lsls	r1, r1, #3
 800a40e:	3238      	adds	r2, #56	; 0x38
 800a410:	e7a4      	b.n	800a35c <_malloc_r+0x358>
 800a412:	42bc      	cmp	r4, r7
 800a414:	d054      	beq.n	800a4c0 <_malloc_r+0x4bc>
 800a416:	68bc      	ldr	r4, [r7, #8]
 800a418:	6862      	ldr	r2, [r4, #4]
 800a41a:	f022 0203 	bic.w	r2, r2, #3
 800a41e:	e75e      	b.n	800a2de <_malloc_r+0x2da>
 800a420:	f859 3908 	ldr.w	r3, [r9], #-8
 800a424:	4599      	cmp	r9, r3
 800a426:	f040 8086 	bne.w	800a536 <_malloc_r+0x532>
 800a42a:	f010 0f03 	tst.w	r0, #3
 800a42e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a432:	d1f5      	bne.n	800a420 <_malloc_r+0x41c>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	ea23 0304 	bic.w	r3, r3, r4
 800a43a:	607b      	str	r3, [r7, #4]
 800a43c:	0064      	lsls	r4, r4, #1
 800a43e:	429c      	cmp	r4, r3
 800a440:	f63f aec8 	bhi.w	800a1d4 <_malloc_r+0x1d0>
 800a444:	2c00      	cmp	r4, #0
 800a446:	f43f aec5 	beq.w	800a1d4 <_malloc_r+0x1d0>
 800a44a:	421c      	tst	r4, r3
 800a44c:	4640      	mov	r0, r8
 800a44e:	f47f ae4c 	bne.w	800a0ea <_malloc_r+0xe6>
 800a452:	0064      	lsls	r4, r4, #1
 800a454:	421c      	tst	r4, r3
 800a456:	f100 0004 	add.w	r0, r0, #4
 800a45a:	d0fa      	beq.n	800a452 <_malloc_r+0x44e>
 800a45c:	e645      	b.n	800a0ea <_malloc_r+0xe6>
 800a45e:	468c      	mov	ip, r1
 800a460:	e78c      	b.n	800a37c <_malloc_r+0x378>
 800a462:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a466:	d815      	bhi.n	800a494 <_malloc_r+0x490>
 800a468:	0bf3      	lsrs	r3, r6, #15
 800a46a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a46e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 800a472:	00c1      	lsls	r1, r0, #3
 800a474:	e5e8      	b.n	800a048 <_malloc_r+0x44>
 800a476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a47a:	e6ee      	b.n	800a25a <_malloc_r+0x256>
 800a47c:	2101      	movs	r1, #1
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	1092      	asrs	r2, r2, #2
 800a482:	fa01 f202 	lsl.w	r2, r1, r2
 800a486:	431a      	orrs	r2, r3
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	4663      	mov	r3, ip
 800a48c:	e779      	b.n	800a382 <_malloc_r+0x37e>
 800a48e:	2301      	movs	r3, #1
 800a490:	6053      	str	r3, [r2, #4]
 800a492:	e72a      	b.n	800a2ea <_malloc_r+0x2e6>
 800a494:	f240 5254 	movw	r2, #1364	; 0x554
 800a498:	4293      	cmp	r3, r2
 800a49a:	d822      	bhi.n	800a4e2 <_malloc_r+0x4de>
 800a49c:	0cb3      	lsrs	r3, r6, #18
 800a49e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800a4a2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 800a4a6:	00c1      	lsls	r1, r0, #3
 800a4a8:	e5ce      	b.n	800a048 <_malloc_r+0x44>
 800a4aa:	f103 0b10 	add.w	fp, r3, #16
 800a4ae:	e6af      	b.n	800a210 <_malloc_r+0x20c>
 800a4b0:	2a54      	cmp	r2, #84	; 0x54
 800a4b2:	d829      	bhi.n	800a508 <_malloc_r+0x504>
 800a4b4:	0b1a      	lsrs	r2, r3, #12
 800a4b6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800a4ba:	00c9      	lsls	r1, r1, #3
 800a4bc:	326e      	adds	r2, #110	; 0x6e
 800a4be:	e74d      	b.n	800a35c <_malloc_r+0x358>
 800a4c0:	4b20      	ldr	r3, [pc, #128]	; (800a544 <_malloc_r+0x540>)
 800a4c2:	6819      	ldr	r1, [r3, #0]
 800a4c4:	4459      	add	r1, fp
 800a4c6:	6019      	str	r1, [r3, #0]
 800a4c8:	e6b3      	b.n	800a232 <_malloc_r+0x22e>
 800a4ca:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f47f aeaf 	bne.w	800a232 <_malloc_r+0x22e>
 800a4d4:	eb08 030b 	add.w	r3, r8, fp
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	f043 0301 	orr.w	r3, r3, #1
 800a4de:	6053      	str	r3, [r2, #4]
 800a4e0:	e6ef      	b.n	800a2c2 <_malloc_r+0x2be>
 800a4e2:	207f      	movs	r0, #127	; 0x7f
 800a4e4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a4e8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 800a4ec:	e5ac      	b.n	800a048 <_malloc_r+0x44>
 800a4ee:	f104 0108 	add.w	r1, r4, #8
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	f000 fc1b 	bl	800ad30 <_free_r>
 800a4fa:	9b00      	ldr	r3, [sp, #0]
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	e6e0      	b.n	800a2c2 <_malloc_r+0x2be>
 800a500:	2001      	movs	r0, #1
 800a502:	f04f 0900 	mov.w	r9, #0
 800a506:	e6bd      	b.n	800a284 <_malloc_r+0x280>
 800a508:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a50c:	d805      	bhi.n	800a51a <_malloc_r+0x516>
 800a50e:	0bda      	lsrs	r2, r3, #15
 800a510:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800a514:	00c9      	lsls	r1, r1, #3
 800a516:	3277      	adds	r2, #119	; 0x77
 800a518:	e720      	b.n	800a35c <_malloc_r+0x358>
 800a51a:	f240 5154 	movw	r1, #1364	; 0x554
 800a51e:	428a      	cmp	r2, r1
 800a520:	d805      	bhi.n	800a52e <_malloc_r+0x52a>
 800a522:	0c9a      	lsrs	r2, r3, #18
 800a524:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800a528:	00c9      	lsls	r1, r1, #3
 800a52a:	327c      	adds	r2, #124	; 0x7c
 800a52c:	e716      	b.n	800a35c <_malloc_r+0x358>
 800a52e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a532:	227e      	movs	r2, #126	; 0x7e
 800a534:	e712      	b.n	800a35c <_malloc_r+0x358>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	e780      	b.n	800a43c <_malloc_r+0x438>
 800a53a:	08f0      	lsrs	r0, r6, #3
 800a53c:	f106 0308 	add.w	r3, r6, #8
 800a540:	e60e      	b.n	800a160 <_malloc_r+0x15c>
 800a542:	bf00      	nop
 800a544:	20001b0c 	.word	0x20001b0c

0800a548 <memcpy>:
 800a548:	4684      	mov	ip, r0
 800a54a:	ea41 0300 	orr.w	r3, r1, r0
 800a54e:	f013 0303 	ands.w	r3, r3, #3
 800a552:	d149      	bne.n	800a5e8 <memcpy+0xa0>
 800a554:	3a40      	subs	r2, #64	; 0x40
 800a556:	d323      	bcc.n	800a5a0 <memcpy+0x58>
 800a558:	680b      	ldr	r3, [r1, #0]
 800a55a:	6003      	str	r3, [r0, #0]
 800a55c:	684b      	ldr	r3, [r1, #4]
 800a55e:	6043      	str	r3, [r0, #4]
 800a560:	688b      	ldr	r3, [r1, #8]
 800a562:	6083      	str	r3, [r0, #8]
 800a564:	68cb      	ldr	r3, [r1, #12]
 800a566:	60c3      	str	r3, [r0, #12]
 800a568:	690b      	ldr	r3, [r1, #16]
 800a56a:	6103      	str	r3, [r0, #16]
 800a56c:	694b      	ldr	r3, [r1, #20]
 800a56e:	6143      	str	r3, [r0, #20]
 800a570:	698b      	ldr	r3, [r1, #24]
 800a572:	6183      	str	r3, [r0, #24]
 800a574:	69cb      	ldr	r3, [r1, #28]
 800a576:	61c3      	str	r3, [r0, #28]
 800a578:	6a0b      	ldr	r3, [r1, #32]
 800a57a:	6203      	str	r3, [r0, #32]
 800a57c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a57e:	6243      	str	r3, [r0, #36]	; 0x24
 800a580:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a582:	6283      	str	r3, [r0, #40]	; 0x28
 800a584:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a586:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a588:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a58a:	6303      	str	r3, [r0, #48]	; 0x30
 800a58c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a58e:	6343      	str	r3, [r0, #52]	; 0x34
 800a590:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a592:	6383      	str	r3, [r0, #56]	; 0x38
 800a594:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a596:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a598:	3040      	adds	r0, #64	; 0x40
 800a59a:	3140      	adds	r1, #64	; 0x40
 800a59c:	3a40      	subs	r2, #64	; 0x40
 800a59e:	d2db      	bcs.n	800a558 <memcpy+0x10>
 800a5a0:	3230      	adds	r2, #48	; 0x30
 800a5a2:	d30b      	bcc.n	800a5bc <memcpy+0x74>
 800a5a4:	680b      	ldr	r3, [r1, #0]
 800a5a6:	6003      	str	r3, [r0, #0]
 800a5a8:	684b      	ldr	r3, [r1, #4]
 800a5aa:	6043      	str	r3, [r0, #4]
 800a5ac:	688b      	ldr	r3, [r1, #8]
 800a5ae:	6083      	str	r3, [r0, #8]
 800a5b0:	68cb      	ldr	r3, [r1, #12]
 800a5b2:	60c3      	str	r3, [r0, #12]
 800a5b4:	3010      	adds	r0, #16
 800a5b6:	3110      	adds	r1, #16
 800a5b8:	3a10      	subs	r2, #16
 800a5ba:	d2f3      	bcs.n	800a5a4 <memcpy+0x5c>
 800a5bc:	320c      	adds	r2, #12
 800a5be:	d305      	bcc.n	800a5cc <memcpy+0x84>
 800a5c0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a5c4:	f840 3b04 	str.w	r3, [r0], #4
 800a5c8:	3a04      	subs	r2, #4
 800a5ca:	d2f9      	bcs.n	800a5c0 <memcpy+0x78>
 800a5cc:	3204      	adds	r2, #4
 800a5ce:	d008      	beq.n	800a5e2 <memcpy+0x9a>
 800a5d0:	07d2      	lsls	r2, r2, #31
 800a5d2:	bf1c      	itt	ne
 800a5d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800a5d8:	f800 3b01 	strbne.w	r3, [r0], #1
 800a5dc:	d301      	bcc.n	800a5e2 <memcpy+0x9a>
 800a5de:	880b      	ldrh	r3, [r1, #0]
 800a5e0:	8003      	strh	r3, [r0, #0]
 800a5e2:	4660      	mov	r0, ip
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	2a08      	cmp	r2, #8
 800a5ea:	d313      	bcc.n	800a614 <memcpy+0xcc>
 800a5ec:	078b      	lsls	r3, r1, #30
 800a5ee:	d0b1      	beq.n	800a554 <memcpy+0xc>
 800a5f0:	f010 0303 	ands.w	r3, r0, #3
 800a5f4:	d0ae      	beq.n	800a554 <memcpy+0xc>
 800a5f6:	f1c3 0304 	rsb	r3, r3, #4
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	07db      	lsls	r3, r3, #31
 800a5fe:	bf1c      	itt	ne
 800a600:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800a604:	f800 3b01 	strbne.w	r3, [r0], #1
 800a608:	d3a4      	bcc.n	800a554 <memcpy+0xc>
 800a60a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800a60e:	f820 3b02 	strh.w	r3, [r0], #2
 800a612:	e79f      	b.n	800a554 <memcpy+0xc>
 800a614:	3a04      	subs	r2, #4
 800a616:	d3d9      	bcc.n	800a5cc <memcpy+0x84>
 800a618:	3a01      	subs	r2, #1
 800a61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a61e:	f800 3b01 	strb.w	r3, [r0], #1
 800a622:	d2f9      	bcs.n	800a618 <memcpy+0xd0>
 800a624:	780b      	ldrb	r3, [r1, #0]
 800a626:	7003      	strb	r3, [r0, #0]
 800a628:	784b      	ldrb	r3, [r1, #1]
 800a62a:	7043      	strb	r3, [r0, #1]
 800a62c:	788b      	ldrb	r3, [r1, #2]
 800a62e:	7083      	strb	r3, [r0, #2]
 800a630:	4660      	mov	r0, ip
 800a632:	4770      	bx	lr

0800a634 <memset>:
 800a634:	b470      	push	{r4, r5, r6}
 800a636:	0786      	lsls	r6, r0, #30
 800a638:	d046      	beq.n	800a6c8 <memset+0x94>
 800a63a:	1e54      	subs	r4, r2, #1
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d041      	beq.n	800a6c4 <memset+0x90>
 800a640:	b2ca      	uxtb	r2, r1
 800a642:	4603      	mov	r3, r0
 800a644:	e002      	b.n	800a64c <memset+0x18>
 800a646:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800a64a:	d33b      	bcc.n	800a6c4 <memset+0x90>
 800a64c:	f803 2b01 	strb.w	r2, [r3], #1
 800a650:	079d      	lsls	r5, r3, #30
 800a652:	d1f8      	bne.n	800a646 <memset+0x12>
 800a654:	2c03      	cmp	r4, #3
 800a656:	d92e      	bls.n	800a6b6 <memset+0x82>
 800a658:	b2cd      	uxtb	r5, r1
 800a65a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800a65e:	2c0f      	cmp	r4, #15
 800a660:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800a664:	d919      	bls.n	800a69a <memset+0x66>
 800a666:	4626      	mov	r6, r4
 800a668:	f103 0210 	add.w	r2, r3, #16
 800a66c:	3e10      	subs	r6, #16
 800a66e:	2e0f      	cmp	r6, #15
 800a670:	f842 5c10 	str.w	r5, [r2, #-16]
 800a674:	f842 5c0c 	str.w	r5, [r2, #-12]
 800a678:	f842 5c08 	str.w	r5, [r2, #-8]
 800a67c:	f842 5c04 	str.w	r5, [r2, #-4]
 800a680:	f102 0210 	add.w	r2, r2, #16
 800a684:	d8f2      	bhi.n	800a66c <memset+0x38>
 800a686:	f1a4 0210 	sub.w	r2, r4, #16
 800a68a:	f022 020f 	bic.w	r2, r2, #15
 800a68e:	f004 040f 	and.w	r4, r4, #15
 800a692:	3210      	adds	r2, #16
 800a694:	2c03      	cmp	r4, #3
 800a696:	4413      	add	r3, r2
 800a698:	d90d      	bls.n	800a6b6 <memset+0x82>
 800a69a:	461e      	mov	r6, r3
 800a69c:	4622      	mov	r2, r4
 800a69e:	3a04      	subs	r2, #4
 800a6a0:	2a03      	cmp	r2, #3
 800a6a2:	f846 5b04 	str.w	r5, [r6], #4
 800a6a6:	d8fa      	bhi.n	800a69e <memset+0x6a>
 800a6a8:	1f22      	subs	r2, r4, #4
 800a6aa:	f022 0203 	bic.w	r2, r2, #3
 800a6ae:	3204      	adds	r2, #4
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f004 0403 	and.w	r4, r4, #3
 800a6b6:	b12c      	cbz	r4, 800a6c4 <memset+0x90>
 800a6b8:	b2c9      	uxtb	r1, r1
 800a6ba:	441c      	add	r4, r3
 800a6bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	d1fb      	bne.n	800a6bc <memset+0x88>
 800a6c4:	bc70      	pop	{r4, r5, r6}
 800a6c6:	4770      	bx	lr
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	e7c2      	b.n	800a654 <memset+0x20>
 800a6ce:	bf00      	nop

0800a6d0 <__malloc_lock>:
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop

0800a6d4 <__malloc_unlock>:
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop

0800a6d8 <realloc>:
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <realloc+0xc>)
 800a6da:	460a      	mov	r2, r1
 800a6dc:	4601      	mov	r1, r0
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	f000 b802 	b.w	800a6e8 <_realloc_r>
 800a6e4:	20000038 	.word	0x20000038

0800a6e8 <_realloc_r>:
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	f000 8094 	beq.w	800a816 <_realloc_r+0x12e>
 800a6ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	f105 060b 	add.w	r6, r5, #11
 800a6fe:	f7ff ffe7 	bl	800a6d0 <__malloc_lock>
 800a702:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800a706:	2e16      	cmp	r6, #22
 800a708:	f02e 0703 	bic.w	r7, lr, #3
 800a70c:	f1a4 0908 	sub.w	r9, r4, #8
 800a710:	d83c      	bhi.n	800a78c <_realloc_r+0xa4>
 800a712:	2210      	movs	r2, #16
 800a714:	4616      	mov	r6, r2
 800a716:	42b5      	cmp	r5, r6
 800a718:	d83d      	bhi.n	800a796 <_realloc_r+0xae>
 800a71a:	4297      	cmp	r7, r2
 800a71c:	da43      	bge.n	800a7a6 <_realloc_r+0xbe>
 800a71e:	4bc6      	ldr	r3, [pc, #792]	; (800aa38 <_realloc_r+0x350>)
 800a720:	eb09 0007 	add.w	r0, r9, r7
 800a724:	6899      	ldr	r1, [r3, #8]
 800a726:	4288      	cmp	r0, r1
 800a728:	f000 80c3 	beq.w	800a8b2 <_realloc_r+0x1ca>
 800a72c:	6843      	ldr	r3, [r0, #4]
 800a72e:	f023 0101 	bic.w	r1, r3, #1
 800a732:	4401      	add	r1, r0
 800a734:	6849      	ldr	r1, [r1, #4]
 800a736:	07c9      	lsls	r1, r1, #31
 800a738:	d54d      	bpl.n	800a7d6 <_realloc_r+0xee>
 800a73a:	f01e 0f01 	tst.w	lr, #1
 800a73e:	f000 809b 	beq.w	800a878 <_realloc_r+0x190>
 800a742:	4629      	mov	r1, r5
 800a744:	4640      	mov	r0, r8
 800a746:	f7ff fc5d 	bl	800a004 <_malloc_r>
 800a74a:	4605      	mov	r5, r0
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d03b      	beq.n	800a7c8 <_realloc_r+0xe0>
 800a750:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a754:	f1a0 0208 	sub.w	r2, r0, #8
 800a758:	f023 0301 	bic.w	r3, r3, #1
 800a75c:	444b      	add	r3, r9
 800a75e:	429a      	cmp	r2, r3
 800a760:	f000 812b 	beq.w	800a9ba <_realloc_r+0x2d2>
 800a764:	1f3a      	subs	r2, r7, #4
 800a766:	2a24      	cmp	r2, #36	; 0x24
 800a768:	f200 8118 	bhi.w	800a99c <_realloc_r+0x2b4>
 800a76c:	2a13      	cmp	r2, #19
 800a76e:	f200 80eb 	bhi.w	800a948 <_realloc_r+0x260>
 800a772:	4603      	mov	r3, r0
 800a774:	4622      	mov	r2, r4
 800a776:	6811      	ldr	r1, [r2, #0]
 800a778:	6019      	str	r1, [r3, #0]
 800a77a:	6851      	ldr	r1, [r2, #4]
 800a77c:	6059      	str	r1, [r3, #4]
 800a77e:	6892      	ldr	r2, [r2, #8]
 800a780:	609a      	str	r2, [r3, #8]
 800a782:	4621      	mov	r1, r4
 800a784:	4640      	mov	r0, r8
 800a786:	f000 fad3 	bl	800ad30 <_free_r>
 800a78a:	e01d      	b.n	800a7c8 <_realloc_r+0xe0>
 800a78c:	f026 0607 	bic.w	r6, r6, #7
 800a790:	2e00      	cmp	r6, #0
 800a792:	4632      	mov	r2, r6
 800a794:	dabf      	bge.n	800a716 <_realloc_r+0x2e>
 800a796:	2500      	movs	r5, #0
 800a798:	230c      	movs	r3, #12
 800a79a:	4628      	mov	r0, r5
 800a79c:	f8c8 3000 	str.w	r3, [r8]
 800a7a0:	b003      	add	sp, #12
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	4625      	mov	r5, r4
 800a7a8:	1bbb      	subs	r3, r7, r6
 800a7aa:	2b0f      	cmp	r3, #15
 800a7ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a7b0:	d81d      	bhi.n	800a7ee <_realloc_r+0x106>
 800a7b2:	f002 0201 	and.w	r2, r2, #1
 800a7b6:	433a      	orrs	r2, r7
 800a7b8:	eb09 0107 	add.w	r1, r9, r7
 800a7bc:	f8c9 2004 	str.w	r2, [r9, #4]
 800a7c0:	684b      	ldr	r3, [r1, #4]
 800a7c2:	f043 0301 	orr.w	r3, r3, #1
 800a7c6:	604b      	str	r3, [r1, #4]
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	f7ff ff83 	bl	800a6d4 <__malloc_unlock>
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	b003      	add	sp, #12
 800a7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	18f9      	adds	r1, r7, r3
 800a7dc:	4291      	cmp	r1, r2
 800a7de:	db1d      	blt.n	800a81c <_realloc_r+0x134>
 800a7e0:	68c3      	ldr	r3, [r0, #12]
 800a7e2:	6882      	ldr	r2, [r0, #8]
 800a7e4:	4625      	mov	r5, r4
 800a7e6:	60d3      	str	r3, [r2, #12]
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	e7dc      	b.n	800a7a8 <_realloc_r+0xc0>
 800a7ee:	f002 0201 	and.w	r2, r2, #1
 800a7f2:	eb09 0106 	add.w	r1, r9, r6
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	4332      	orrs	r2, r6
 800a7fc:	f8c9 2004 	str.w	r2, [r9, #4]
 800a800:	444f      	add	r7, r9
 800a802:	604b      	str	r3, [r1, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3108      	adds	r1, #8
 800a808:	f043 0301 	orr.w	r3, r3, #1
 800a80c:	607b      	str	r3, [r7, #4]
 800a80e:	4640      	mov	r0, r8
 800a810:	f000 fa8e 	bl	800ad30 <_free_r>
 800a814:	e7d8      	b.n	800a7c8 <_realloc_r+0xe0>
 800a816:	4611      	mov	r1, r2
 800a818:	f7ff bbf4 	b.w	800a004 <_malloc_r>
 800a81c:	f01e 0f01 	tst.w	lr, #1
 800a820:	d18f      	bne.n	800a742 <_realloc_r+0x5a>
 800a822:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800a826:	eba9 0a01 	sub.w	sl, r9, r1
 800a82a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a82e:	f021 0103 	bic.w	r1, r1, #3
 800a832:	440b      	add	r3, r1
 800a834:	443b      	add	r3, r7
 800a836:	4293      	cmp	r3, r2
 800a838:	db26      	blt.n	800a888 <_realloc_r+0x1a0>
 800a83a:	4655      	mov	r5, sl
 800a83c:	68c1      	ldr	r1, [r0, #12]
 800a83e:	6880      	ldr	r0, [r0, #8]
 800a840:	1f3a      	subs	r2, r7, #4
 800a842:	60c1      	str	r1, [r0, #12]
 800a844:	6088      	str	r0, [r1, #8]
 800a846:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800a84a:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a84e:	2a24      	cmp	r2, #36	; 0x24
 800a850:	60c1      	str	r1, [r0, #12]
 800a852:	6088      	str	r0, [r1, #8]
 800a854:	d826      	bhi.n	800a8a4 <_realloc_r+0x1bc>
 800a856:	2a13      	cmp	r2, #19
 800a858:	f240 8081 	bls.w	800a95e <_realloc_r+0x276>
 800a85c:	6821      	ldr	r1, [r4, #0]
 800a85e:	2a1b      	cmp	r2, #27
 800a860:	f8ca 1008 	str.w	r1, [sl, #8]
 800a864:	6861      	ldr	r1, [r4, #4]
 800a866:	f8ca 100c 	str.w	r1, [sl, #12]
 800a86a:	f200 80ad 	bhi.w	800a9c8 <_realloc_r+0x2e0>
 800a86e:	f104 0008 	add.w	r0, r4, #8
 800a872:	f10a 0210 	add.w	r2, sl, #16
 800a876:	e074      	b.n	800a962 <_realloc_r+0x27a>
 800a878:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a87c:	eba9 0a03 	sub.w	sl, r9, r3
 800a880:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a884:	f021 0103 	bic.w	r1, r1, #3
 800a888:	187b      	adds	r3, r7, r1
 800a88a:	4293      	cmp	r3, r2
 800a88c:	f6ff af59 	blt.w	800a742 <_realloc_r+0x5a>
 800a890:	4655      	mov	r5, sl
 800a892:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a896:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800a89a:	1f3a      	subs	r2, r7, #4
 800a89c:	2a24      	cmp	r2, #36	; 0x24
 800a89e:	60c1      	str	r1, [r0, #12]
 800a8a0:	6088      	str	r0, [r1, #8]
 800a8a2:	d9d8      	bls.n	800a856 <_realloc_r+0x16e>
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	461f      	mov	r7, r3
 800a8aa:	46d1      	mov	r9, sl
 800a8ac:	f000 fb26 	bl	800aefc <memmove>
 800a8b0:	e77a      	b.n	800a7a8 <_realloc_r+0xc0>
 800a8b2:	6841      	ldr	r1, [r0, #4]
 800a8b4:	f106 0010 	add.w	r0, r6, #16
 800a8b8:	f021 0b03 	bic.w	fp, r1, #3
 800a8bc:	44bb      	add	fp, r7
 800a8be:	4583      	cmp	fp, r0
 800a8c0:	da58      	bge.n	800a974 <_realloc_r+0x28c>
 800a8c2:	f01e 0f01 	tst.w	lr, #1
 800a8c6:	f47f af3c 	bne.w	800a742 <_realloc_r+0x5a>
 800a8ca:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800a8ce:	eba9 0a01 	sub.w	sl, r9, r1
 800a8d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a8d6:	f021 0103 	bic.w	r1, r1, #3
 800a8da:	448b      	add	fp, r1
 800a8dc:	4558      	cmp	r0, fp
 800a8de:	dcd3      	bgt.n	800a888 <_realloc_r+0x1a0>
 800a8e0:	4655      	mov	r5, sl
 800a8e2:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a8e6:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800a8ea:	1f3a      	subs	r2, r7, #4
 800a8ec:	2a24      	cmp	r2, #36	; 0x24
 800a8ee:	60c1      	str	r1, [r0, #12]
 800a8f0:	6088      	str	r0, [r1, #8]
 800a8f2:	f200 808d 	bhi.w	800aa10 <_realloc_r+0x328>
 800a8f6:	2a13      	cmp	r2, #19
 800a8f8:	f240 8087 	bls.w	800aa0a <_realloc_r+0x322>
 800a8fc:	6821      	ldr	r1, [r4, #0]
 800a8fe:	2a1b      	cmp	r2, #27
 800a900:	f8ca 1008 	str.w	r1, [sl, #8]
 800a904:	6861      	ldr	r1, [r4, #4]
 800a906:	f8ca 100c 	str.w	r1, [sl, #12]
 800a90a:	f200 8088 	bhi.w	800aa1e <_realloc_r+0x336>
 800a90e:	f104 0108 	add.w	r1, r4, #8
 800a912:	f10a 0210 	add.w	r2, sl, #16
 800a916:	6808      	ldr	r0, [r1, #0]
 800a918:	6010      	str	r0, [r2, #0]
 800a91a:	6848      	ldr	r0, [r1, #4]
 800a91c:	6050      	str	r0, [r2, #4]
 800a91e:	6889      	ldr	r1, [r1, #8]
 800a920:	6091      	str	r1, [r2, #8]
 800a922:	ebab 0206 	sub.w	r2, fp, r6
 800a926:	eb0a 0106 	add.w	r1, sl, r6
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	6099      	str	r1, [r3, #8]
 800a930:	604a      	str	r2, [r1, #4]
 800a932:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a936:	4640      	mov	r0, r8
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	431e      	orrs	r6, r3
 800a93e:	f8ca 6004 	str.w	r6, [sl, #4]
 800a942:	f7ff fec7 	bl	800a6d4 <__malloc_unlock>
 800a946:	e742      	b.n	800a7ce <_realloc_r+0xe6>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	2a1b      	cmp	r2, #27
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	6863      	ldr	r3, [r4, #4]
 800a950:	6043      	str	r3, [r0, #4]
 800a952:	d827      	bhi.n	800a9a4 <_realloc_r+0x2bc>
 800a954:	f100 0308 	add.w	r3, r0, #8
 800a958:	f104 0208 	add.w	r2, r4, #8
 800a95c:	e70b      	b.n	800a776 <_realloc_r+0x8e>
 800a95e:	4620      	mov	r0, r4
 800a960:	462a      	mov	r2, r5
 800a962:	6801      	ldr	r1, [r0, #0]
 800a964:	461f      	mov	r7, r3
 800a966:	6011      	str	r1, [r2, #0]
 800a968:	6841      	ldr	r1, [r0, #4]
 800a96a:	46d1      	mov	r9, sl
 800a96c:	6051      	str	r1, [r2, #4]
 800a96e:	6883      	ldr	r3, [r0, #8]
 800a970:	6093      	str	r3, [r2, #8]
 800a972:	e719      	b.n	800a7a8 <_realloc_r+0xc0>
 800a974:	ebab 0b06 	sub.w	fp, fp, r6
 800a978:	eb09 0106 	add.w	r1, r9, r6
 800a97c:	f04b 0201 	orr.w	r2, fp, #1
 800a980:	6099      	str	r1, [r3, #8]
 800a982:	604a      	str	r2, [r1, #4]
 800a984:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a988:	4640      	mov	r0, r8
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	431e      	orrs	r6, r3
 800a990:	f844 6c04 	str.w	r6, [r4, #-4]
 800a994:	f7ff fe9e 	bl	800a6d4 <__malloc_unlock>
 800a998:	4625      	mov	r5, r4
 800a99a:	e718      	b.n	800a7ce <_realloc_r+0xe6>
 800a99c:	4621      	mov	r1, r4
 800a99e:	f000 faad 	bl	800aefc <memmove>
 800a9a2:	e6ee      	b.n	800a782 <_realloc_r+0x9a>
 800a9a4:	68a3      	ldr	r3, [r4, #8]
 800a9a6:	2a24      	cmp	r2, #36	; 0x24
 800a9a8:	6083      	str	r3, [r0, #8]
 800a9aa:	68e3      	ldr	r3, [r4, #12]
 800a9ac:	60c3      	str	r3, [r0, #12]
 800a9ae:	d018      	beq.n	800a9e2 <_realloc_r+0x2fa>
 800a9b0:	f100 0310 	add.w	r3, r0, #16
 800a9b4:	f104 0210 	add.w	r2, r4, #16
 800a9b8:	e6dd      	b.n	800a776 <_realloc_r+0x8e>
 800a9ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a9be:	4625      	mov	r5, r4
 800a9c0:	f023 0303 	bic.w	r3, r3, #3
 800a9c4:	441f      	add	r7, r3
 800a9c6:	e6ef      	b.n	800a7a8 <_realloc_r+0xc0>
 800a9c8:	68a1      	ldr	r1, [r4, #8]
 800a9ca:	2a24      	cmp	r2, #36	; 0x24
 800a9cc:	f8ca 1010 	str.w	r1, [sl, #16]
 800a9d0:	68e1      	ldr	r1, [r4, #12]
 800a9d2:	f8ca 1014 	str.w	r1, [sl, #20]
 800a9d6:	d00d      	beq.n	800a9f4 <_realloc_r+0x30c>
 800a9d8:	f104 0010 	add.w	r0, r4, #16
 800a9dc:	f10a 0218 	add.w	r2, sl, #24
 800a9e0:	e7bf      	b.n	800a962 <_realloc_r+0x27a>
 800a9e2:	6922      	ldr	r2, [r4, #16]
 800a9e4:	f100 0318 	add.w	r3, r0, #24
 800a9e8:	6102      	str	r2, [r0, #16]
 800a9ea:	6961      	ldr	r1, [r4, #20]
 800a9ec:	f104 0218 	add.w	r2, r4, #24
 800a9f0:	6141      	str	r1, [r0, #20]
 800a9f2:	e6c0      	b.n	800a776 <_realloc_r+0x8e>
 800a9f4:	6922      	ldr	r2, [r4, #16]
 800a9f6:	f104 0018 	add.w	r0, r4, #24
 800a9fa:	f8ca 2018 	str.w	r2, [sl, #24]
 800a9fe:	6961      	ldr	r1, [r4, #20]
 800aa00:	f10a 0220 	add.w	r2, sl, #32
 800aa04:	f8ca 101c 	str.w	r1, [sl, #28]
 800aa08:	e7ab      	b.n	800a962 <_realloc_r+0x27a>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	e782      	b.n	800a916 <_realloc_r+0x22e>
 800aa10:	4621      	mov	r1, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	9301      	str	r3, [sp, #4]
 800aa16:	f000 fa71 	bl	800aefc <memmove>
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	e781      	b.n	800a922 <_realloc_r+0x23a>
 800aa1e:	68a1      	ldr	r1, [r4, #8]
 800aa20:	2a24      	cmp	r2, #36	; 0x24
 800aa22:	f8ca 1010 	str.w	r1, [sl, #16]
 800aa26:	68e1      	ldr	r1, [r4, #12]
 800aa28:	f8ca 1014 	str.w	r1, [sl, #20]
 800aa2c:	d006      	beq.n	800aa3c <_realloc_r+0x354>
 800aa2e:	f104 0110 	add.w	r1, r4, #16
 800aa32:	f10a 0218 	add.w	r2, sl, #24
 800aa36:	e76e      	b.n	800a916 <_realloc_r+0x22e>
 800aa38:	20000468 	.word	0x20000468
 800aa3c:	6922      	ldr	r2, [r4, #16]
 800aa3e:	f104 0118 	add.w	r1, r4, #24
 800aa42:	f8ca 2018 	str.w	r2, [sl, #24]
 800aa46:	6960      	ldr	r0, [r4, #20]
 800aa48:	f10a 0220 	add.w	r2, sl, #32
 800aa4c:	f8ca 001c 	str.w	r0, [sl, #28]
 800aa50:	e761      	b.n	800a916 <_realloc_r+0x22e>
 800aa52:	bf00      	nop

0800aa54 <_sbrk_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	2300      	movs	r3, #0
 800aa58:	4c06      	ldr	r4, [pc, #24]	; (800aa74 <_sbrk_r+0x20>)
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	f7f9 ff1f 	bl	80048a2 <_sbrk>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d000      	beq.n	800aa6a <_sbrk_r+0x16>
 800aa68:	bd38      	pop	{r3, r4, r5, pc}
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d0fb      	beq.n	800aa68 <_sbrk_r+0x14>
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	20001b5c 	.word	0x20001b5c

0800aa78 <strcmp>:
 800aa78:	ea80 0c01 	eor.w	ip, r0, r1
 800aa7c:	f01c 0f03 	tst.w	ip, #3
 800aa80:	d137      	bne.n	800aaf2 <strcmp+0x7a>
 800aa82:	f010 0c03 	ands.w	ip, r0, #3
 800aa86:	f020 0003 	bic.w	r0, r0, #3
 800aa8a:	f021 0103 	bic.w	r1, r1, #3
 800aa8e:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa92:	bf08      	it	eq
 800aa94:	f851 3b04 	ldreq.w	r3, [r1], #4
 800aa98:	d00e      	beq.n	800aab8 <strcmp+0x40>
 800aa9a:	f08c 0c03 	eor.w	ip, ip, #3
 800aa9e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800aaa2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800aaa6:	fa23 fc0c 	lsr.w	ip, r3, ip
 800aaaa:	f851 3b04 	ldr.w	r3, [r1], #4
 800aaae:	ea42 020c 	orr.w	r2, r2, ip
 800aab2:	ea43 030c 	orr.w	r3, r3, ip
 800aab6:	bf00      	nop
 800aab8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800aabc:	429a      	cmp	r2, r3
 800aabe:	bf01      	itttt	eq
 800aac0:	ea2c 0c02 	biceq.w	ip, ip, r2
 800aac4:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 800aac8:	f850 2b04 	ldreq.w	r2, [r0], #4
 800aacc:	f851 3b04 	ldreq.w	r3, [r1], #4
 800aad0:	d0f2      	beq.n	800aab8 <strcmp+0x40>
 800aad2:	ea4f 6002 	mov.w	r0, r2, lsl #24
 800aad6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800aada:	2801      	cmp	r0, #1
 800aadc:	bf28      	it	cs
 800aade:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800aae2:	bf08      	it	eq
 800aae4:	0a1b      	lsreq	r3, r3, #8
 800aae6:	d0f4      	beq.n	800aad2 <strcmp+0x5a>
 800aae8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800aaec:	0e00      	lsrs	r0, r0, #24
 800aaee:	1ac0      	subs	r0, r0, r3
 800aaf0:	4770      	bx	lr
 800aaf2:	f010 0f03 	tst.w	r0, #3
 800aaf6:	d00a      	beq.n	800ab0e <strcmp+0x96>
 800aaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aafc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab00:	2a01      	cmp	r2, #1
 800ab02:	bf28      	it	cs
 800ab04:	429a      	cmpcs	r2, r3
 800ab06:	d0f4      	beq.n	800aaf2 <strcmp+0x7a>
 800ab08:	eba2 0003 	sub.w	r0, r2, r3
 800ab0c:	4770      	bx	lr
 800ab0e:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800ab12:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab16:	f001 0503 	and.w	r5, r1, #3
 800ab1a:	f021 0103 	bic.w	r1, r1, #3
 800ab1e:	f851 3b04 	ldr.w	r3, [r1], #4
 800ab22:	2d02      	cmp	r5, #2
 800ab24:	d026      	beq.n	800ab74 <strcmp+0xfc>
 800ab26:	d84d      	bhi.n	800abc4 <strcmp+0x14c>
 800ab28:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 800ab2c:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 800ab30:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800ab34:	ea2c 0c02 	bic.w	ip, ip, r2
 800ab38:	d10d      	bne.n	800ab56 <strcmp+0xde>
 800ab3a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800ab3e:	bf08      	it	eq
 800ab40:	f851 3b04 	ldreq.w	r3, [r1], #4
 800ab44:	d10a      	bne.n	800ab5c <strcmp+0xe4>
 800ab46:	ea85 0502 	eor.w	r5, r5, r2
 800ab4a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 800ab4e:	d10c      	bne.n	800ab6a <strcmp+0xf2>
 800ab50:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab54:	e7e8      	b.n	800ab28 <strcmp+0xb0>
 800ab56:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ab5a:	e05b      	b.n	800ac14 <strcmp+0x19c>
 800ab5c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 800ab60:	d154      	bne.n	800ac0c <strcmp+0x194>
 800ab62:	780b      	ldrb	r3, [r1, #0]
 800ab64:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800ab68:	e054      	b.n	800ac14 <strcmp+0x19c>
 800ab6a:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800ab6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800ab72:	e04f      	b.n	800ac14 <strcmp+0x19c>
 800ab74:	ea4f 4502 	mov.w	r5, r2, lsl #16
 800ab78:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800ab7c:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800ab80:	ea2c 0c02 	bic.w	ip, ip, r2
 800ab84:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 800ab88:	d118      	bne.n	800abbc <strcmp+0x144>
 800ab8a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800ab8e:	bf08      	it	eq
 800ab90:	f851 3b04 	ldreq.w	r3, [r1], #4
 800ab94:	d107      	bne.n	800aba6 <strcmp+0x12e>
 800ab96:	ea85 0502 	eor.w	r5, r5, r2
 800ab9a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800ab9e:	d109      	bne.n	800abb4 <strcmp+0x13c>
 800aba0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aba4:	e7e6      	b.n	800ab74 <strcmp+0xfc>
 800aba6:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 800abaa:	d12f      	bne.n	800ac0c <strcmp+0x194>
 800abac:	880b      	ldrh	r3, [r1, #0]
 800abae:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800abb2:	e02f      	b.n	800ac14 <strcmp+0x19c>
 800abb4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800abb8:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800abbc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800abc0:	e028      	b.n	800ac14 <strcmp+0x19c>
 800abc2:	bf00      	nop
 800abc4:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 800abc8:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 800abcc:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800abd0:	ea2c 0c02 	bic.w	ip, ip, r2
 800abd4:	d10d      	bne.n	800abf2 <strcmp+0x17a>
 800abd6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800abda:	bf08      	it	eq
 800abdc:	f851 3b04 	ldreq.w	r3, [r1], #4
 800abe0:	d10a      	bne.n	800abf8 <strcmp+0x180>
 800abe2:	ea85 0502 	eor.w	r5, r5, r2
 800abe6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 800abea:	d10a      	bne.n	800ac02 <strcmp+0x18a>
 800abec:	f850 2b04 	ldr.w	r2, [r0], #4
 800abf0:	e7e8      	b.n	800abc4 <strcmp+0x14c>
 800abf2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800abf6:	e00d      	b.n	800ac14 <strcmp+0x19c>
 800abf8:	f012 0fff 	tst.w	r2, #255	; 0xff
 800abfc:	d006      	beq.n	800ac0c <strcmp+0x194>
 800abfe:	f851 3b04 	ldr.w	r3, [r1], #4
 800ac02:	ea4f 2512 	mov.w	r5, r2, lsr #8
 800ac06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac0a:	e003      	b.n	800ac14 <strcmp+0x19c>
 800ac0c:	f04f 0000 	mov.w	r0, #0
 800ac10:	bc20      	pop	{r5}
 800ac12:	4770      	bx	lr
 800ac14:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 800ac18:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800ac1c:	2801      	cmp	r0, #1
 800ac1e:	bf28      	it	cs
 800ac20:	4290      	cmpcs	r0, r2
 800ac22:	bf04      	itt	eq
 800ac24:	0a2d      	lsreq	r5, r5, #8
 800ac26:	0a1b      	lsreq	r3, r3, #8
 800ac28:	d0f4      	beq.n	800ac14 <strcmp+0x19c>
 800ac2a:	eba2 0000 	sub.w	r0, r2, r0
 800ac2e:	bc20      	pop	{r5}
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop

0800ac34 <strlen>:
 800ac34:	f020 0103 	bic.w	r1, r0, #3
 800ac38:	f010 0003 	ands.w	r0, r0, #3
 800ac3c:	f1c0 0000 	rsb	r0, r0, #0
 800ac40:	f851 3b04 	ldr.w	r3, [r1], #4
 800ac44:	f100 0c04 	add.w	ip, r0, #4
 800ac48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ac4c:	f06f 0200 	mvn.w	r2, #0
 800ac50:	bf1c      	itt	ne
 800ac52:	fa22 f20c 	lsrne.w	r2, r2, ip
 800ac56:	4313      	orrne	r3, r2
 800ac58:	f04f 0c01 	mov.w	ip, #1
 800ac5c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800ac60:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800ac64:	eba3 020c 	sub.w	r2, r3, ip
 800ac68:	ea22 0203 	bic.w	r2, r2, r3
 800ac6c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800ac70:	bf04      	itt	eq
 800ac72:	f851 3b04 	ldreq.w	r3, [r1], #4
 800ac76:	3004      	addeq	r0, #4
 800ac78:	d0f4      	beq.n	800ac64 <strlen+0x30>
 800ac7a:	f1c2 0100 	rsb	r1, r2, #0
 800ac7e:	ea02 0201 	and.w	r2, r2, r1
 800ac82:	fab2 f282 	clz	r2, r2
 800ac86:	f1c2 021f 	rsb	r2, r2, #31
 800ac8a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800ac8e:	4770      	bx	lr

0800ac90 <_malloc_trim_r>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	460c      	mov	r4, r1
 800ac94:	4f23      	ldr	r7, [pc, #140]	; (800ad24 <_malloc_trim_r+0x94>)
 800ac96:	4606      	mov	r6, r0
 800ac98:	f7ff fd1a 	bl	800a6d0 <__malloc_lock>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800aca2:	685d      	ldr	r5, [r3, #4]
 800aca4:	310f      	adds	r1, #15
 800aca6:	f025 0503 	bic.w	r5, r5, #3
 800acaa:	4429      	add	r1, r5
 800acac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800acb0:	f021 010f 	bic.w	r1, r1, #15
 800acb4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800acb8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800acbc:	db07      	blt.n	800acce <_malloc_trim_r+0x3e>
 800acbe:	2100      	movs	r1, #0
 800acc0:	4630      	mov	r0, r6
 800acc2:	f7ff fec7 	bl	800aa54 <_sbrk_r>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	442b      	add	r3, r5
 800acca:	4298      	cmp	r0, r3
 800accc:	d004      	beq.n	800acd8 <_malloc_trim_r+0x48>
 800acce:	4630      	mov	r0, r6
 800acd0:	f7ff fd00 	bl	800a6d4 <__malloc_unlock>
 800acd4:	2000      	movs	r0, #0
 800acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd8:	4261      	negs	r1, r4
 800acda:	4630      	mov	r0, r6
 800acdc:	f7ff feba 	bl	800aa54 <_sbrk_r>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d00d      	beq.n	800ad00 <_malloc_trim_r+0x70>
 800ace4:	4b10      	ldr	r3, [pc, #64]	; (800ad28 <_malloc_trim_r+0x98>)
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	6819      	ldr	r1, [r3, #0]
 800acea:	1b2d      	subs	r5, r5, r4
 800acec:	f045 0501 	orr.w	r5, r5, #1
 800acf0:	4630      	mov	r0, r6
 800acf2:	1b09      	subs	r1, r1, r4
 800acf4:	6055      	str	r5, [r2, #4]
 800acf6:	6019      	str	r1, [r3, #0]
 800acf8:	f7ff fcec 	bl	800a6d4 <__malloc_unlock>
 800acfc:	2001      	movs	r0, #1
 800acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad00:	2100      	movs	r1, #0
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff fea6 	bl	800aa54 <_sbrk_r>
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	1a83      	subs	r3, r0, r2
 800ad0c:	2b0f      	cmp	r3, #15
 800ad0e:	ddde      	ble.n	800acce <_malloc_trim_r+0x3e>
 800ad10:	4c06      	ldr	r4, [pc, #24]	; (800ad2c <_malloc_trim_r+0x9c>)
 800ad12:	4905      	ldr	r1, [pc, #20]	; (800ad28 <_malloc_trim_r+0x98>)
 800ad14:	6824      	ldr	r4, [r4, #0]
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	1b00      	subs	r0, r0, r4
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	6008      	str	r0, [r1, #0]
 800ad20:	e7d5      	b.n	800acce <_malloc_trim_r+0x3e>
 800ad22:	bf00      	nop
 800ad24:	20000468 	.word	0x20000468
 800ad28:	20001b0c 	.word	0x20001b0c
 800ad2c:	20000870 	.word	0x20000870

0800ad30 <_free_r>:
 800ad30:	2900      	cmp	r1, #0
 800ad32:	d044      	beq.n	800adbe <_free_r+0x8e>
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	460d      	mov	r5, r1
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	f7ff fcc8 	bl	800a6d0 <__malloc_lock>
 800ad40:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800ad44:	4969      	ldr	r1, [pc, #420]	; (800aeec <_free_r+0x1bc>)
 800ad46:	f1a5 0408 	sub.w	r4, r5, #8
 800ad4a:	f027 0301 	bic.w	r3, r7, #1
 800ad4e:	18e2      	adds	r2, r4, r3
 800ad50:	688e      	ldr	r6, [r1, #8]
 800ad52:	6850      	ldr	r0, [r2, #4]
 800ad54:	42b2      	cmp	r2, r6
 800ad56:	f020 0003 	bic.w	r0, r0, #3
 800ad5a:	d05e      	beq.n	800ae1a <_free_r+0xea>
 800ad5c:	07fe      	lsls	r6, r7, #31
 800ad5e:	6050      	str	r0, [r2, #4]
 800ad60:	d40b      	bmi.n	800ad7a <_free_r+0x4a>
 800ad62:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800ad66:	f101 0e08 	add.w	lr, r1, #8
 800ad6a:	1be4      	subs	r4, r4, r7
 800ad6c:	68a5      	ldr	r5, [r4, #8]
 800ad6e:	443b      	add	r3, r7
 800ad70:	4575      	cmp	r5, lr
 800ad72:	d06d      	beq.n	800ae50 <_free_r+0x120>
 800ad74:	68e7      	ldr	r7, [r4, #12]
 800ad76:	60ef      	str	r7, [r5, #12]
 800ad78:	60bd      	str	r5, [r7, #8]
 800ad7a:	1815      	adds	r5, r2, r0
 800ad7c:	686d      	ldr	r5, [r5, #4]
 800ad7e:	07ed      	lsls	r5, r5, #31
 800ad80:	d53e      	bpl.n	800ae00 <_free_r+0xd0>
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	6062      	str	r2, [r4, #4]
 800ad88:	50e3      	str	r3, [r4, r3]
 800ad8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad8e:	d217      	bcs.n	800adc0 <_free_r+0x90>
 800ad90:	2201      	movs	r2, #1
 800ad92:	08db      	lsrs	r3, r3, #3
 800ad94:	1098      	asrs	r0, r3, #2
 800ad96:	684d      	ldr	r5, [r1, #4]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800ad9e:	4082      	lsls	r2, r0
 800ada0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800ada4:	432a      	orrs	r2, r5
 800ada6:	3808      	subs	r0, #8
 800ada8:	60e0      	str	r0, [r4, #12]
 800adaa:	60a7      	str	r7, [r4, #8]
 800adac:	604a      	str	r2, [r1, #4]
 800adae:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
 800adb2:	60fc      	str	r4, [r7, #12]
 800adb4:	4640      	mov	r0, r8
 800adb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adba:	f7ff bc8b 	b.w	800a6d4 <__malloc_unlock>
 800adbe:	4770      	bx	lr
 800adc0:	0a5a      	lsrs	r2, r3, #9
 800adc2:	2a04      	cmp	r2, #4
 800adc4:	d852      	bhi.n	800ae6c <_free_r+0x13c>
 800adc6:	099a      	lsrs	r2, r3, #6
 800adc8:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800adcc:	00ff      	lsls	r7, r7, #3
 800adce:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800add2:	19c8      	adds	r0, r1, r7
 800add4:	59ca      	ldr	r2, [r1, r7]
 800add6:	3808      	subs	r0, #8
 800add8:	4290      	cmp	r0, r2
 800adda:	d04f      	beq.n	800ae7c <_free_r+0x14c>
 800addc:	6851      	ldr	r1, [r2, #4]
 800adde:	f021 0103 	bic.w	r1, r1, #3
 800ade2:	428b      	cmp	r3, r1
 800ade4:	d232      	bcs.n	800ae4c <_free_r+0x11c>
 800ade6:	6892      	ldr	r2, [r2, #8]
 800ade8:	4290      	cmp	r0, r2
 800adea:	d1f7      	bne.n	800addc <_free_r+0xac>
 800adec:	68c3      	ldr	r3, [r0, #12]
 800adee:	60a0      	str	r0, [r4, #8]
 800adf0:	60e3      	str	r3, [r4, #12]
 800adf2:	609c      	str	r4, [r3, #8]
 800adf4:	60c4      	str	r4, [r0, #12]
 800adf6:	4640      	mov	r0, r8
 800adf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adfc:	f7ff bc6a 	b.w	800a6d4 <__malloc_unlock>
 800ae00:	6895      	ldr	r5, [r2, #8]
 800ae02:	4f3b      	ldr	r7, [pc, #236]	; (800aef0 <_free_r+0x1c0>)
 800ae04:	4403      	add	r3, r0
 800ae06:	42bd      	cmp	r5, r7
 800ae08:	d040      	beq.n	800ae8c <_free_r+0x15c>
 800ae0a:	68d0      	ldr	r0, [r2, #12]
 800ae0c:	f043 0201 	orr.w	r2, r3, #1
 800ae10:	60e8      	str	r0, [r5, #12]
 800ae12:	6085      	str	r5, [r0, #8]
 800ae14:	6062      	str	r2, [r4, #4]
 800ae16:	50e3      	str	r3, [r4, r3]
 800ae18:	e7b7      	b.n	800ad8a <_free_r+0x5a>
 800ae1a:	07ff      	lsls	r7, r7, #31
 800ae1c:	4403      	add	r3, r0
 800ae1e:	d407      	bmi.n	800ae30 <_free_r+0x100>
 800ae20:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800ae24:	1b64      	subs	r4, r4, r5
 800ae26:	68e2      	ldr	r2, [r4, #12]
 800ae28:	68a0      	ldr	r0, [r4, #8]
 800ae2a:	442b      	add	r3, r5
 800ae2c:	60c2      	str	r2, [r0, #12]
 800ae2e:	6090      	str	r0, [r2, #8]
 800ae30:	4a30      	ldr	r2, [pc, #192]	; (800aef4 <_free_r+0x1c4>)
 800ae32:	f043 0001 	orr.w	r0, r3, #1
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	6060      	str	r0, [r4, #4]
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	608c      	str	r4, [r1, #8]
 800ae3e:	d3b9      	bcc.n	800adb4 <_free_r+0x84>
 800ae40:	4b2d      	ldr	r3, [pc, #180]	; (800aef8 <_free_r+0x1c8>)
 800ae42:	4640      	mov	r0, r8
 800ae44:	6819      	ldr	r1, [r3, #0]
 800ae46:	f7ff ff23 	bl	800ac90 <_malloc_trim_r>
 800ae4a:	e7b3      	b.n	800adb4 <_free_r+0x84>
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	e7cd      	b.n	800adec <_free_r+0xbc>
 800ae50:	1811      	adds	r1, r2, r0
 800ae52:	6849      	ldr	r1, [r1, #4]
 800ae54:	07c9      	lsls	r1, r1, #31
 800ae56:	d444      	bmi.n	800aee2 <_free_r+0x1b2>
 800ae58:	6891      	ldr	r1, [r2, #8]
 800ae5a:	4403      	add	r3, r0
 800ae5c:	68d2      	ldr	r2, [r2, #12]
 800ae5e:	f043 0001 	orr.w	r0, r3, #1
 800ae62:	60ca      	str	r2, [r1, #12]
 800ae64:	6091      	str	r1, [r2, #8]
 800ae66:	6060      	str	r0, [r4, #4]
 800ae68:	50e3      	str	r3, [r4, r3]
 800ae6a:	e7a3      	b.n	800adb4 <_free_r+0x84>
 800ae6c:	2a14      	cmp	r2, #20
 800ae6e:	d816      	bhi.n	800ae9e <_free_r+0x16e>
 800ae70:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800ae74:	00ff      	lsls	r7, r7, #3
 800ae76:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800ae7a:	e7aa      	b.n	800add2 <_free_r+0xa2>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	10aa      	asrs	r2, r5, #2
 800ae80:	684d      	ldr	r5, [r1, #4]
 800ae82:	4093      	lsls	r3, r2
 800ae84:	432b      	orrs	r3, r5
 800ae86:	604b      	str	r3, [r1, #4]
 800ae88:	4603      	mov	r3, r0
 800ae8a:	e7b0      	b.n	800adee <_free_r+0xbe>
 800ae8c:	f043 0201 	orr.w	r2, r3, #1
 800ae90:	614c      	str	r4, [r1, #20]
 800ae92:	610c      	str	r4, [r1, #16]
 800ae94:	60e5      	str	r5, [r4, #12]
 800ae96:	60a5      	str	r5, [r4, #8]
 800ae98:	6062      	str	r2, [r4, #4]
 800ae9a:	50e3      	str	r3, [r4, r3]
 800ae9c:	e78a      	b.n	800adb4 <_free_r+0x84>
 800ae9e:	2a54      	cmp	r2, #84	; 0x54
 800aea0:	d806      	bhi.n	800aeb0 <_free_r+0x180>
 800aea2:	0b1a      	lsrs	r2, r3, #12
 800aea4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800aea8:	00ff      	lsls	r7, r7, #3
 800aeaa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800aeae:	e790      	b.n	800add2 <_free_r+0xa2>
 800aeb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800aeb4:	d806      	bhi.n	800aec4 <_free_r+0x194>
 800aeb6:	0bda      	lsrs	r2, r3, #15
 800aeb8:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800aebc:	00ff      	lsls	r7, r7, #3
 800aebe:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800aec2:	e786      	b.n	800add2 <_free_r+0xa2>
 800aec4:	f240 5054 	movw	r0, #1364	; 0x554
 800aec8:	4282      	cmp	r2, r0
 800aeca:	d806      	bhi.n	800aeda <_free_r+0x1aa>
 800aecc:	0c9a      	lsrs	r2, r3, #18
 800aece:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800aed2:	00ff      	lsls	r7, r7, #3
 800aed4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800aed8:	e77b      	b.n	800add2 <_free_r+0xa2>
 800aeda:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800aede:	257e      	movs	r5, #126	; 0x7e
 800aee0:	e777      	b.n	800add2 <_free_r+0xa2>
 800aee2:	f043 0101 	orr.w	r1, r3, #1
 800aee6:	6061      	str	r1, [r4, #4]
 800aee8:	6013      	str	r3, [r2, #0]
 800aeea:	e763      	b.n	800adb4 <_free_r+0x84>
 800aeec:	20000468 	.word	0x20000468
 800aef0:	20000470 	.word	0x20000470
 800aef4:	20000874 	.word	0x20000874
 800aef8:	20001b3c 	.word	0x20001b3c

0800aefc <memmove>:
 800aefc:	4288      	cmp	r0, r1
 800aefe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af00:	d90d      	bls.n	800af1e <memmove+0x22>
 800af02:	188b      	adds	r3, r1, r2
 800af04:	4298      	cmp	r0, r3
 800af06:	d20a      	bcs.n	800af1e <memmove+0x22>
 800af08:	1884      	adds	r4, r0, r2
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	d051      	beq.n	800afb2 <memmove+0xb6>
 800af0e:	4622      	mov	r2, r4
 800af10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af14:	4299      	cmp	r1, r3
 800af16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af1a:	d1f9      	bne.n	800af10 <memmove+0x14>
 800af1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af1e:	2a0f      	cmp	r2, #15
 800af20:	d948      	bls.n	800afb4 <memmove+0xb8>
 800af22:	ea41 0300 	orr.w	r3, r1, r0
 800af26:	079b      	lsls	r3, r3, #30
 800af28:	d146      	bne.n	800afb8 <memmove+0xbc>
 800af2a:	4615      	mov	r5, r2
 800af2c:	f100 0410 	add.w	r4, r0, #16
 800af30:	f101 0310 	add.w	r3, r1, #16
 800af34:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800af38:	3d10      	subs	r5, #16
 800af3a:	f844 6c10 	str.w	r6, [r4, #-16]
 800af3e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800af42:	2d0f      	cmp	r5, #15
 800af44:	f844 6c0c 	str.w	r6, [r4, #-12]
 800af48:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800af4c:	f104 0410 	add.w	r4, r4, #16
 800af50:	f844 6c18 	str.w	r6, [r4, #-24]
 800af54:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800af58:	f103 0310 	add.w	r3, r3, #16
 800af5c:	f844 6c14 	str.w	r6, [r4, #-20]
 800af60:	d8e8      	bhi.n	800af34 <memmove+0x38>
 800af62:	f1a2 0310 	sub.w	r3, r2, #16
 800af66:	f023 030f 	bic.w	r3, r3, #15
 800af6a:	f002 0e0f 	and.w	lr, r2, #15
 800af6e:	3310      	adds	r3, #16
 800af70:	f1be 0f03 	cmp.w	lr, #3
 800af74:	4419      	add	r1, r3
 800af76:	4403      	add	r3, r0
 800af78:	d921      	bls.n	800afbe <memmove+0xc2>
 800af7a:	460e      	mov	r6, r1
 800af7c:	4674      	mov	r4, lr
 800af7e:	1f1d      	subs	r5, r3, #4
 800af80:	f856 7b04 	ldr.w	r7, [r6], #4
 800af84:	3c04      	subs	r4, #4
 800af86:	2c03      	cmp	r4, #3
 800af88:	f845 7f04 	str.w	r7, [r5, #4]!
 800af8c:	d8f8      	bhi.n	800af80 <memmove+0x84>
 800af8e:	f1ae 0404 	sub.w	r4, lr, #4
 800af92:	f024 0403 	bic.w	r4, r4, #3
 800af96:	3404      	adds	r4, #4
 800af98:	4421      	add	r1, r4
 800af9a:	4423      	add	r3, r4
 800af9c:	f002 0203 	and.w	r2, r2, #3
 800afa0:	b162      	cbz	r2, 800afbc <memmove+0xc0>
 800afa2:	3b01      	subs	r3, #1
 800afa4:	440a      	add	r2, r1
 800afa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afaa:	428a      	cmp	r2, r1
 800afac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afb0:	d1f9      	bne.n	800afa6 <memmove+0xaa>
 800afb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb4:	4603      	mov	r3, r0
 800afb6:	e7f3      	b.n	800afa0 <memmove+0xa4>
 800afb8:	4603      	mov	r3, r0
 800afba:	e7f2      	b.n	800afa2 <memmove+0xa6>
 800afbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afbe:	4672      	mov	r2, lr
 800afc0:	e7ee      	b.n	800afa0 <memmove+0xa4>
 800afc2:	bf00      	nop

0800afc4 <typeinfo name for ros::Msg>:
 800afc4:	334e 6f72 3373 734d 4567 0000               N3ros3MsgE..

0800afd0 <typeinfo for ros::Msg>:
 800afd0:	b6c0 0800 afc4 0800                         ........

0800afd8 <typeinfo name for std_msgs::Time>:
 800afd8:	384e 7473 5f64 736d 7367 5434 6d69 4565     N8std_msgs4TimeE
 800afe8:	0000 0000                                   ....

0800afec <typeinfo for std_msgs::Time>:
 800afec:	b7d4 0800 afd8 0800 afd0 0800               ............

0800aff8 <typeinfo name for rosserial_msgs::TopicInfo>:
 800aff8:	314e 7234 736f 6573 6972 6c61 6d5f 6773     N14rosserial_msg
 800b008:	3973 6f54 6970 4963 666e 456f 0000 0000     s9TopicInfoE....

0800b018 <typeinfo for rosserial_msgs::TopicInfo>:
 800b018:	b7d4 0800 aff8 0800 afd0 0800               ............

0800b024 <typeinfo name for rosserial_msgs::Log>:
 800b024:	314e 7234 736f 6573 6972 6c61 6d5f 6773     N14rosserial_msg
 800b034:	3373 6f4c 4567 0000                         s3LogE..

0800b03c <typeinfo for rosserial_msgs::Log>:
 800b03c:	b7d4 0800 b024 0800 afd0 0800               ....$.......

0800b048 <typeinfo name for rosserial_msgs::RequestParamResponse>:
 800b048:	314e 7234 736f 6573 6972 6c61 6d5f 6773     N14rosserial_msg
 800b058:	3273 5230 7165 6575 7473 6150 6172 526d     s20RequestParamR
 800b068:	7365 6f70 736e 4565 0000 0000               esponseE....

0800b074 <typeinfo for rosserial_msgs::RequestParamResponse>:
 800b074:	b7d4 0800 b048 0800 afd0 0800               ....H.......

0800b080 <typeinfo name for ros::NodeHandleBase_>:
 800b080:	334e 6f72 3173 4e35 646f 4865 6e61 6c64     N3ros15NodeHandl
 800b090:	4265 7361 5f65 0045                         eBase_E.

0800b098 <typeinfo for ros::NodeHandleBase_>:
 800b098:	b6c0 0800 b080 0800                         ........

0800b0a0 <typeinfo name for ros::Subscriber_>:
 800b0a0:	334e 6f72 3173 5331 6275 6373 6972 6562     N3ros11Subscribe
 800b0b0:	5f72 0045                                   r_E.

0800b0b4 <typeinfo for ros::Subscriber_>:
 800b0b4:	b6c0 0800 b0a0 0800                         ........

0800b0bc <typeinfo name for std_msgs::MultiArrayDimension>:
 800b0bc:	384e 7473 5f64 736d 7367 3931 754d 746c     N8std_msgs19Mult
 800b0cc:	4169 7272 7961 6944 656d 736e 6f69 456e     iArrayDimensionE
 800b0dc:	0000 0000                                   ....

0800b0e0 <typeinfo for std_msgs::MultiArrayDimension>:
 800b0e0:	b7d4 0800 b0bc 0800 afd0 0800               ............

0800b0ec <typeinfo name for std_msgs::MultiArrayLayout>:
 800b0ec:	384e 7473 5f64 736d 7367 3631 754d 746c     N8std_msgs16Mult
 800b0fc:	4169 7272 7961 614c 6f79 7475 0045 0000     iArrayLayoutE...

0800b10c <typeinfo for std_msgs::MultiArrayLayout>:
 800b10c:	b7d4 0800 b0ec 0800 afd0 0800               ............

0800b118 <typeinfo name for std_msgs::Float32MultiArray>:
 800b118:	384e 7473 5f64 736d 7367 3731 6c46 616f     N8std_msgs17Floa
 800b128:	3374 4d32 6c75 6974 7241 6172 4579 0000     t32MultiArrayE..

0800b138 <typeinfo for std_msgs::Float32MultiArray>:
 800b138:	b7d4 0800 b118 0800 afd0 0800               ............

0800b144 <typeinfo name for std_msgs::Header>:
 800b144:	384e 7473 5f64 736d 7367 4836 6165 6564     N8std_msgs6Heade
 800b154:	4572 0000                                   rE..

0800b158 <typeinfo for std_msgs::Header>:
 800b158:	b7d4 0800 b144 0800 afd0 0800               ....D.......

0800b164 <typeinfo name for roberto_msgs::MotorState>:
 800b164:	314e 7232 626f 7265 6f74 6d5f 6773 3173     N12roberto_msgs1
 800b174:	4d30 746f 726f 7453 7461 4565 0000 0000     0MotorStateE....

0800b184 <typeinfo for roberto_msgs::MotorState>:
 800b184:	b7d4 0800 b164 0800 afd0 0800               ....d.......

0800b190 <typeinfo name for ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>>:
 800b190:	334e 6f72 3173 4e31 646f 4865 6e61 6c64     N3ros11NodeHandl
 800b1a0:	5f65 3149 5333 4d54 3233 6148 6472 6177     e_I13STM32Hardwa
 800b1b0:	6572 694c 3532 4c45 3269 4535 694c 3031     reLi25ELi25ELi10
 800b1c0:	3432 4c45 3169 3230 4534 4545 0000 0000     24ELi1024EEE....

0800b1d0 <typeinfo for ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>>:
 800b1d0:	b7d4 0800 b190 0800 b098 0800               ............

0800b1dc <typeinfo name for ros::Subscriber<roberto_msgs::MotorState>>:
 800b1dc:	334e 6f72 3173 5330 6275 6373 6972 6562     N3ros10Subscribe
 800b1ec:	4972 314e 7232 626f 7265 6f74 6d5f 6773     rIN12roberto_msg
 800b1fc:	3173 4d30 746f 726f 7453 7461 4565 4545     s10MotorStateEEE
 800b20c:	0000 0000                                   ....

0800b210 <typeinfo for ros::Subscriber<roberto_msgs::MotorState>>:
 800b210:	b7d4 0800 b1dc 0800 b0b4 0800               ............

0800b21c <vtable for std_msgs::Time>:
 800b21c:	0000 0000 afec 0800 2915 0800 293d 0800     .........)..=)..
 800b22c:	2979 0800 2981 0800                         y)...)..

0800b234 <vtable for rosserial_msgs::TopicInfo>:
 800b234:	0000 0000 b018 0800 2e09 0800 2989 0800     .............)..
 800b244:	2a21 0800 2a29 0800                         !*..)*..

0800b24c <vtable for rosserial_msgs::Log>:
 800b24c:	0000 0000 b03c 0800 2de5 0800 2a31 0800     ....<....-..1*..
 800b25c:	2a5d 0800 2a65 0800                         ]*..e*..

0800b264 <vtable for rosserial_msgs::RequestParamResponse>:
 800b264:	0000 0000 b074 0800 2d11 0800 2e7f 0800     ....t....-......
 800b274:	2a6d 0800 2a75 0800                         m*..u*..

0800b27c <vtable for std_msgs::MultiArrayDimension>:
 800b27c:	0000 0000 b0e0 0800 2cc9 0800 2a7d 0800     .........,..}*..
 800b28c:	2ae1 0800 2ae9 0800                         .*...*..

0800b294 <vtable for std_msgs::MultiArrayLayout>:
 800b294:	0000 0000 b10c 0800 2af1 0800 2f81 0800     .........*.../..
 800b2a4:	2b3d 0800 2b45 0800                         =+..E+..

0800b2ac <vtable for std_msgs::Float32MultiArray>:
 800b2ac:	0000 0000 b138 0800 2b4d 0800 2ff9 0800     ....8...M+.../..
 800b2bc:	2ba5 0800 2bad 0800                         .+...+..

0800b2c4 <vtable for std_msgs::Header>:
 800b2c4:	0000 0000 b158 0800 2c71 0800 2bb5 0800     ....X...q,...+..
 800b2d4:	2c35 0800 2c3d 0800                         5,..=,..

0800b2dc <vtable for roberto_msgs::MotorState>:
 800b2dc:	0000 0000 b184 0800 31c3 0800 3253 0800     .........1..S2..
 800b2ec:	2c45 0800 2c4d 0800                         E,..M,..

0800b2f4 <vtable for ros::NodeHandle_<STM32Hardware, 25, 25, 1024, 1024>>:
 800b2f4:	0000 0000 b1d0 0800 3061 0800 34ed 0800     ........a0...4..
 800b304:	2c55 0800                                   U,..

0800b308 <vtable for ros::Subscriber<roberto_msgs::MotorState>>:
 800b308:	0000 0000 b210 0800 329b 0800 2c5b 0800     .........2..[,..
 800b318:	2c61 0800 2c69 0800                         a,..i,..

0800b320 <rosserial_msgs::REQUESTPARAM>:
 800b320:	6f72 7373 7265 6169 5f6c 736d 7367 522f     rosserial_msgs/R
 800b330:	7165 6575 7473 6150 6172 006d 0fdb bf49     equestParam...I.
 800b340:	0fdb 3f49 cbe4 4016 cbe4 c016 3865 3562     ..I?...@....e8b5
 800b350:	3164 3631 6232 3538 3531 6331 3934 3065     d1162b85151c49e0
 800b360:	6232 3238 3432 3937 6336 6530 7200 626f     2b8224796c0e.rob
 800b370:	7265 6f74 6d5f 6773 2f73 6f4d 6f74 5372     erto_msgs/MotorS
 800b380:	6174 6574 3900 3066 3965 6238 6164 3536     tate.9f0e98bda65
 800b390:	3839 3931 3638 6464 3566 6133 6166 6137     981986ddf53afa7a
 800b3a0:	3034 3465 0039 3131 6261 3764 3133 3263     40e49.11abd731c2
 800b3b0:	3935 3333 3632 6331 3664 3831 6233 3164     5933261cd6183bd1
 800b3c0:	6432 3236 3539 7200 736f 6573 6972 6c61     2d6295.rosserial
 800b3d0:	6d5f 6773 2f73 6f4c 0067 6130 3564 6631     _msgs/Log.0ad51f
 800b3e0:	3838 6366 3434 3938 6632 6338 3031 3836     88fc44892f8c1068
 800b3f0:	3034 3737 3436 3036 3530 7200 736f 6573     4077646005.rosse
 800b400:	6972 6c61 6d5f 6773 2f73 6f54 6970 4963     rial_msgs/TopicI
 800b410:	666e 006f 654d 7373 6761 2065 7266 6d6f     nfo.Message from
 800b420:	6420 7665 6369 2065 7264 706f 6570 3a64      device dropped:
 800b430:	6d20 7365 6173 6567 6c20 7261 6567 2072      message larger 
 800b440:	6874 6e61 6220 6675 6566 2e72 3000 6566     than buffer..0fe
 800b450:	3264 3161 6331 3331 3165 6331 3535 3137     d2a11c13e11c5571
 800b460:	3462 3265 3961 3539 3961 6131 0033 7473     b4e2a995a91a3.st
 800b470:	5f64 736d 7367 4d2f 6c75 6974 7241 6172     d_msgs/MultiArra
 800b480:	4c79 7961 756f 0074 6136 3034 3065 6666     yLayout.6a40e0ff
 800b490:	3661 3161 6137 3035 6133 3363 3866 3136     a6a17a503ac3f861
 800b4a0:	3936 3139 3162 3666 7300 6474 6d5f 6773     6991b1f6.std_msg
 800b4b0:	2f73 6c46 616f 3374 4d32 6c75 6974 7241     s/Float32MultiAr
 800b4c0:	6172 0079 6334 3064 3863 6133 3638 3338     ray.4cd0c83a8683
 800b4d0:	6564 6561 3034 6365 6164 3663 6530 3335     deae40ecdac60e53
 800b4e0:	6662 3861 7300 6474 6d5f 6773 2f73 754d     bfa8.std_msgs/Mu
 800b4f0:	746c 4169 7272 7961 6944 656d 736e 6f69     ltiArrayDimensio
 800b500:	006e 6463 3137 3636 3763 6334 3535 6332     n.cd7166c74c552c
 800b510:	3133 6631 6362 3263 6566 6135 6237 3263     311fbcc2fe5a7bc2
 800b520:	3938 7300 6474 6d5f 6773 2f73 6954 656d     89.std_msgs/Time
 800b530:	3200 3731 6436 6365 6561 6263 6563 3837     .2176decaecbce78
 800b540:	6261 3363 3962 6536 3066 3934 6166 6562     abc3b96ef049fabe
 800b550:	0064 7473 5f64 736d 7367 482f 6165 6564     d.std_msgs/Heade
 800b560:	0072 6573 7672 5f6f 656c 7466 7300 7265     r.servo_left.ser
 800b570:	6f76 725f 6769 7468 6600 6f72 746e 725f     vo_right.front_r
 800b580:	6769 7468 6600 6f72 746e 6c5f 6665 0074     ight.front_left.
 800b590:	6572 7261 6c5f 6665 0074 6572 7261 725f     rear_left.rear_r
 800b5a0:	6769 7468 6300 646d 765f 6c65 6400 6265     ight.cmd_vel.deb
 800b5b0:	6775 6f00 6f64 5f6d 6576 006c               ug.odom_vel.

0800b5bc <vtable for motor>:
 800b5bc:	0000 0000 b5ec 0800 0000 0000 0000 0000     ................
 800b5cc:	4883 0800 4883 0800 4883 0800 4883 0800     .H...H...H...H..
 800b5dc:	4883 0800 4883 0800                         .H...H..

0800b5e4 <typeinfo name for motor>:
 800b5e4:	6d35 746f 726f 0000                         5motor..

0800b5ec <typeinfo for motor>:
 800b5ec:	b6c0 0800 b5e4 0800                         ........

0800b5f4 <vtable for servo>:
 800b5f4:	0000 0000 b63c 0800 418f 0800 41a5 0800     ....<....A...A..
 800b604:	43c1 0800 41b7 0800 4189 0800 4171 0800     .C...A...A..qA..
 800b614:	417f 0800 435d 0800 a8c1 3ca4 a8c1 3d24     .A..]C.....<..$=
 800b624:	a8c1 3ca4 0000 3f80 ced9 bfc7 32ca 3f24     ...<...?.....2$?

0800b634 <typeinfo name for servo>:
 800b634:	7335 7265 6f76 0000                         5servo..

0800b63c <typeinfo for servo>:
 800b63c:	b7d4 0800 b634 0800 b5ec 0800               ....4.......

0800b648 <vtable for DCMotor>:
 800b648:	0000 0000 b67c 0800 43d3 0800 43e9 0800     ....|....C...C..
 800b658:	4835 0800 43fb 0800 43cd 0800 43c5 0800     5H...C...C...C..
 800b668:	43c9 0800 47d9 0800                         .C...G..

0800b670 <typeinfo name for DCMotor>:
 800b670:	4437 4d43 746f 726f 0000 0000               7DCMotor....

0800b67c <typeinfo for DCMotor>:
 800b67c:	b7d4 0800 b670 0800 b5ec 0800               ....p.......

0800b688 <typeinfo for __cxxabiv1::__class_type_info>:
 800b688:	b7d4 0800 b694 0800 b7f8 0800               ............

0800b694 <typeinfo name for __cxxabiv1::__class_type_info>:
 800b694:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 800b6a4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 800b6b4:	0045 0000                                   E...

0800b6b8 <vtable for __cxxabiv1::__class_type_info>:
 800b6b8:	0000 0000 b688 0800 49b5 0800 49c9 0800     .........I...I..
 800b6c8:	542d 0800 542d 0800 49fd 0800 4971 0800     -T..-T...I..qI..
 800b6d8:	49e5 0800 4a29 0800 49a9 0800 7473 3a64     .I..)J...I..std:
 800b6e8:	623a 6461 655f 6378 7065 6974 6e6f 0000     :bad_exception..

0800b6f8 <typeinfo for __cxxabiv1::__forced_unwind>:
 800b6f8:	b6c0 0800 b71c 0800                         ........

0800b700 <typeinfo for __cxxabiv1::__foreign_exception>:
 800b700:	b6c0 0800 b73c 0800                         ....<...

0800b708 <typeinfo for std::bad_exception>:
 800b708:	b7d4 0800 b760 0800 b714 0800               ....`.......

0800b714 <typeinfo for std::exception>:
 800b714:	b6c0 0800 b774 0800                         ....t...

0800b71c <typeinfo name for __cxxabiv1::__forced_unwind>:
 800b71c:	314e 5f30 635f 7878 6261 7669 3131 5f35     N10__cxxabiv115_
 800b72c:	665f 726f 6563 5f64 6e75 6977 646e 0045     _forced_unwindE.

0800b73c <typeinfo name for __cxxabiv1::__foreign_exception>:
 800b73c:	314e 5f30 635f 7878 6261 7669 3131 5f39     N10__cxxabiv119_
 800b74c:	665f 726f 6965 6e67 655f 6378 7065 6974     _foreign_excepti
 800b75c:	6e6f 0045                                   onE.

0800b760 <typeinfo name for std::bad_exception>:
 800b760:	7453 3331 6162 5f64 7865 6563 7470 6f69     St13bad_exceptio
 800b770:	006e 0000                                   n...

0800b774 <typeinfo name for std::exception>:
 800b774:	7453 6539 6378 7065 6974 6e6f 0000 0000     St9exception....

0800b784 <vtable for std::bad_exception>:
 800b784:	0000 0000 b708 0800 4c11 0800 4c1d 0800     .........L...L..
 800b794:	4c15 0800                                   .L..

0800b798 <typeinfo for __cxxabiv1::__si_class_type_info>:
 800b798:	b7d4 0800 b7a4 0800 b688 0800               ............

0800b7a4 <typeinfo name for __cxxabiv1::__si_class_type_info>:
 800b7a4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 800b7b4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 800b7c4:	666e 456f 0000 0000                         nfoE....

0800b7cc <vtable for __cxxabiv1::__si_class_type_info>:
 800b7cc:	0000 0000 b798 0800 4c2d 0800 4c41 0800     ........-L..AL..
 800b7dc:	542d 0800 542d 0800 49fd 0800 4971 0800     -T..-T...I..qI..
 800b7ec:	4d31 0800 4c99 0800 4c5d 0800               1M...L..]L..

0800b7f8 <typeinfo for std::type_info>:
 800b7f8:	b6c0 0800 b800 0800                         ........

0800b800 <typeinfo name for std::type_info>:
 800b800:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

0800b810 <atanhi>:
 800b810:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

0800b820 <atanlo>:
 800b820:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
 800b830:	7173 7472 0000 0000 7173 7472 0066 0000     sqrt....sqrtf...

0800b840 <npio2_hw>:
 800b840:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 800b850:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 800b860:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 800b870:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 800b880:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 800b890:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 800b8a0:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 800b8b0:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0800b8c0 <two_over_pi>:
 800b8c0:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 800b8d0:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 800b8e0:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 800b8f0:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 800b900:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 800b910:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 800b920:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 800b930:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 800b940:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 800b950:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 800b960:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 800b970:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 800b980:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 800b990:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 800b9a0:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 800b9b0:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 800b9c0:	e27b 0060 8c6b 00c0                         {.`.k...

0800b9c8 <npio2_hw>:
 800b9c8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 800b9d8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 800b9e8:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 800b9f8:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 800ba08:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 800ba18:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 800ba28:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 800ba38:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

0800ba48 <two_over_pi>:
 800ba48:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 800ba58:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 800ba68:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 800ba78:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 800ba88:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 800ba98:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 800baa8:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 800bab8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 800bac8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 800bad8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 800bae8:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 800baf8:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 800bb08:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 800bb18:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 800bb28:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 800bb38:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 800bb48:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 800bb58:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 800bb68:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 800bb78:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 800bb88:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 800bb98:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 800bba8:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 800bbb8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 800bbc8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 800bbd8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 800bbe8:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 800bbf8:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 800bc08:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 800bc18:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 800bc28:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 800bc38:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 800bc48:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 800bc58:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 800bc68:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 800bc78:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 800bc88:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 800bc98:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 800bca8:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 800bcb8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 800bcc8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 800bcd8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 800bce8:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 800bcf8:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 800bd08:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 800bd18:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 800bd28:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 800bd38:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 800bd48:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 800bd58:	008c 0000 006b 0000                         ....k...

0800bd60 <PIo2>:
 800bd60:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 800bd70:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 800bd80:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 800bd90:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

0800bda0 <init_jk>:
 800bda0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

0800bdb0 <PIo2>:
 800bdb0:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 800bdc0:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 800bdd0:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

0800bddc <init_jk>:
 800bddc:	0004 0000 0007 0000 0009 0000 b108 8101     ................
 800bdec:	b0b0 8400 0000 0000 b108 8101 b0b0 8400     ................
 800bdfc:	0000 0000 90f5 7fff b0b0 00aa ffff 0e01     ................
 800be0c:	040c 0000 0416 038e 9400 0403 0000 0000     ................
 800be1c:	90d9 7fff 08a9 00b1 ffff 1401 0414 0000     ................
 800be2c:	041c 0034 0424 0000 042c 003e 043a 0000     ..4.$...,.>.:...
 800be3c:	b108 8101 b0b0 8400 0000 0000 90ad 7fff     ................
 800be4c:	afb0 0016 10ff 0115 200b 08ce 0000 09aa     ......... ......
 800be5c:	b404 0109 0001 0000 0000 0000 908d 7fff     ................
 800be6c:	0884 01b1 b0b0 00b0 10ff 0119 020c 0806     ................
 800be7c:	0c01 1004 1c05 000a 0100 7f00 0000 007d     ..............}.
	...
 800be94:	b108 8101 b0b0 8400 0000 0000 b108 8101     ................
 800bea4:	b0b0 8400 0000 0000 9049 7fff afb0 0004     ........I.......
 800beb4:	10ff 011d 2612 3c04 3001 3404 7c01 cc50     .....&.<.0.4.|P.
 800bec4:	0001 01d4 0004 0100 0000 0000 0000 0000     ................
 800bed4:	9021 7fff 08a9 00b1 ffff 0001 b108 8101     !...............
 800bee4:	b0b0 8400 0000 0000 b108 8101 b0b0 8400     ................
 800bef4:	0000 0000                                   ....
