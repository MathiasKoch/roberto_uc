GAS LISTING /tmp/ccGjQLWk.s 			page 1


   1               		.file	"encoder.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/mathias/ROS/roberto_sim/src/uC_software/encoder/",100,0,2,.Ltext0
   8               		.stabs	"encoder.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccGjQLWk.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.8.2/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"/usr/lib/avr/include/stdlib.h",130,0,0,0
 103               		.stabs	"/usr/lib/gcc/avr/4.8.2/include/stddef.h",130,0,0,0
 104               		.stabs	"size_t:t(8,1)=(0,4)",128,0,212,0
 105               		.stabs	"wchar_t:t(8,2)=(0,1)",128,0,324,0
 106               		.stabn	162,0,0,0
 107               		.stabs	"div_t:t(7,1)=(7,2)=s4quot:(0,1),0,16;rem:(0,1),16,16;;",128,0,71,0
 108               		.stabs	"ldiv_t:t(7,3)=(7,4)=s8quot:(0,3),0,32;rem:(0,3),32,32;;",128,0,77,0
 109               		.stabs	"__compar_fn_t:t(7,5)=(7,6)=*(7,7)=f(0,1)",128,0,80,0
 110               		.stabn	162,0,0,0
 111               		.stabs	"TWI_slave.h",130,0,0,0
 112               		.stabs	"TWI_statusReg:T(9,1)=u1all:(0,11),0,8;:(9,2)=s1lastTransOK:(0,11),0,1;RxDataInBuf:(0,11),1
 113               		.stabn	162,0,0,0
 114               		.stabs	"AS5048:t(0,48)=(0,49)=s10raw_angle:(5,4),0,16;prev_angle:(5,4),16,16;dTicks:(5,3),32,16;dt
GAS LISTING /tmp/ccGjQLWk.s 			page 3


 115               		.stabs	"__vector_14:F(0,47)",36,0,41,__vector_14
 116               	.global	__vector_14
 117               		.type	__vector_14, @function
 118               	__vector_14:
 119               		.stabd	46,0,0
   1:encoder.c     **** #define F_CPU 16000000UL
   2:encoder.c     **** 
   3:encoder.c     **** #include <avr/io.h>
   4:encoder.c     **** #include <avr/interrupt.h>
   5:encoder.c     **** #include <util/delay.h>
   6:encoder.c     **** #include <stdbool.h>
   7:encoder.c     **** #include <stdlib.h>
   8:encoder.c     **** #include "TWI_slave.h"
   9:encoder.c     **** #include "AS5048A.h"
  10:encoder.c     **** 
  11:encoder.c     **** #define DIR_FORWARD 0
  12:encoder.c     **** #define DIR_REVERSE 1
  13:encoder.c     **** 
  14:encoder.c     **** #define COMP_POS 0x00
  15:encoder.c     **** #define COMP_NEG 0x01
  16:encoder.c     **** #define COMP_NONE 0x02
  17:encoder.c     **** 
  18:encoder.c     **** #define TICKS_PR_ROT 16384
  19:encoder.c     **** #define TIMERFREQ 1000
  20:encoder.c     **** 
  21:encoder.c     **** typedef struct{
  22:encoder.c     **** 	uint16_t raw_angle;
  23:encoder.c     **** 	uint16_t prev_angle;
  24:encoder.c     **** 	int16_t  dTicks;
  25:encoder.c     **** 	int16_t  dt; //ms
  26:encoder.c     **** 	uint16_t rotations;
  27:encoder.c     **** } AS5048;
  28:encoder.c     **** 
  29:encoder.c     **** 
  30:encoder.c     **** 
  31:encoder.c     **** unsigned char TWI_Act_On_Failure_In_Last_Transmission(unsigned char TWIerrorMsg);
  32:encoder.c     **** 
  33:encoder.c     **** volatile bool update = false;
  34:encoder.c     **** 
  35:encoder.c     **** //uint8_t retryCnt = 0;
  36:encoder.c     **** uint8_t loopCounter = 0;
  37:encoder.c     **** //uint16_t busyCounter = 0;
  38:encoder.c     **** 
  39:encoder.c     **** unsigned char messageBuf[TWI_BUFFER_SIZE];
  40:encoder.c     **** 
  41:encoder.c     **** ISR(TIMER0_COMPA_vect) {
 120               		.stabn	68,0,41,.LM0-.LFBB1
 121               	.LM0:
 122               	.LFBB1:
 123 0000 1F92      		push r1
 124 0002 0F92      		push r0
 125 0004 0FB6      		in r0,__SREG__
 126 0006 0F92      		push r0
 127 0008 1124      		clr __zero_reg__
 128 000a 8F93      		push r24
 129               	/* prologue: Signal */
 130               	/* frame size = 0 */
GAS LISTING /tmp/ccGjQLWk.s 			page 4


 131               	/* stack size = 4 */
 132               	.L__stack_usage = 4
  42:encoder.c     ****     update = true;
 133               		.stabn	68,0,42,.LM1-.LFBB1
 134               	.LM1:
 135 000c 81E0      		ldi r24,lo8(1)
 136 000e 8093 0000 		sts update,r24
 137               	/* epilogue start */
  43:encoder.c     **** }
 138               		.stabn	68,0,43,.LM2-.LFBB1
 139               	.LM2:
 140 0012 8F91      		pop r24
 141 0014 0F90      		pop r0
 142 0016 0FBE      		out __SREG__,r0
 143 0018 0F90      		pop r0
 144 001a 1F90      		pop r1
 145 001c 1895      		reti
 146               		.size	__vector_14, .-__vector_14
 147               	.Lscope1:
 148               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 149               		.stabd	78,0,0
 150               		.stabs	"togglePin:F(0,47)",36,0,45,togglePin
 151               	.global	togglePin
 152               		.type	togglePin, @function
 153               	togglePin:
 154               		.stabd	46,0,0
  44:encoder.c     **** 
  45:encoder.c     **** void togglePin(){
 155               		.stabn	68,0,45,.LM3-.LFBB2
 156               	.LM3:
 157               	.LFBB2:
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
  46:encoder.c     **** 	PORTD ^= (1 << 6);
 162               		.stabn	68,0,46,.LM4-.LFBB2
 163               	.LM4:
 164 001e 8BB1      		in r24,0xb
 165 0020 90E4      		ldi r25,lo8(64)
 166 0022 8927      		eor r24,r25
 167 0024 8BB9      		out 0xb,r24
 168 0026 0895      		ret
 169               		.size	togglePin, .-togglePin
 170               	.Lscope2:
 171               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 172               		.stabd	78,0,0
 173               		.stabs	"TWI_Act_On_Failure_In_Last_Transmission:F(0,11)",36,0,151,TWI_Act_On_Failure_In_Last_Trans
 174               		.stabs	"TWIerrorMsg:P(0,11)",64,0,151,28
 175               	.global	TWI_Act_On_Failure_In_Last_Transmission
 176               		.type	TWI_Act_On_Failure_In_Last_Transmission, @function
 177               	TWI_Act_On_Failure_In_Last_Transmission:
 178               		.stabd	46,0,0
  47:encoder.c     **** }
  48:encoder.c     **** 
  49:encoder.c     **** int main(int argc, const char* argv[]){
  50:encoder.c     **** 
GAS LISTING /tmp/ccGjQLWk.s 			page 5


  51:encoder.c     **** 
  52:encoder.c     **** 	// Setup address pins as input
  53:encoder.c     **** 	DDRD &= ~((1 << 2) | (1 << 3));		// PD2 & PD3
  54:encoder.c     **** 
  55:encoder.c     **** 	// PD6 as output for togglePin()
  56:encoder.c     **** 	DDRD |= (1 << 6);		// PD6
  57:encoder.c     **** 
  58:encoder.c     ****   	unsigned char TWI_slaveAddress = (0x10 | (PIND & 0x04) | (PIND & 0x08));
  59:encoder.c     **** 
  60:encoder.c     **** 
  61:encoder.c     **** 	// Initialise TWI module for slave operation. Include address and/or enable General Call.
  62:encoder.c     **** 	TWI_Slave_Initialise((unsigned char)((TWI_slaveAddress<<TWI_ADR_BITS) | (FALSE<<TWI_GEN_BIT))); 
  63:encoder.c     **** 
  64:encoder.c     **** 	AS5048A_Init();
  65:encoder.c     **** 
  66:encoder.c     **** 	AS5048 enc;
  67:encoder.c     **** 	enc.raw_angle = 0;
  68:encoder.c     **** 	enc.prev_angle = 0;
  69:encoder.c     **** 	enc.rotations = 0;
  70:encoder.c     **** 	enc.dt = 0;
  71:encoder.c     **** 	enc.dTicks = 0;
  72:encoder.c     **** 	
  73:encoder.c     ****     // start timer0 at 10 kHz
  74:encoder.c     ****     //16MHz/(8*(OCR0A+1))
  75:encoder.c     **** 	TCCR0A |= (1 << WGM01);
  76:encoder.c     ****     OCR0A = 199;		
  77:encoder.c     ****     TIMSK0=(1<<OCIE0A);
  78:encoder.c     ****     TCCR0B |= (1<<CS01);// prescale 8 // | (1<<CS00); 
  79:encoder.c     **** 	               
  80:encoder.c     **** 	sei();
  81:encoder.c     **** 	
  82:encoder.c     **** 	// Start the TWI transceiver to enable reseption of the first command from the TWI Master.
  83:encoder.c     **** 	messageBuf[0] = 0x00;
  84:encoder.c     **** 	messageBuf[1] = 0x00;
  85:encoder.c     **** 	messageBuf[2] = 0x00;
  86:encoder.c     **** 	messageBuf[3] = 0x00;
  87:encoder.c     **** 	//messageBuf[4] = 0x00;
  88:encoder.c     **** 	TWI_Start_Transceiver_With_Data(messageBuf, TWI_BUFFER_SIZE);
  89:encoder.c     **** 
  90:encoder.c     **** 	while(1){
  91:encoder.c     **** 		if(update){
  92:encoder.c     **** 			if (loopCounter++ >= 5){
  93:encoder.c     **** 				update = false;
  94:encoder.c     **** 				enc.raw_angle = AS5048A_getRawRotation();
  95:encoder.c     **** 				
  96:encoder.c     **** 				// Shift to 16 bit to match overflow from 14 bit encoder
  97:encoder.c     **** 				// Calculate speed and return to 14 bits again
  98:encoder.c     **** 				enc.dTicks += ((int16_t)((enc.raw_angle<<2) - (enc.prev_angle<<2)))>>2; //dTicks
  99:encoder.c     **** 				// Update lagged position
 100:encoder.c     **** 				enc.prev_angle = enc.raw_angle;
 101:encoder.c     **** 				enc.dt += 1;
 102:encoder.c     **** 				loopCounter = 0;
 103:encoder.c     **** 			}
 104:encoder.c     **** 
 105:encoder.c     **** 			// Check if the TWI Transceiver has completed an operation.
 106:encoder.c     **** 			if(!TWI_Transceiver_Busy()){
 107:encoder.c     **** 
GAS LISTING /tmp/ccGjQLWk.s 			page 6


 108:encoder.c     **** 				// Check if the last operation was successful
 109:encoder.c     **** 				if(TWI_statusReg.lastTransOK){
 110:encoder.c     **** 					// Check if the TWI Transceiver has already been started.
 111:encoder.c     **** 					// If not then restart it to prepare it for new receptions.             
 112:encoder.c     **** 					if(!TWI_Transceiver_Busy()){
 113:encoder.c     **** 						togglePin();
 114:encoder.c     **** 						int32_t speed = enc.dTicks/enc.dt;///enc.dt*10000;
 115:encoder.c     **** 
 116:encoder.c     **** 						messageBuf[0] = (speed  >> 24) & 0xFF;
 117:encoder.c     **** 						messageBuf[1] = (speed  >> 16) & 0xFF;
 118:encoder.c     **** 						messageBuf[2] = (speed  >> 8) & 0xFF;
 119:encoder.c     **** 						messageBuf[3] =  speed  & 0xFF;
 120:encoder.c     **** 						/*messageBuf[4] =  0;
 121:encoder.c     **** 						messageBuf[5] =  (busyCounter  >> 8) & 0xFF;
 122:encoder.c     **** 						messageBuf[6] =  busyCounter  & 0xFF;*/
 123:encoder.c     **** 
 124:encoder.c     **** 						TWI_Start_Transceiver_With_Data(messageBuf, TWI_BUFFER_SIZE);
 125:encoder.c     **** 						
 126:encoder.c     **** 						//if(TWI_statusReg.lastTransOK){
 127:encoder.c     **** 							// Reset counters
 128:encoder.c     **** 							enc.dTicks = 0;
 129:encoder.c     **** 							enc.dt = 0;
 130:encoder.c     **** 							//retryCnt = 0;
 131:encoder.c     **** 							//busyCounter = 0;
 132:encoder.c     **** 						//}
 133:encoder.c     **** 					}
 134:encoder.c     **** 				}else{ // Ends up here if the last operation completed unsuccessfully
 135:encoder.c     **** 					TWI_Act_On_Failure_In_Last_Transmission(TWI_Get_State_Info());
 136:encoder.c     **** 				}
 137:encoder.c     **** 			}/*else{
 138:encoder.c     **** 				busyCounter++;
 139:encoder.c     **** 			}*/
 140:encoder.c     **** 		}
 141:encoder.c     **** 		/*if(busyCounter >= 5000){
 142:encoder.c     **** 				
 143:encoder.c     **** 
 144:encoder.c     **** 			TWI_Slave_Initialise((unsigned char)((TWI_slaveAddress<<TWI_ADR_BITS) | (FALSE<<TWI_GEN_BIT)));
 145:encoder.c     **** 			busyCounter = 0;
 146:encoder.c     **** 		}*/
 147:encoder.c     **** 	}
 148:encoder.c     **** 	return 0;
 149:encoder.c     **** }
 150:encoder.c     **** 
 151:encoder.c     **** unsigned char TWI_Act_On_Failure_In_Last_Transmission(unsigned char TWIerrorMsg){
 179               		.stabn	68,0,151,.LM5-.LFBB3
 180               	.LM5:
 181               	.LFBB3:
 182 0028 CF93      		push r28
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 1 */
 186               	.L__stack_usage = 1
 187 002a C82F      		mov r28,r24
 152:encoder.c     **** 	// A failure has occurred, use TWIerrorMsg to determine the nature of the failure
 153:encoder.c     **** 	// and take appropriate actions.
 154:encoder.c     **** 	// Se header file for a list of possible failures messages.
 155:encoder.c     **** 
GAS LISTING /tmp/ccGjQLWk.s 			page 7


 156:encoder.c     **** 	// This very simple example puts the error code on PORTB and restarts the transceiver with
 157:encoder.c     **** 	// all the same data in the transmission buffers.
 158:encoder.c     ****   	//PORTB = TWIerrorMsg;
 159:encoder.c     **** 	//messageBuf[4] = ++retryCnt;
 160:encoder.c     ****   	TWI_Start_Transceiver_With_Data(messageBuf, TWI_BUFFER_SIZE);
 188               		.stabn	68,0,160,.LM6-.LFBB3
 189               	.LM6:
 190 002c 64E0      		ldi r22,lo8(4)
 191 002e 80E0      		ldi r24,lo8(messageBuf)
 192 0030 90E0      		ldi r25,hi8(messageBuf)
 193 0032 0E94 0000 		call TWI_Start_Transceiver_With_Data
 161:encoder.c     ****                     
 162:encoder.c     ****   	return TWIerrorMsg; 
 163:encoder.c     **** }...
 194               		.stabn	68,0,163,.LM7-.LFBB3
 195               	.LM7:
 196 0036 8C2F      		mov r24,r28
 197               	/* epilogue start */
 198 0038 CF91      		pop r28
 199 003a 0895      		ret
 200               		.size	TWI_Act_On_Failure_In_Last_Transmission, .-TWI_Act_On_Failure_In_Last_Transmission
 201               	.Lscope3:
 202               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 203               		.stabd	78,0,0
 204               		.section	.text.startup,"ax",@progbits
 205               		.stabs	"main:F(0,1)",36,0,49,main
 206               		.stabs	"argc:P(0,1)",64,0,49,24
 207               		.stabs	"argv:P(0,50)=*(0,51)=*(0,52)=k(0,2)",64,0,49,22
 208               	.global	main
 209               		.type	main, @function
 210               	main:
 211               		.stabd	46,0,0
  49:encoder.c     **** int main(int argc, const char* argv[]){
 212               		.stabn	68,0,49,.LM8-.LFBB4
 213               	.LM8:
 214               	.LFBB4:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
  53:encoder.c     **** 	DDRD &= ~((1 << 2) | (1 << 3));		// PD2 & PD3
 219               		.stabn	68,0,53,.LM9-.LFBB4
 220               	.LM9:
 221 0000 8AB1      		in r24,0xa
 222 0002 837F      		andi r24,lo8(-13)
 223 0004 8AB9      		out 0xa,r24
  56:encoder.c     **** 	DDRD |= (1 << 6);		// PD6
 224               		.stabn	68,0,56,.LM10-.LFBB4
 225               	.LM10:
 226 0006 569A      		sbi 0xa,6
  58:encoder.c     ****   	unsigned char TWI_slaveAddress = (0x10 | (PIND & 0x04) | (PIND & 0x08));
 227               		.stabn	68,0,58,.LM11-.LFBB4
 228               	.LM11:
 229 0008 89B1      		in r24,0x9
 230 000a 99B1      		in r25,0x9
 231 000c 8470      		andi r24,lo8(4)
 232 000e 9870      		andi r25,lo8(8)
GAS LISTING /tmp/ccGjQLWk.s 			page 8


 233 0010 892B      		or r24,r25
 234 0012 8061      		ori r24,lo8(16)
  62:encoder.c     **** 	TWI_Slave_Initialise((unsigned char)((TWI_slaveAddress<<TWI_ADR_BITS) | (FALSE<<TWI_GEN_BIT))); 
 235               		.stabn	68,0,62,.LM12-.LFBB4
 236               	.LM12:
 237 0014 880F      		lsl r24
 238 0016 0E94 0000 		call TWI_Slave_Initialise
  64:encoder.c     **** 	AS5048A_Init();
 239               		.stabn	68,0,64,.LM13-.LFBB4
 240               	.LM13:
 241 001a 0E94 0000 		call AS5048A_Init
  75:encoder.c     **** 	TCCR0A |= (1 << WGM01);
 242               		.stabn	68,0,75,.LM14-.LFBB4
 243               	.LM14:
 244 001e 84B5      		in r24,0x24
 245 0020 8260      		ori r24,lo8(2)
 246 0022 84BD      		out 0x24,r24
  76:encoder.c     ****     OCR0A = 199;		
 247               		.stabn	68,0,76,.LM15-.LFBB4
 248               	.LM15:
 249 0024 87EC      		ldi r24,lo8(-57)
 250 0026 87BD      		out 0x27,r24
  77:encoder.c     ****     TIMSK0=(1<<OCIE0A);
 251               		.stabn	68,0,77,.LM16-.LFBB4
 252               	.LM16:
 253 0028 82E0      		ldi r24,lo8(2)
 254 002a 8093 6E00 		sts 110,r24
  78:encoder.c     ****     TCCR0B |= (1<<CS01);// prescale 8 // | (1<<CS00); 
 255               		.stabn	68,0,78,.LM17-.LFBB4
 256               	.LM17:
 257 002e 85B5      		in r24,0x25
 258 0030 8260      		ori r24,lo8(2)
 259 0032 85BD      		out 0x25,r24
  80:encoder.c     **** 	sei();
 260               		.stabn	68,0,80,.LM18-.LFBB4
 261               	.LM18:
 262               	/* #APP */
 263               	 ;  80 "encoder.c" 1
 264 0034 7894      		sei
 265               	 ;  0 "" 2
  83:encoder.c     **** 	messageBuf[0] = 0x00;
 266               		.stabn	68,0,83,.LM19-.LFBB4
 267               	.LM19:
 268               	/* #NOAPP */
 269 0036 1092 0000 		sts messageBuf,__zero_reg__
  84:encoder.c     **** 	messageBuf[1] = 0x00;
 270               		.stabn	68,0,84,.LM20-.LFBB4
 271               	.LM20:
 272 003a 1092 0000 		sts messageBuf+1,__zero_reg__
  85:encoder.c     **** 	messageBuf[2] = 0x00;
 273               		.stabn	68,0,85,.LM21-.LFBB4
 274               	.LM21:
 275 003e 1092 0000 		sts messageBuf+2,__zero_reg__
  86:encoder.c     **** 	messageBuf[3] = 0x00;
 276               		.stabn	68,0,86,.LM22-.LFBB4
 277               	.LM22:
 278 0042 1092 0000 		sts messageBuf+3,__zero_reg__
GAS LISTING /tmp/ccGjQLWk.s 			page 9


  88:encoder.c     **** 	TWI_Start_Transceiver_With_Data(messageBuf, TWI_BUFFER_SIZE);
 279               		.stabn	68,0,88,.LM23-.LFBB4
 280               	.LM23:
 281 0046 64E0      		ldi r22,lo8(4)
 282 0048 80E0      		ldi r24,lo8(messageBuf)
 283 004a 90E0      		ldi r25,hi8(messageBuf)
 284 004c 0E94 0000 		call TWI_Start_Transceiver_With_Data
  70:encoder.c     **** 	enc.dt = 0;
 285               		.stabn	68,0,70,.LM24-.LFBB4
 286               	.LM24:
 287 0050 00E0      		ldi r16,0
 288 0052 10E0      		ldi r17,0
  71:encoder.c     **** 	enc.dTicks = 0;
 289               		.stabn	68,0,71,.LM25-.LFBB4
 290               	.LM25:
 291 0054 E12C      		mov r14,__zero_reg__
 292 0056 F12C      		mov r15,__zero_reg__
  68:encoder.c     **** 	enc.prev_angle = 0;
 293               		.stabn	68,0,68,.LM26-.LFBB4
 294               	.LM26:
 295 0058 C0E0      		ldi r28,0
 296 005a D0E0      		ldi r29,0
 297               	.L7:
  91:encoder.c     **** 		if(update){
 298               		.stabn	68,0,91,.LM27-.LFBB4
 299               	.LM27:
 300 005c 8091 0000 		lds r24,update
 301 0060 8823      		tst r24
 302 0062 01F0      		breq .L7
  92:encoder.c     **** 			if (loopCounter++ >= 5){
 303               		.stabn	68,0,92,.LM28-.LFBB4
 304               	.LM28:
 305 0064 8091 0000 		lds r24,loopCounter
 306 0068 91E0      		ldi r25,lo8(1)
 307 006a 980F      		add r25,r24
 308 006c 9093 0000 		sts loopCounter,r25
 309 0070 8530      		cpi r24,lo8(5)
 310 0072 00F0      		brlo .L8
  93:encoder.c     **** 				update = false;
 311               		.stabn	68,0,93,.LM29-.LFBB4
 312               	.LM29:
 313 0074 1092 0000 		sts update,__zero_reg__
  94:encoder.c     **** 				enc.raw_angle = AS5048A_getRawRotation();
 314               		.stabn	68,0,94,.LM30-.LFBB4
 315               	.LM30:
 316 0078 0E94 0000 		call AS5048A_getRawRotation
  98:encoder.c     **** 				enc.dTicks += ((int16_t)((enc.raw_angle<<2) - (enc.prev_angle<<2)))>>2; //dTicks
 317               		.stabn	68,0,98,.LM31-.LFBB4
 318               	.LM31:
 319 007c 9C01      		movw r18,r24
 320 007e 2C1B      		sub r18,r28
 321 0080 3D0B      		sbc r19,r29
 322 0082 220F      		lsl r18
 323 0084 331F      		rol r19
 324 0086 220F      		lsl r18
 325 0088 331F      		rol r19
 326 008a 3595      		asr r19
GAS LISTING /tmp/ccGjQLWk.s 			page 10


 327 008c 2795      		ror r18
 328 008e 3595      		asr r19
 329 0090 2795      		ror r18
 330 0092 E20E      		add r14,r18
 331 0094 F31E      		adc r15,r19
 101:encoder.c     **** 				enc.dt += 1;
 332               		.stabn	68,0,101,.LM32-.LFBB4
 333               	.LM32:
 334 0096 0F5F      		subi r16,-1
 335 0098 1F4F      		sbci r17,-1
 102:encoder.c     **** 				loopCounter = 0;
 336               		.stabn	68,0,102,.LM33-.LFBB4
 337               	.LM33:
 338 009a 1092 0000 		sts loopCounter,__zero_reg__
 100:encoder.c     **** 				enc.prev_angle = enc.raw_angle;
 339               		.stabn	68,0,100,.LM34-.LFBB4
 340               	.LM34:
 341 009e EC01      		movw r28,r24
 342               	.L8:
 106:encoder.c     **** 			if(!TWI_Transceiver_Busy()){
 343               		.stabn	68,0,106,.LM35-.LFBB4
 344               	.LM35:
 345 00a0 0E94 0000 		call TWI_Transceiver_Busy
 346 00a4 8111      		cpse r24,__zero_reg__
 347 00a6 00C0      		rjmp .L7
 109:encoder.c     **** 				if(TWI_statusReg.lastTransOK){
 348               		.stabn	68,0,109,.LM36-.LFBB4
 349               	.LM36:
 350 00a8 8091 0000 		lds r24,TWI_statusReg
 351 00ac 80FF      		sbrs r24,0
 352 00ae 00C0      		rjmp .L10
 112:encoder.c     **** 					if(!TWI_Transceiver_Busy()){
 353               		.stabn	68,0,112,.LM37-.LFBB4
 354               	.LM37:
 355 00b0 0E94 0000 		call TWI_Transceiver_Busy
 356 00b4 8111      		cpse r24,__zero_reg__
 357 00b6 00C0      		rjmp .L7
 358               	.LBB2:
 113:encoder.c     **** 						togglePin();
 359               		.stabn	68,0,113,.LM38-.LFBB4
 360               	.LM38:
 361 00b8 0E94 0000 		call togglePin
 114:encoder.c     **** 						int32_t speed = enc.dTicks/enc.dt;///enc.dt*10000;
 362               		.stabn	68,0,114,.LM39-.LFBB4
 363               	.LM39:
 364 00bc C701      		movw r24,r14
 365 00be B801      		movw r22,r16
 366 00c0 0E94 0000 		call __divmodhi4
 367 00c4 9B01      		movw r18,r22
 368 00c6 CB01      		movw r24,r22
 369 00c8 AA27      		clr r26
 370 00ca 97FD      		sbrc r25,7
 371 00cc A095      		com r26
 372 00ce BA2F      		mov r27,r26
 116:encoder.c     **** 						messageBuf[0] = (speed  >> 24) & 0xFF;
 373               		.stabn	68,0,116,.LM40-.LFBB4
 374               	.LM40:
GAS LISTING /tmp/ccGjQLWk.s 			page 11


 375 00d0 B093 0000 		sts messageBuf,r27
 117:encoder.c     **** 						messageBuf[1] = (speed  >> 16) & 0xFF;
 376               		.stabn	68,0,117,.LM41-.LFBB4
 377               	.LM41:
 378 00d4 AD01      		movw r20,r26
 379 00d6 7727      		clr r23
 380 00d8 57FD      		sbrc r21,7
 381 00da 7095      		com r23
 382 00dc 672F      		mov r22,r23
 383 00de 4093 0000 		sts messageBuf+1,r20
 118:encoder.c     **** 						messageBuf[2] = (speed  >> 8) & 0xFF;
 384               		.stabn	68,0,118,.LM42-.LFBB4
 385               	.LM42:
 386 00e2 9093 0000 		sts messageBuf+2,r25
 119:encoder.c     **** 						messageBuf[3] =  speed  & 0xFF;
 387               		.stabn	68,0,119,.LM43-.LFBB4
 388               	.LM43:
 389 00e6 2093 0000 		sts messageBuf+3,r18
 124:encoder.c     **** 						TWI_Start_Transceiver_With_Data(messageBuf, TWI_BUFFER_SIZE);
 390               		.stabn	68,0,124,.LM44-.LFBB4
 391               	.LM44:
 392 00ea 64E0      		ldi r22,lo8(4)
 393 00ec 80E0      		ldi r24,lo8(messageBuf)
 394 00ee 90E0      		ldi r25,hi8(messageBuf)
 395 00f0 0E94 0000 		call TWI_Start_Transceiver_With_Data
 129:encoder.c     **** 							enc.dt = 0;
 396               		.stabn	68,0,129,.LM45-.LFBB4
 397               	.LM45:
 398 00f4 00E0      		ldi r16,0
 399 00f6 10E0      		ldi r17,0
 128:encoder.c     **** 							enc.dTicks = 0;
 400               		.stabn	68,0,128,.LM46-.LFBB4
 401               	.LM46:
 402 00f8 E12C      		mov r14,__zero_reg__
 403 00fa F12C      		mov r15,__zero_reg__
 404 00fc 00C0      		rjmp .L7
 405               	.L10:
 406               	.LBE2:
 135:encoder.c     **** 					TWI_Act_On_Failure_In_Last_Transmission(TWI_Get_State_Info());
 407               		.stabn	68,0,135,.LM47-.LFBB4
 408               	.LM47:
 409 00fe 0E94 0000 		call TWI_Get_State_Info
 410 0102 0E94 0000 		call TWI_Act_On_Failure_In_Last_Transmission
 411 0106 00C0      		rjmp .L7
 412               		.size	main, .-main
 413               		.stabs	"speed:r(5,5)",64,0,114,24
 414               		.stabn	192,0,0,.LBB2-.LFBB4
 415               		.stabn	224,0,0,.LBE2-.LFBB4
 416               	.Lscope4:
 417               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 418               		.stabd	78,0,0
 419               		.comm	messageBuf,4,1
 420               	.global	loopCounter
 421               		.section .bss
 422               		.type	loopCounter, @object
 423               		.size	loopCounter, 1
 424               	loopCounter:
GAS LISTING /tmp/ccGjQLWk.s 			page 12


 425 0000 00        		.zero	1
 426               	.global	update
 427               		.type	update, @object
 428               		.size	update, 1
 429               	update:
 430 0001 00        		.zero	1
 431               		.comm	position,2,1
 432               		.comm	errorFlag,1,1
 433               		.stabs	"errorFlag:G(5,2)",32,0,31,0
 434               		.stabs	"position:G(5,4)",32,0,33,0
 435               		.stabs	"update:G(0,53)=B(0,54)=@s8;-16;",32,0,33,0
 436               		.stabs	"loopCounter:G(5,2)",32,0,36,0
 437               		.stabs	"messageBuf:G(0,55)=ar(0,56)=r(0,56);0;0177777;;0;3;(0,11)",32,0,39,0
 438               		.text
 439               		.stabs	"",100,0,0,.Letext0
 440               	.Letext0:
 441               		.ident	"GCC: (GNU) 4.8.2"
 442               	.global __do_clear_bss
GAS LISTING /tmp/ccGjQLWk.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 encoder.c
     /tmp/ccGjQLWk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGjQLWk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGjQLWk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGjQLWk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGjQLWk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGjQLWk.s:118    .text:0000000000000000 __vector_14
     /tmp/ccGjQLWk.s:429    .bss:0000000000000001 update
     /tmp/ccGjQLWk.s:153    .text:000000000000001e togglePin
     /tmp/ccGjQLWk.s:177    .text:0000000000000028 TWI_Act_On_Failure_In_Last_Transmission
                            *COM*:0000000000000004 messageBuf
     /tmp/ccGjQLWk.s:210    .text.startup:0000000000000000 main
     /tmp/ccGjQLWk.s:424    .bss:0000000000000000 loopCounter
                            *COM*:0000000000000002 position
                            *COM*:0000000000000001 errorFlag

UNDEFINED SYMBOLS
TWI_Start_Transceiver_With_Data
TWI_Slave_Initialise
AS5048A_Init
AS5048A_getRawRotation
TWI_Transceiver_Busy
TWI_statusReg
__divmodhi4
TWI_Get_State_Info
__do_clear_bss
