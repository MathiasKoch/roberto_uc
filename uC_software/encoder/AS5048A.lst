GAS LISTING /tmp/ccfBTpsL.s 			page 1


   1               		.file	"AS5048A.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/emil/Roberto/roberto_sim/src/uC_software/encoder/",100,0,2,.Ltext0
   8               		.stabs	"AS5048A.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccfBTpsL.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.8.2/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"AS5048A_Init:F(0,47)",36,0,10,AS5048A_Init
 103               	.global	AS5048A_Init
 104               		.type	AS5048A_Init, @function
 105               	AS5048A_Init:
 106               		.stabd	46,0,0
   1:AS5048A.c     **** 
   2:AS5048A.c     **** #include <avr/io.h>
   3:AS5048A.c     **** #include "AS5048A.h"
   4:AS5048A.c     **** 
   5:AS5048A.c     **** 
   6:AS5048A.c     **** /**
   7:AS5048A.c     ****  * Initialiser
   8:AS5048A.c     ****  * Sets up the SPI interface
GAS LISTING /tmp/ccfBTpsL.s 			page 3


   9:AS5048A.c     ****  */
  10:AS5048A.c     **** void AS5048A_Init(void){
 107               		.stabn	68,0,10,.LM0-.LFBB1
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  11:AS5048A.c     **** 
  12:AS5048A.c     **** 	DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SS)|(1<<DD_SCK));
 114               		.stabn	68,0,12,.LM1-.LFBB1
 115               	.LM1:
 116 0000 84B1      		in r24,0x4
 117 0002 837C      		andi r24,lo8(-61)
 118 0004 84B9      		out 0x4,r24
  13:AS5048A.c     ****     // Define the following pins as output
  14:AS5048A.c     ****     DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
 119               		.stabn	68,0,14,.LM2-.LFBB1
 120               	.LM2:
 121 0006 84B1      		in r24,0x4
 122 0008 8C62      		ori r24,lo8(44)
 123 000a 84B9      		out 0x4,r24
  15:AS5048A.c     **** 
  16:AS5048A.c     ****     
  17:AS5048A.c     ****     SPCR = ((1<<SPE)|               // SPI Enable
 124               		.stabn	68,0,17,.LM3-.LFBB1
 125               	.LM3:
 126 000c 85E5      		ldi r24,lo8(85)
 127 000e 8CBD      		out 0x2c,r24
  18:AS5048A.c     ****             (0<<SPIE)|              // SPI Interupt Enable
  19:AS5048A.c     ****             (0<<DORD)|              // Data Order (0:MSB first / 1:LSB first)
  20:AS5048A.c     ****             (1<<MSTR)|              // Master/Slave select   
  21:AS5048A.c     ****             (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
  22:AS5048A.c     ****             (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
  23:AS5048A.c     ****             (1<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)
  24:AS5048A.c     **** 
  25:AS5048A.c     ****     SPSR = (1<<SPI2X);              // Double Clock Rate
 128               		.stabn	68,0,25,.LM4-.LFBB1
 129               	.LM4:
 130 0010 81E0      		ldi r24,lo8(1)
 131 0012 8DBD      		out 0x2d,r24
 132 0014 0895      		ret
 133               		.size	AS5048A_Init, .-AS5048A_Init
 134               	.Lscope1:
 135               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 136               		.stabd	78,0,0
 137               		.stabs	"AS5048A_close:F(0,47)",36,0,31,AS5048A_close
 138               	.global	AS5048A_close
 139               		.type	AS5048A_close, @function
 140               	AS5048A_close:
 141               		.stabd	46,0,0
  26:AS5048A.c     **** }
  27:AS5048A.c     **** 
  28:AS5048A.c     **** /**
  29:AS5048A.c     ****  * Closes the SPI connection
  30:AS5048A.c     ****  */
GAS LISTING /tmp/ccfBTpsL.s 			page 4


  31:AS5048A.c     **** void AS5048A_close(void){
 142               		.stabn	68,0,31,.LM5-.LFBB2
 143               	.LM5:
 144               	.LFBB2:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
  32:AS5048A.c     **** 	SPCR = (0<<SPE);
 149               		.stabn	68,0,32,.LM6-.LFBB2
 150               	.LM6:
 151 0016 1CBC      		out 0x2c,__zero_reg__
 152 0018 0895      		ret
 153               		.size	AS5048A_close, .-AS5048A_close
 154               	.Lscope2:
 155               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 156               		.stabd	78,0,0
 157               		.stabs	"AS5048A_spiCalcEvenParity:F(5,2)",36,0,38,AS5048A_spiCalcEvenParity
 158               		.stabs	"value:P(5,4)",64,0,38,24
 159               	.global	AS5048A_spiCalcEvenParity
 160               		.type	AS5048A_spiCalcEvenParity, @function
 161               	AS5048A_spiCalcEvenParity:
 162               		.stabd	46,0,0
  33:AS5048A.c     **** }
  34:AS5048A.c     **** 
  35:AS5048A.c     **** /**
  36:AS5048A.c     ****  * Utility function used to calculate even parity of uint16_t
  37:AS5048A.c     ****  */
  38:AS5048A.c     **** uint8_t AS5048A_spiCalcEvenParity(uint16_t value){
 163               		.stabn	68,0,38,.LM7-.LFBB3
 164               	.LM7:
 165               	.LFBB3:
 166               	/* prologue: function */
 167               	/* frame size = 0 */
 168               	/* stack size = 0 */
 169               	.L__stack_usage = 0
 170               		.stabn	68,0,38,.LM8-.LFBB3
 171               	.LM8:
 172 001a 30E1      		ldi r19,lo8(16)
  39:AS5048A.c     **** 	uint8_t cnt = 0;
 173               		.stabn	68,0,39,.LM9-.LFBB3
 174               	.LM9:
 175 001c 20E0      		ldi r18,0
 176               	.L6:
  40:AS5048A.c     **** 	uint8_t i;
  41:AS5048A.c     **** 
  42:AS5048A.c     **** 	for (i = 0; i < 16; i++){
  43:AS5048A.c     **** 		if (value & 0x1)
 177               		.stabn	68,0,43,.LM10-.LFBB3
 178               	.LM10:
 179 001e 80FD      		sbrc r24,0
  44:AS5048A.c     **** 			cnt++;
 180               		.stabn	68,0,44,.LM11-.LFBB3
 181               	.LM11:
 182 0020 2F5F      		subi r18,lo8(-(1))
 183               	.L4:
  45:AS5048A.c     **** 		value >>= 1;
GAS LISTING /tmp/ccfBTpsL.s 			page 5


 184               		.stabn	68,0,45,.LM12-.LFBB3
 185               	.LM12:
 186 0022 9695      		lsr r25
 187 0024 8795      		ror r24
 188 0026 3150      		subi r19,lo8(-(-1))
  42:AS5048A.c     **** 	for (i = 0; i < 16; i++){
 189               		.stabn	68,0,42,.LM13-.LFBB3
 190               	.LM13:
 191 0028 01F4      		brne .L6
  46:AS5048A.c     **** 	}
  47:AS5048A.c     **** 	return cnt & 0x1;
  48:AS5048A.c     **** }
 192               		.stabn	68,0,48,.LM14-.LFBB3
 193               	.LM14:
 194 002a 822F      		mov r24,r18
 195 002c 8170      		andi r24,lo8(1)
 196 002e 0895      		ret
 197               		.size	AS5048A_spiCalcEvenParity, .-AS5048A_spiCalcEvenParity
 198               		.stabs	"cnt:r(5,2)",64,0,39,18
 199               		.stabn	192,0,0,.LFBB3-.LFBB3
 200               		.stabn	224,0,0,.Lscope3-.LFBB3
 201               	.Lscope3:
 202               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 203               		.stabd	78,0,0
 204               		.stabs	"AS5048A_setZeroPosition:F(0,47)",36,0,104,AS5048A_setZeroPosition
 205               		.stabs	"arg_position:P(5,4)",64,0,104,24
 206               	.global	AS5048A_setZeroPosition
 207               		.type	AS5048A_setZeroPosition, @function
 208               	AS5048A_setZeroPosition:
 209               		.stabd	46,0,0
  49:AS5048A.c     **** 
  50:AS5048A.c     **** 
  51:AS5048A.c     **** 
  52:AS5048A.c     **** /**
  53:AS5048A.c     ****  * Get the rotation of the sensor relative to the zero position.
  54:AS5048A.c     ****  *
  55:AS5048A.c     ****  * @return {int} between -2^13 and 2^13
  56:AS5048A.c     ****  */
  57:AS5048A.c     **** int AS5048A_getRotation(void){
  58:AS5048A.c     **** 	uint16_t data;
  59:AS5048A.c     **** 	int rotation;
  60:AS5048A.c     **** 
  61:AS5048A.c     **** 	data = AS5048A_getRawRotation();
  62:AS5048A.c     **** 	rotation = (int)data - (int)position;
  63:AS5048A.c     **** 	if(rotation > 8191) 
  64:AS5048A.c     **** 		rotation = -((0x3FFF)-rotation); //more than -180
  65:AS5048A.c     **** 	//if(rotation < -0x1FFF) rotation = rotation+0x3FFF;
  66:AS5048A.c     **** 
  67:AS5048A.c     **** 	return rotation;
  68:AS5048A.c     **** }
  69:AS5048A.c     **** 
  70:AS5048A.c     **** /**
  71:AS5048A.c     ****  * Returns the raw angle directly from the sensor
  72:AS5048A.c     ****  */
  73:AS5048A.c     **** uint16_t AS5048A_getRawRotation(void){
  74:AS5048A.c     **** 	return AS5048A_read(AS5048A_ANGLE);
  75:AS5048A.c     **** }
GAS LISTING /tmp/ccfBTpsL.s 			page 6


  76:AS5048A.c     **** 
  77:AS5048A.c     **** /**
  78:AS5048A.c     ****  * returns the value of the state register
  79:AS5048A.c     ****  * @return 16 bit uint16_t containing flags
  80:AS5048A.c     ****  */
  81:AS5048A.c     **** uint16_t AS5048A_getState(void){
  82:AS5048A.c     **** 	return AS5048A_read(AS5048A_DIAG_AGC);
  83:AS5048A.c     **** }
  84:AS5048A.c     **** 
  85:AS5048A.c     **** /**
  86:AS5048A.c     ****  * Returns the value used for Automatic Gain Control (Part of diagnostic
  87:AS5048A.c     ****  * register)
  88:AS5048A.c     ****  */
  89:AS5048A.c     **** uint8_t AS5048A_getGain(void){
  90:AS5048A.c     **** 	uint16_t data = AS5048A_getState();
  91:AS5048A.c     **** 	return (uint8_t) data & 0xFF;
  92:AS5048A.c     **** }
  93:AS5048A.c     **** 
  94:AS5048A.c     **** /*
  95:AS5048A.c     ****  * Get and clear the error register by reading it
  96:AS5048A.c     ****  */
  97:AS5048A.c     **** uint16_t AS5048A_getErrors(void){
  98:AS5048A.c     **** 	return AS5048A_read(AS5048A_CLEAR_ERROR_FLAG);
  99:AS5048A.c     **** }
 100:AS5048A.c     **** 
 101:AS5048A.c     **** /*
 102:AS5048A.c     ****  * Set the zero position
 103:AS5048A.c     ****  */
 104:AS5048A.c     **** void AS5048A_setZeroPosition(uint16_t arg_position){
 210               		.stabn	68,0,104,.LM15-.LFBB4
 211               	.LM15:
 212               	.LFBB4:
 213               	/* prologue: function */
 214               	/* frame size = 0 */
 215               	/* stack size = 0 */
 216               	.L__stack_usage = 0
 105:AS5048A.c     **** 	position = arg_position % 0x3FFF;
 217               		.stabn	68,0,105,.LM16-.LFBB4
 218               	.LM16:
 219 0030 6FEF      		ldi r22,lo8(-1)
 220 0032 7FE3      		ldi r23,lo8(63)
 221 0034 0E94 0000 		call __udivmodhi4
 222 0038 9093 0000 		sts position+1,r25
 223 003c 8093 0000 		sts position,r24
 224 0040 0895      		ret
 225               		.size	AS5048A_setZeroPosition, .-AS5048A_setZeroPosition
 226               	.Lscope4:
 227               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 228               		.stabd	78,0,0
 229               		.stabs	"AS5048A_getZeroPosition:F(5,4)",36,0,111,AS5048A_getZeroPosition
 230               	.global	AS5048A_getZeroPosition
 231               		.type	AS5048A_getZeroPosition, @function
 232               	AS5048A_getZeroPosition:
 233               		.stabd	46,0,0
 106:AS5048A.c     **** }
 107:AS5048A.c     **** 
 108:AS5048A.c     **** /*
GAS LISTING /tmp/ccfBTpsL.s 			page 7


 109:AS5048A.c     ****  * Returns the current zero position
 110:AS5048A.c     ****  */
 111:AS5048A.c     **** uint16_t AS5048A_getZeroPosition(void){
 234               		.stabn	68,0,111,.LM17-.LFBB5
 235               	.LM17:
 236               	.LFBB5:
 237               	/* prologue: function */
 238               	/* frame size = 0 */
 239               	/* stack size = 0 */
 240               	.L__stack_usage = 0
 112:AS5048A.c     **** 	return position;
 113:AS5048A.c     **** }
 241               		.stabn	68,0,113,.LM18-.LFBB5
 242               	.LM18:
 243 0042 8091 0000 		lds r24,position
 244 0046 9091 0000 		lds r25,position+1
 245 004a 0895      		ret
 246               		.size	AS5048A_getZeroPosition, .-AS5048A_getZeroPosition
 247               	.Lscope5:
 248               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 249               		.stabd	78,0,0
 250               		.stabs	"AS5048A_error:F(5,2)",36,0,118,AS5048A_error
 251               	.global	AS5048A_error
 252               		.type	AS5048A_error, @function
 253               	AS5048A_error:
 254               		.stabd	46,0,0
 114:AS5048A.c     **** 
 115:AS5048A.c     **** /*
 116:AS5048A.c     ****  * Check if an error has been encountered.
 117:AS5048A.c     ****  */
 118:AS5048A.c     **** uint8_t AS5048A_error(void){
 255               		.stabn	68,0,118,.LM19-.LFBB6
 256               	.LM19:
 257               	.LFBB6:
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 119:AS5048A.c     **** 	return errorFlag;
 120:AS5048A.c     **** }
 262               		.stabn	68,0,120,.LM20-.LFBB6
 263               	.LM20:
 264 004c 8091 0000 		lds r24,errorFlag
 265 0050 0895      		ret
 266               		.size	AS5048A_error, .-AS5048A_error
 267               	.Lscope6:
 268               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 269               		.stabd	78,0,0
 270               		.stabs	"spi_fast_shift:F(5,2)",36,0,204,spi_fast_shift
 271               		.stabs	"data:P(5,2)",64,0,204,24
 272               	.global	spi_fast_shift
 273               		.type	spi_fast_shift, @function
 274               	spi_fast_shift:
 275               		.stabd	46,0,0
 121:AS5048A.c     **** 
 122:AS5048A.c     **** /*
 123:AS5048A.c     ****  * Read a register from the sensor
GAS LISTING /tmp/ccfBTpsL.s 			page 8


 124:AS5048A.c     ****  * Takes the address of the register as a 16 bit uint16_t
 125:AS5048A.c     ****  * Returns the value of the register
 126:AS5048A.c     ****  */
 127:AS5048A.c     **** uint16_t AS5048A_read(uint16_t registerAddress){
 128:AS5048A.c     **** 
 129:AS5048A.c     **** 	//Send the command
 130:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 131:AS5048A.c     **** 	spi_fast_shift((registerAddress >> 8) & 0xFF);
 132:AS5048A.c     **** 	spi_fast_shift(registerAddress & 0xFF);
 133:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 134:AS5048A.c     **** 
 135:AS5048A.c     **** 	//Now read the response
 136:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);;
 137:AS5048A.c     **** 	uint8_t left_byte = spi_fast_shift(0xFF);
 138:AS5048A.c     **** 	uint8_t right_byte = spi_fast_shift(0xFF);
 139:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 140:AS5048A.c     **** 
 141:AS5048A.c     **** 
 142:AS5048A.c     **** 	//Check if the error bit is set
 143:AS5048A.c     **** 	/*if (left_byte & 0x40) {
 144:AS5048A.c     **** 		errorFlag = TRUE;
 145:AS5048A.c     **** 	}else{
 146:AS5048A.c     **** 		errorFlag = FALSE;
 147:AS5048A.c     **** 	}*/
 148:AS5048A.c     **** 
 149:AS5048A.c     **** 	//Return the data, stripping the parity and error bits
 150:AS5048A.c     **** 	return (((left_byte & 0xFF) << 8 ) | (right_byte & 0xFF)) & ~0xC000;
 151:AS5048A.c     **** }
 152:AS5048A.c     **** 
 153:AS5048A.c     **** 
 154:AS5048A.c     **** /*
 155:AS5048A.c     ****  * Write to a register
 156:AS5048A.c     ****  * Takes the 16-bit  address of the target register and the 16 bit uint16_t of data
 157:AS5048A.c     ****  * to be written to that register
 158:AS5048A.c     ****  * Returns the value of the register after the write has been performed. This
 159:AS5048A.c     ****  * is read back from the sensor to ensure a sucessful write.
 160:AS5048A.c     ****  */
 161:AS5048A.c     **** uint16_t AS5048A_write(uint16_t registerAddress, uint16_t data) {
 162:AS5048A.c     **** 
 163:AS5048A.c     **** 	uint16_t command = 0b0000000000000000; // PAR=0 R/W=W
 164:AS5048A.c     **** 	command |= registerAddress;
 165:AS5048A.c     **** 
 166:AS5048A.c     **** 	//Add a parity bit on the the MSB
 167:AS5048A.c     **** 	command |= ((uint16_t)AS5048A_spiCalcEvenParity(command)<<15);
 168:AS5048A.c     **** 
 169:AS5048A.c     **** 	//Split the command into two uint8_ts
 170:AS5048A.c     **** 	uint8_t right_byte = command & 0xFF;
 171:AS5048A.c     **** 	uint8_t left_byte = ( command >> 8 ) & 0xFF;
 172:AS5048A.c     **** 
 173:AS5048A.c     **** 	//Start the write command with the target address
 174:AS5048A.c     **** 	
 175:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 176:AS5048A.c     **** 	spi_fast_shift(left_byte);
 177:AS5048A.c     **** 	spi_fast_shift(right_byte);
 178:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 179:AS5048A.c     **** 
 180:AS5048A.c     **** 	uint16_t dataToSend = 0b0000000000000000;
GAS LISTING /tmp/ccfBTpsL.s 			page 9


 181:AS5048A.c     **** 	dataToSend |= data;
 182:AS5048A.c     **** 
 183:AS5048A.c     **** 	//Craft another packet including the data and parity
 184:AS5048A.c     **** 	dataToSend |= ((uint16_t)AS5048A_spiCalcEvenParity(dataToSend)<<15);
 185:AS5048A.c     **** 	left_byte = (dataToSend >> 8) & 0xFF;
 186:AS5048A.c     **** 	right_byte = dataToSend & 0xFF;
 187:AS5048A.c     **** 
 188:AS5048A.c     **** 	//Now send the data packet
 189:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 190:AS5048A.c     **** 	spi_fast_shift(left_byte);
 191:AS5048A.c     **** 	spi_fast_shift(right_byte);
 192:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 193:AS5048A.c     **** 
 194:AS5048A.c     **** 	//Send a NOP to get the new data in the register
 195:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 196:AS5048A.c     **** 	left_byte =-spi_fast_shift(0xFF);
 197:AS5048A.c     **** 	right_byte = spi_fast_shift(0xFF);
 198:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 199:AS5048A.c     **** 
 200:AS5048A.c     **** 	//Return the data, stripping the parity and error bits
 201:AS5048A.c     **** 	return (( ( left_byte & 0xFF ) << 8 ) | ( right_byte & 0xFF )) & ~0xC000;
 202:AS5048A.c     **** }
 203:AS5048A.c     **** 
 204:AS5048A.c     **** uint8_t spi_fast_shift (uint8_t data){
 276               		.stabn	68,0,204,.LM21-.LFBB7
 277               	.LM21:
 278               	.LFBB7:
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 0 */
 282               	.L__stack_usage = 0
 205:AS5048A.c     ****     SPDR = data;
 283               		.stabn	68,0,205,.LM22-.LFBB7
 284               	.LM22:
 285 0052 8EBD      		out 0x2e,r24
 286               	.L16:
 206:AS5048A.c     ****     while((SPSR & (1<<SPIF))==0);
 287               		.stabn	68,0,206,.LM23-.LFBB7
 288               	.LM23:
 289 0054 0DB4      		in __tmp_reg__,0x2d
 290 0056 07FE      		sbrs __tmp_reg__,7
 291 0058 00C0      		rjmp .L16
 207:AS5048A.c     ****     return SPDR;
 292               		.stabn	68,0,207,.LM24-.LFBB7
 293               	.LM24:
 294 005a 8EB5      		in r24,0x2e
 208:AS5048A.c     **** }
 295               		.stabn	68,0,208,.LM25-.LFBB7
 296               	.LM25:
 297 005c 0895      		ret
 298               		.size	spi_fast_shift, .-spi_fast_shift
 299               	.Lscope7:
 300               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 301               		.stabd	78,0,0
 302               		.stabs	"AS5048A_read:F(5,4)",36,0,127,AS5048A_read
 303               	.global	AS5048A_read
 304               		.type	AS5048A_read, @function
GAS LISTING /tmp/ccfBTpsL.s 			page 10


 305               	AS5048A_read:
 306               		.stabd	46,0,0
 127:AS5048A.c     **** uint16_t AS5048A_read(uint16_t registerAddress){
 307               		.stabn	68,0,127,.LM26-.LFBB8
 308               	.LM26:
 309               	.LFBB8:
 310 005e CF93      		push r28
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 1 */
 314               	.L__stack_usage = 1
 315 0060 C82F      		mov r28,r24
 130:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 316               		.stabn	68,0,130,.LM27-.LFBB8
 317               	.LM27:
 318 0062 2A98      		cbi 0x5,2
 131:AS5048A.c     **** 	spi_fast_shift((registerAddress >> 8) & 0xFF);
 319               		.stabn	68,0,131,.LM28-.LFBB8
 320               	.LM28:
 321 0064 892F      		mov r24,r25
 322 0066 0E94 0000 		call spi_fast_shift
 132:AS5048A.c     **** 	spi_fast_shift(registerAddress & 0xFF);
 323               		.stabn	68,0,132,.LM29-.LFBB8
 324               	.LM29:
 325 006a 8C2F      		mov r24,r28
 326 006c 0E94 0000 		call spi_fast_shift
 133:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 327               		.stabn	68,0,133,.LM30-.LFBB8
 328               	.LM30:
 329 0070 2A9A      		sbi 0x5,2
 136:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);;
 330               		.stabn	68,0,136,.LM31-.LFBB8
 331               	.LM31:
 332 0072 2A98      		cbi 0x5,2
 137:AS5048A.c     **** 	uint8_t left_byte = spi_fast_shift(0xFF);
 333               		.stabn	68,0,137,.LM32-.LFBB8
 334               	.LM32:
 335 0074 8FEF      		ldi r24,lo8(-1)
 336 0076 0E94 0000 		call spi_fast_shift
 337 007a C82F      		mov r28,r24
 138:AS5048A.c     **** 	uint8_t right_byte = spi_fast_shift(0xFF);
 338               		.stabn	68,0,138,.LM33-.LFBB8
 339               	.LM33:
 340 007c 8FEF      		ldi r24,lo8(-1)
 341 007e 0E94 0000 		call spi_fast_shift
 139:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 342               		.stabn	68,0,139,.LM34-.LFBB8
 343               	.LM34:
 344 0082 2A9A      		sbi 0x5,2
 150:AS5048A.c     **** 	return (((left_byte & 0xFF) << 8 ) | (right_byte & 0xFF)) & ~0xC000;
 345               		.stabn	68,0,150,.LM35-.LFBB8
 346               	.LM35:
 347 0084 2C2F      		mov r18,r28
 348 0086 30E0      		ldi r19,0
 349 0088 322F      		mov r19,r18
 350 008a 2227      		clr r18
 351 008c 282B      		or r18,r24
GAS LISTING /tmp/ccfBTpsL.s 			page 11


 151:AS5048A.c     **** }
 352               		.stabn	68,0,151,.LM36-.LFBB8
 353               	.LM36:
 354 008e C901      		movw r24,r18
 355 0090 9F73      		andi r25,63
 356               	/* epilogue start */
 357 0092 CF91      		pop r28
 358 0094 0895      		ret
 359               		.size	AS5048A_read, .-AS5048A_read
 360               		.stabs	"left_byte:r(5,2)",64,0,137,28
 361               		.stabn	192,0,0,.LFBB8-.LFBB8
 362               		.stabn	224,0,0,.Lscope8-.LFBB8
 363               	.Lscope8:
 364               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 365               		.stabd	78,0,0
 366               		.stabs	"AS5048A_getRawRotation:F(5,4)",36,0,73,AS5048A_getRawRotation
 367               	.global	AS5048A_getRawRotation
 368               		.type	AS5048A_getRawRotation, @function
 369               	AS5048A_getRawRotation:
 370               		.stabd	46,0,0
  73:AS5048A.c     **** uint16_t AS5048A_getRawRotation(void){
 371               		.stabn	68,0,73,.LM37-.LFBB9
 372               	.LM37:
 373               	.LFBB9:
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
  74:AS5048A.c     **** 	return AS5048A_read(AS5048A_ANGLE);
 378               		.stabn	68,0,74,.LM38-.LFBB9
 379               	.LM38:
 380 0096 8FEF      		ldi r24,lo8(-1)
 381 0098 9FE3      		ldi r25,lo8(63)
 382 009a 0C94 0000 		jmp AS5048A_read
 383               		.size	AS5048A_getRawRotation, .-AS5048A_getRawRotation
 384               	.Lscope9:
 385               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 386               		.stabd	78,0,0
 387               		.stabs	"AS5048A_getRotation:F(0,1)",36,0,57,AS5048A_getRotation
 388               	.global	AS5048A_getRotation
 389               		.type	AS5048A_getRotation, @function
 390               	AS5048A_getRotation:
 391               		.stabd	46,0,0
  57:AS5048A.c     **** int AS5048A_getRotation(void){
 392               		.stabn	68,0,57,.LM39-.LFBB10
 393               	.LM39:
 394               	.LFBB10:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
  61:AS5048A.c     **** 	data = AS5048A_getRawRotation();
 399               		.stabn	68,0,61,.LM40-.LFBB10
 400               	.LM40:
 401 009e 0E94 0000 		call AS5048A_getRawRotation
  62:AS5048A.c     **** 	rotation = (int)data - (int)position;
 402               		.stabn	68,0,62,.LM41-.LFBB10
GAS LISTING /tmp/ccfBTpsL.s 			page 12


 403               	.LM41:
 404 00a2 2091 0000 		lds r18,position
 405 00a6 3091 0000 		lds r19,position+1
 406 00aa 821B      		sub r24,r18
 407 00ac 930B      		sbc r25,r19
  63:AS5048A.c     **** 	if(rotation > 8191) 
 408               		.stabn	68,0,63,.LM42-.LFBB10
 409               	.LM42:
 410 00ae 8115      		cp r24,__zero_reg__
 411 00b0 20E2      		ldi r18,32
 412 00b2 9207      		cpc r25,r18
 413 00b4 04F0      		brlt .L20
  64:AS5048A.c     **** 		rotation = -((0x3FFF)-rotation); //more than -180
 414               		.stabn	68,0,64,.LM43-.LFBB10
 415               	.LM43:
 416 00b6 8F5F      		subi r24,-1
 417 00b8 9F43      		sbci r25,63
 418               	.L20:
  68:AS5048A.c     **** }
 419               		.stabn	68,0,68,.LM44-.LFBB10
 420               	.LM44:
 421 00ba 0895      		ret
 422               		.size	AS5048A_getRotation, .-AS5048A_getRotation
 423               		.stabs	"rotation:r(0,1)",64,0,59,24
 424               		.stabn	192,0,0,.LFBB10-.LFBB10
 425               		.stabn	224,0,0,.Lscope10-.LFBB10
 426               	.Lscope10:
 427               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 428               		.stabd	78,0,0
 429               		.stabs	"AS5048A_getState:F(5,4)",36,0,81,AS5048A_getState
 430               	.global	AS5048A_getState
 431               		.type	AS5048A_getState, @function
 432               	AS5048A_getState:
 433               		.stabd	46,0,0
  81:AS5048A.c     **** uint16_t AS5048A_getState(void){
 434               		.stabn	68,0,81,.LM45-.LFBB11
 435               	.LM45:
 436               	.LFBB11:
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 439               	/* stack size = 0 */
 440               	.L__stack_usage = 0
  82:AS5048A.c     **** 	return AS5048A_read(AS5048A_DIAG_AGC);
 441               		.stabn	68,0,82,.LM46-.LFBB11
 442               	.LM46:
 443 00bc 8DEF      		ldi r24,lo8(-3)
 444 00be 9FE3      		ldi r25,lo8(63)
 445 00c0 0C94 0000 		jmp AS5048A_read
 446               		.size	AS5048A_getState, .-AS5048A_getState
 447               	.Lscope11:
 448               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 449               		.stabd	78,0,0
 450               		.stabs	"AS5048A_getGain:F(5,2)",36,0,89,AS5048A_getGain
 451               	.global	AS5048A_getGain
 452               		.type	AS5048A_getGain, @function
 453               	AS5048A_getGain:
 454               		.stabd	46,0,0
GAS LISTING /tmp/ccfBTpsL.s 			page 13


  89:AS5048A.c     **** uint8_t AS5048A_getGain(void){
 455               		.stabn	68,0,89,.LM47-.LFBB12
 456               	.LM47:
 457               	.LFBB12:
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460               	/* stack size = 0 */
 461               	.L__stack_usage = 0
  90:AS5048A.c     **** 	uint16_t data = AS5048A_getState();
 462               		.stabn	68,0,90,.LM48-.LFBB12
 463               	.LM48:
 464 00c4 0E94 0000 		call AS5048A_getState
  92:AS5048A.c     **** }
 465               		.stabn	68,0,92,.LM49-.LFBB12
 466               	.LM49:
 467 00c8 0895      		ret
 468               		.size	AS5048A_getGain, .-AS5048A_getGain
 469               	.Lscope12:
 470               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 471               		.stabd	78,0,0
 472               		.stabs	"AS5048A_getErrors:F(5,4)",36,0,97,AS5048A_getErrors
 473               	.global	AS5048A_getErrors
 474               		.type	AS5048A_getErrors, @function
 475               	AS5048A_getErrors:
 476               		.stabd	46,0,0
  97:AS5048A.c     **** uint16_t AS5048A_getErrors(void){
 477               		.stabn	68,0,97,.LM50-.LFBB13
 478               	.LM50:
 479               	.LFBB13:
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	/* stack size = 0 */
 483               	.L__stack_usage = 0
  98:AS5048A.c     **** 	return AS5048A_read(AS5048A_CLEAR_ERROR_FLAG);
 484               		.stabn	68,0,98,.LM51-.LFBB13
 485               	.LM51:
 486 00ca 81E0      		ldi r24,lo8(1)
 487 00cc 90E0      		ldi r25,0
 488 00ce 0C94 0000 		jmp AS5048A_read
 489               		.size	AS5048A_getErrors, .-AS5048A_getErrors
 490               	.Lscope13:
 491               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 492               		.stabd	78,0,0
 493               		.stabs	"AS5048A_write:F(5,4)",36,0,161,AS5048A_write
 494               		.stabs	"registerAddress:P(5,4)",64,0,161,14
 495               		.stabs	"data:P(5,4)",64,0,161,16
 496               	.global	AS5048A_write
 497               		.type	AS5048A_write, @function
 498               	AS5048A_write:
 499               		.stabd	46,0,0
 161:AS5048A.c     **** uint16_t AS5048A_write(uint16_t registerAddress, uint16_t data) {
 500               		.stabn	68,0,161,.LM52-.LFBB14
 501               	.LM52:
 502               	.LFBB14:
 503 00d2 EF92      		push r14
 504 00d4 FF92      		push r15
 505 00d6 0F93      		push r16
GAS LISTING /tmp/ccfBTpsL.s 			page 14


 506 00d8 1F93      		push r17
 507 00da CF93      		push r28
 508 00dc DF93      		push r29
 509               	/* prologue: function */
 510               	/* frame size = 0 */
 511               	/* stack size = 6 */
 512               	.L__stack_usage = 6
 513 00de 7C01      		movw r14,r24
 514 00e0 8B01      		movw r16,r22
 167:AS5048A.c     **** 	command |= ((uint16_t)AS5048A_spiCalcEvenParity(command)<<15);
 515               		.stabn	68,0,167,.LM53-.LFBB14
 516               	.LM53:
 517 00e2 0E94 0000 		call AS5048A_spiCalcEvenParity
 518 00e6 C82F      		mov r28,r24
 519 00e8 D0E0      		ldi r29,0
 520 00ea DD27      		clr r29
 521 00ec C695      		lsr r28
 522 00ee D795      		ror r29
 523 00f0 CC27      		clr r28
 524 00f2 CE29      		or r28,r14
 525 00f4 DF29      		or r29,r15
 175:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 526               		.stabn	68,0,175,.LM54-.LFBB14
 527               	.LM54:
 528 00f6 2A98      		cbi 0x5,2
 176:AS5048A.c     **** 	spi_fast_shift(left_byte);
 529               		.stabn	68,0,176,.LM55-.LFBB14
 530               	.LM55:
 531 00f8 8D2F      		mov r24,r29
 532 00fa 0E94 0000 		call spi_fast_shift
 177:AS5048A.c     **** 	spi_fast_shift(right_byte);
 533               		.stabn	68,0,177,.LM56-.LFBB14
 534               	.LM56:
 535 00fe 8C2F      		mov r24,r28
 536 0100 0E94 0000 		call spi_fast_shift
 178:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 537               		.stabn	68,0,178,.LM57-.LFBB14
 538               	.LM57:
 539 0104 2A9A      		sbi 0x5,2
 184:AS5048A.c     **** 	dataToSend |= ((uint16_t)AS5048A_spiCalcEvenParity(dataToSend)<<15);
 540               		.stabn	68,0,184,.LM58-.LFBB14
 541               	.LM58:
 542 0106 C801      		movw r24,r16
 543 0108 0E94 0000 		call AS5048A_spiCalcEvenParity
 544 010c C82F      		mov r28,r24
 545 010e D0E0      		ldi r29,0
 546 0110 DD27      		clr r29
 547 0112 C695      		lsr r28
 548 0114 D795      		ror r29
 549 0116 CC27      		clr r28
 550 0118 C02B      		or r28,r16
 551 011a D12B      		or r29,r17
 189:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 552               		.stabn	68,0,189,.LM59-.LFBB14
 553               	.LM59:
 554 011c 2A98      		cbi 0x5,2
 190:AS5048A.c     **** 	spi_fast_shift(left_byte);
GAS LISTING /tmp/ccfBTpsL.s 			page 15


 555               		.stabn	68,0,190,.LM60-.LFBB14
 556               	.LM60:
 557 011e 8D2F      		mov r24,r29
 558 0120 0E94 0000 		call spi_fast_shift
 191:AS5048A.c     **** 	spi_fast_shift(right_byte);
 559               		.stabn	68,0,191,.LM61-.LFBB14
 560               	.LM61:
 561 0124 8C2F      		mov r24,r28
 562 0126 0E94 0000 		call spi_fast_shift
 192:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 563               		.stabn	68,0,192,.LM62-.LFBB14
 564               	.LM62:
 565 012a 2A9A      		sbi 0x5,2
 195:AS5048A.c     **** 	PORT_SPI &= ~(1<<DD_SS);
 566               		.stabn	68,0,195,.LM63-.LFBB14
 567               	.LM63:
 568 012c 2A98      		cbi 0x5,2
 196:AS5048A.c     **** 	left_byte =-spi_fast_shift(0xFF);
 569               		.stabn	68,0,196,.LM64-.LFBB14
 570               	.LM64:
 571 012e 8FEF      		ldi r24,lo8(-1)
 572 0130 0E94 0000 		call spi_fast_shift
 573 0134 C82F      		mov r28,r24
 197:AS5048A.c     **** 	right_byte = spi_fast_shift(0xFF);
 574               		.stabn	68,0,197,.LM65-.LFBB14
 575               	.LM65:
 576 0136 8FEF      		ldi r24,lo8(-1)
 577 0138 0E94 0000 		call spi_fast_shift
 198:AS5048A.c     **** 	PORT_SPI |= (1<<DD_SS);
 578               		.stabn	68,0,198,.LM66-.LFBB14
 579               	.LM66:
 580 013c 2A9A      		sbi 0x5,2
 196:AS5048A.c     **** 	left_byte =-spi_fast_shift(0xFF);
 581               		.stabn	68,0,196,.LM67-.LFBB14
 582               	.LM67:
 583 013e C195      		neg r28
 201:AS5048A.c     **** 	return (( ( left_byte & 0xFF ) << 8 ) | ( right_byte & 0xFF )) & ~0xC000;
 584               		.stabn	68,0,201,.LM68-.LFBB14
 585               	.LM68:
 586 0140 2C2F      		mov r18,r28
 587 0142 30E0      		ldi r19,0
 588 0144 322F      		mov r19,r18
 589 0146 2227      		clr r18
 590 0148 282B      		or r18,r24
 202:AS5048A.c     **** }
 591               		.stabn	68,0,202,.LM69-.LFBB14
 592               	.LM69:
 593 014a C901      		movw r24,r18
 594 014c 9F73      		andi r25,63
 595               	/* epilogue start */
 596 014e DF91      		pop r29
 597 0150 CF91      		pop r28
 598 0152 1F91      		pop r17
 599 0154 0F91      		pop r16
 600 0156 FF90      		pop r15
 601 0158 EF90      		pop r14
 602 015a 0895      		ret
GAS LISTING /tmp/ccfBTpsL.s 			page 16


 603               		.size	AS5048A_write, .-AS5048A_write
 604               		.stabs	"command:r(5,4)",64,0,163,28
 605               		.stabs	"dataToSend:r(5,4)",64,0,180,28
 606               		.stabn	192,0,0,.LFBB14-.LFBB14
 607               		.stabn	224,0,0,.Lscope14-.LFBB14
 608               	.Lscope14:
 609               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 610               		.stabd	78,0,0
 611               		.comm	position,2,1
 612               		.comm	errorFlag,1,1
 613               		.stabs	"errorFlag:G(5,2)",32,0,31,0
 614               		.stabs	"position:G(5,4)",32,0,33,0
 615               		.stabs	"",100,0,0,.Letext0
 616               	.Letext0:
 617               		.ident	"GCC: (GNU) 4.8.2"
 618               	.global __do_clear_bss
GAS LISTING /tmp/ccfBTpsL.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 AS5048A.c
     /tmp/ccfBTpsL.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfBTpsL.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfBTpsL.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfBTpsL.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfBTpsL.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfBTpsL.s:105    .text:0000000000000000 AS5048A_Init
     /tmp/ccfBTpsL.s:140    .text:0000000000000016 AS5048A_close
     /tmp/ccfBTpsL.s:161    .text:000000000000001a AS5048A_spiCalcEvenParity
     /tmp/ccfBTpsL.s:208    .text:0000000000000030 AS5048A_setZeroPosition
                            *COM*:0000000000000002 position
     /tmp/ccfBTpsL.s:232    .text:0000000000000042 AS5048A_getZeroPosition
     /tmp/ccfBTpsL.s:253    .text:000000000000004c AS5048A_error
                            *COM*:0000000000000001 errorFlag
     /tmp/ccfBTpsL.s:274    .text:0000000000000052 spi_fast_shift
     /tmp/ccfBTpsL.s:305    .text:000000000000005e AS5048A_read
     /tmp/ccfBTpsL.s:369    .text:0000000000000096 AS5048A_getRawRotation
     /tmp/ccfBTpsL.s:390    .text:000000000000009e AS5048A_getRotation
     /tmp/ccfBTpsL.s:432    .text:00000000000000bc AS5048A_getState
     /tmp/ccfBTpsL.s:453    .text:00000000000000c4 AS5048A_getGain
     /tmp/ccfBTpsL.s:475    .text:00000000000000ca AS5048A_getErrors
     /tmp/ccfBTpsL.s:498    .text:00000000000000d2 AS5048A_write

UNDEFINED SYMBOLS
__udivmodhi4
__do_clear_bss
